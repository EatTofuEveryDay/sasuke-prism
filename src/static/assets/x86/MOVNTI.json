{"title":"MOVNTI — Store Doubleword Using Non-Temporal Hint","fields":[{"name":"Instruction Modes","value":"`MOVNTI m32, r32`\n`MOVNTI m64, r64`"},{"name":"Description","value":"Moves the doubleword integer in the source operand (second operand) to the destination operand (first operand) using a non-temporal hint to minimize cache pollution during the write to memory. The source operand is a general-purpose register. The destination operand is a 32-bit memory location."},{"name":"\u200b","value":"The non-temporal hint is implemented by using a write combining (WC) memory type protocol when writing the data to memory. Using this protocol, the processor does not write the data into the cache hierarchy, nor does it fetch the corresponding cache line from memory into the cache hierarchy. The memory type of the region being written to can override the non-temporal hint, if the memory address specified for the non-temporal store is in an uncacheable (UC) or write protected (WP) memory region. For more information on non-temporal stores, see “Caching of Temporal vs. Non-Temporal Data” in Chapter 10 in the Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 1."},{"name":"\u200b","value":"Because the WC protocol uses a weakly-ordered memory consistency model, a fencing operation implemented with the SFENCE or MFENCE instruction should be used in conjunction with MOVNTI instructions if multiple processors might use different memory types to read/write the destination memory locations."},{"name":"\u200b","value":"In 64-bit mode, the instruction’s default operation size is 32 bits. Use of the REX.R prefix permits access to additional registers (R8-R15). Use of the REX.W prefix promotes operation to 64 bits. See the summary chart at the beginning of this section for encoding data and limits."},{"name":"C/C++ Intrinsics","value":"`MOVNTI: void _mm_stream_si32 (int *p, int a)\n`"},{"name":"\u200b","value":"`MOVNTI: void _mm_stream_si64(__int64 *p, __int64 a)\n`"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}