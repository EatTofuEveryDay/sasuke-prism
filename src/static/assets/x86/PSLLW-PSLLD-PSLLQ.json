{"title":"PSLLW/PSLLD/PSLLQ â€” Shift Packed Data Left Logical","fields":[{"name":"Instruction Modes","value":"`PSLLW mm, mm/m64`\n`PSLLW xmm1, xmm2/m128`\n`ib PSLLW mm1, imm8`\n`ib PSLLW xmm1, imm8`\n`PSLLD mm, mm/m64`\n`PSLLD xmm1, xmm2/m128`\n`ib1 PSLLD mm, imm8`\n`ib PSLLD xmm1, imm8`\n`PSLLQ mm, mm/m64`\n`PSLLQ xmm1, xmm2/m128`\n`ib1 PSLLQ mm, imm8`\n`ib PSLLQ xmm1, imm8`\n`VPSLLW xmm1, xmm2, xmm3/m128`\n`ib VPSLLW xmm1, xmm2, imm8`\n`VPSLLD xmm1, xmm2, xmm3/m128`\n`ib VPSLLD xmm1, xmm2, imm8`\n`VPSLLQ xmm1, xmm2, xmm3/m128`\n`ib VPSLLQ xmm1, xmm2, imm8`\n`VPSLLW ymm1, ymm2, xmm3/m128`\n`ib VPSLLW ymm1, ymm2, imm8`"},{"name":"Description","value":"Shifts the bits in the individual data elements (words, doublewords, or quadword) in the destination operand (first operand) to the left by the number of bits specified in the count operand (second operand). As the bits in the data elements are shifted left, the empty low-order bits are cleared (set to 0). If the value specified by the count operand is greater than 15 (for words), 31 (for doublewords), or 63 (for a quadword), then the destination operand is set to all 0s. Figure 4-17 gives an example of shifting words in a 64-bit operand."},{"name":"CPUID Flags","value":"MMX"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}