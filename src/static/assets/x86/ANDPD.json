{"title":"ANDPD â€” Bitwise Logical AND of Packed Double Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`ANDPD xmm1, xmm2/m128`\n`VANDPD xmm1, xmm2, xmm3/m128`\n`VANDPD ymm1, ymm2, ymm3/m256`\n`VANDPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VANDPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VANDPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst`"},{"name":"Description","value":"Performs a bitwise logical AND of the two, four or eight packed double-precision floating-point values from the first source operand and the second source operand, and stores the result in the destination operand."},{"name":"\u200b","value":"EVEX encoded versions: The first source operand is a ZMM/YMM/XMM register. The second source operand can be a ZMM/YMM/XMM register, a 512/256/128-bit memory location, or a 512/256/128-bit vector broadcasted from a 64-bit memory location. The destination operand is a ZMM/YMM/XMM register conditionally updated with writemask k1."},{"name":"\u200b","value":"VEX.256 encoded version: The first source operand is a YMM register. The second source operand is a YMM register or a 256-bit memory location. The destination operand is a YMM register. The upper bits (MAXVL-1:256) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"VEX.128 encoded version: The first source operand is an XMM register. The second source operand is an XMM register or 128-bit memory location. The destination operand is an XMM register. The upper bits (MAXVL-1:128) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"128-bit Legacy SSE version: The second source can be an XMM register or an 128-bit memory location. The destination is not distinct from the first source XMM register and the upper bits (MAXVL-1:128) of the corresponding register destination are unmodified."},{"name":"C/C++ Intriniscs","value":"`VANDPD __m512d _mm512_and_pd (__m512d a, __m512d b);\n`"},{"name":"\u200b","value":"`VANDPD __m512d _mm512_mask_and_pd (__m512d s, __mmask8 k, __m512d a, __m512d b);\n`"},{"name":"\u200b","value":"`VANDPD __m512d _mm512_maskz_and_pd (__mmask8 k, __m512d a, __m512d b);\n`"},{"name":"\u200b","value":"`VANDPD __m256d _mm256_mask_and_pd (__m256d s, __mmask8 k, __m256d a, __m256d b);\n`"},{"name":"\u200b","value":"`VANDPD __m256d _mm256_maskz_and_pd (__mmask8 k, __m256d a, __m256d b);\n`"},{"name":"\u200b","value":"`VANDPD __m128d _mm_mask_and_pd (__m128d s, __mmask8 k, __m128d a, __m128d b);\n`"},{"name":"\u200b","value":"`VANDPD __m128d _mm_maskz_and_pd (__mmask8 k, __m128d a, __m128d b);\n`"},{"name":"\u200b","value":"`VANDPD __m256d _mm256_and_pd (__m256d a, __m256d b);\n`"},{"name":"\u200b","value":"`ANDPD __m128d _mm_and_pd (__m128d a, __m128d b);\n`"},{"name":"CPUID Flags","value":"SSE2"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}