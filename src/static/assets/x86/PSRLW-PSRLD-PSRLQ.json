{"title":"PSRLW/PSRLD/PSRLQ â€” Shift Packed Data Right Logical","fields":[{"name":"Instruction Modes","value":"`PSRLW mm, mm/m64`\n`PSRLW xmm1, xmm2/m128`\n`ib1 PSRLW mm, imm8`\n`ib PSRLW xmm1, imm8`\n`PSRLD mm, mm/m64`\n`PSRLD xmm1, xmm2/m128`\n`ib1 PSRLD mm, imm8`\n`ib PSRLD xmm1, imm8`\n`PSRLQ mm, mm/m64`\n`PSRLQ xmm1, xmm2/m128`\n`ib1 PSRLQ mm, imm8`\n`ib PSRLQ xmm1, imm8`\n`VPSRLW xmm1, xmm2, xmm3/m128`\n`ib VPSRLW xmm1, xmm2, imm8`\n`VPSRLD xmm1, xmm2, xmm3/m128`\n`ib VPSRLD xmm1, xmm2, imm8`\n`VPSRLQ xmm1, xmm2, xmm3/m128`\n`ib VPSRLQ xmm1, xmm2, imm8`\n`VPSRLW ymm1, ymm2, xmm3/m128`\n`ib VPSRLW ymm1, ymm2, imm8`"},{"name":"Description","value":"Shifts the bits in the individual data elements (words, doublewords, or quadword) in the destination operand (first operand) to the right by the number of bits specified in the count operand (second operand). As the bits in the data elements are shifted right, the empty high-order bits are cleared (set to 0). If the value specified by the count operand is greater than 15 (for words), 31 (for doublewords), or 63 (for a quadword), then the destination operand is set to all 0s. Figure 4-19 gives an example of shifting words in a 64-bit operand."},{"name":"\u200b","value":"Note that only the low 64-bits of a 128-bit count operand are checked to compute the count."},{"name":"CPUID Flags","value":"MMX"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}