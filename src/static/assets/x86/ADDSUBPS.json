{"title":"ADDSUBPS â€” Packed Single-FP Add/Subtract","fields":[{"name":"Instruction Modes","value":"`ADDSUBPS xmm1, xmm2/m128`\n`VADDSUBPS xmm1, xmm2, xmm3/m128`\n`VADDSUBPS ymm1, ymm2, ymm3/m256`"},{"name":"Description","value":"Adds odd-numbered single-precision floating-point values of the first source operand (second operand) with the corresponding single-precision floating-point values from the second source operand (third operand); stores the result in the odd-numbered values of the destination operand (first operand). Subtracts the even-numbered single-precision floating-point values from the second source operand from the corresponding single-precision floating values in the first source operand; stores the result into the even-numbered values of the destination operand."},{"name":"\u200b","value":"In 64-bit mode, using a REX prefix in the form of REX.R permits this instruction to access additional registers (XMM8-XMM15)."},{"name":"\u200b","value":"128-bit Legacy SSE version: The second source can be an XMM register or an 128-bit memory location. The destination is not distinct from the first source XMM register and the upper bits (MAXVL-1:128) of the corresponding YMM register destination are unmodified. See Figure 3-4."},{"name":"\u200b","value":"VEX.128 encoded version: the first source operand is an XMM register or 128-bit memory location. The destination operand is an XMM register. The upper bits (MAXVL-1:128) of the corresponding YMM register destination are zeroed."},{"name":"\u200b","value":"VEX.256 encoded version: The first source operand is a YMM register. The second source operand can be a YMM register or a 256-bit memory location. The destination operand is a YMM register."},{"name":"C/C++ Intrinsics","value":"`ADDSUBPS: __m128 _mm_addsub_ps(__m128 a, __m128 b)\n`"},{"name":"\u200b","value":"`VADDSUBPS: __m256 _mm256_addsub_ps (__m256 a, __m256 b)\n`"},{"name":"CPUID Flags","value":"SSE3"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}