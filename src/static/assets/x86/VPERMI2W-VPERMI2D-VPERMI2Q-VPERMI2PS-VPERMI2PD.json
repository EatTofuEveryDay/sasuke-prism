{"title":"VPERMI2W/VPERMI2D/VPERMI2Q/VPERMI2PS/VPERMI2PD â€” Full Permute From Two Tables Overwriting the Index","fields":[{"name":"Instruction Modes","value":"`VPERMI2W xmm1 {k1}{z}, xmm2, xmm3/m128`\n`VPERMI2W ymm1 {k1}{z}, ymm2, ymm3/m256`\n`VPERMI2W zmm1 {k1}{z}, zmm2, zmm3/m512`\n`VPERMI2D xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`VPERMI2D ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VPERMI2D zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst`\n`VPERMI2Q xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VPERMI2Q ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VPERMI2Q zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst`\n`VPERMI2PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`VPERMI2PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VPERMI2PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst`\n`VPERMI2PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VPERMI2PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VPERMI2PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst`"},{"name":"Description","value":"Permutes 16-bit/32-bit/64-bit values in the second operand (the first source operand) and the third operand (the second source operand) using indices in the first operand to select elements from the second and third operands. The selected elements are written to the destination operand (the first operand) according to the writemask k1."},{"name":"\u200b","value":"The first and second operands are ZMM/YMM/XMM registers. The first operand contains input indices to select elements from the two input tables in the 2nd and 3rd operands. The first operand is also the destination of the result."},{"name":"\u200b","value":"D/Q/PS/PD element versions: The second source operand can be a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32/64-bit memory location. Broadcast from the low 32/64-bit memory location is performed if EVEX.b and the id bit for table selection are set (selecting table_2)."},{"name":"\u200b","value":"Dword/PS versions: The id bit for table selection is bit 4/3/2, depending on VL=512, 256, 128. Bits [3:0]/[2:0]/[1:0] of each element in the input index vector select an element within the two source operands, If the id bit is 0, table_1 (the first source) is selected; otherwise the second source operand is selected."},{"name":"\u200b","value":"Qword/PD versions: The id bit for table selection is bit 3/2/1, and bits [2:0]/[1:0] /bit 0 selects element within each input table."},{"name":"\u200b","value":"Word element versions: The second source operand can be a ZMM/YMM/XMM register, or a 512/256/128-bit memory location. The id bit for table selection is bit 5/4/3, and bits [4:0]/[3:0]/[2:0] selects element within each input table."},{"name":"\u200b","value":"Note that these instructions permit a 16-bit/32-bit/64-bit value in the source operands to be copied to more than one location in the destination operand. Note also that in this case, the same table can be reused for example for a second iteration, while the index elements are overwritten."},{"name":"\u200b","value":"Bits (MAXVL-1:256/128) of the destination are zeroed for VL=256,128."},{"name":"C/C++ Intrinsics","value":"`VPERMI2D __m512i _mm512_permutex2var_epi32(__m512i a, __m512i idx, __m512i b);\n`"},{"name":"\u200b","value":"`VPERMI2D __m512i _mm512_mask_permutex2var_epi32(__m512i a, __mmask16 k, __m512i idx, __m512i b);\n`"},{"name":"\u200b","value":"`VPERMI2D __m512i _mm512_mask2_permutex2var_epi32(__m512i a, __m512i idx, __mmask16 k, __m512i b);\n`"},{"name":"\u200b","value":"`VPERMI2D __m512i _mm512_maskz_permutex2var_epi32(__mmask16 k, __m512i a, __m512i idx, __m512i b);\n`"},{"name":"\u200b","value":"`VPERMI __m256i _mm256_permutex2var_epi32(__m256i a, __m256i idx, __m256i b);\n`"},{"name":"\u200b","value":"`VPERMI2D __m256i _mm256_mask_permutex2var_epi32(__m256i a, __mmask8 k, __m256i idx, __m256i b);\n`"},{"name":"\u200b","value":"`VPERMI2D __m256i _mm256_mask2_permutex2var_epi32(__m256i a, __m256i idx, __mmask8 k, __m256i b);\n`"},{"name":"\u200b","value":"`VPERMI2D __m256i _mm256_maskz_permutex2var_epi32(__mmask8 k, __m256i a, __m256i idx, __m256i b);\n`"},{"name":"\u200b","value":"`VPERMI2D __m128i _mm_permutex2var_epi32(__m128i a, __m128i idx, __m128i b);\n`"},{"name":"\u200b","value":"`VPERMI2D __m128i _mm_mask_permutex2var_epi32(__m128i a, __mmask8 k, __m128i idx, __m128i b);\n`"},{"name":"\u200b","value":"`VPERMI2D __m128i _mm_mask2_permutex2var_epi32(__m128i a, __m128i idx, __mmask8 k, __m128i b);\n`"},{"name":"\u200b","value":"`VPERMI2D __m128i _mm_maskz_permutex2var_epi32(__mmask8 k, __m128i a, __m128i idx, __m128i b);\n`"},{"name":"\u200b","value":"`VPERMI2PD __m512d _mm512_permutex2var_pd(__m512d a, __m512i idx, __m512d b);\n`"},{"name":"\u200b","value":"`VPERMI2PD __m512d _mm512_mask_permutex2var_pd(__m512d a, __mmask8 k, __m512i idx, __m512d b);\n`"},{"name":"\u200b","value":"(46 more)"},{"name":"CPUID Flags","value":"AVX512VL AVX512BW"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}