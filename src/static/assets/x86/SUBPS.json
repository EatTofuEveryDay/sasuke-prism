{"title":"SUBPS â€” Subtract Packed Single-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`SUBPS xmm1, xmm2/m128`\n`VSUBPS xmm1,xmm2, xmm3/m128`\n`VSUBPS ymm1, ymm2, ymm3/m256`\n`VSUBPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`VSUBPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VSUBPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}`"},{"name":"Description","value":"Performs a SIMD subtract of the packed single-precision floating-point values in the second Source operand from the First Source operand, and stores the packed single-precision floating-point results in the destination operand."},{"name":"\u200b","value":"VEX.128 and EVEX.128 encoded versions: The second source operand is an XMM register or an 128-bit memory location. The first source operand and destination operands are XMM registers. Bits (MAXVL-1:128) of the corresponding destination register are zeroed."},{"name":"\u200b","value":"VEX.256 and EVEX.256 encoded versions: The second source operand is an YMM register or an 256-bit memory location. The first source operand and destination operands are YMM registers. Bits (MAXVL-1:256) of the corresponding destination register are zeroed."},{"name":"\u200b","value":"EVEX.512 encoded version: The second source operand is a ZMM register, a 512-bit memory location or a 512-bit vector broadcasted from a 32-bit memory location. The first source operand and destination operands are ZMM registers. The destination operand is conditionally updated according to the writemask."},{"name":"\u200b","value":"128-bit Legacy SSE version: The second source can be an XMM register or an 128-bit memory location. The destination is not distinct from the first source XMM register and the upper Bits (MAXVL-1:128) of the corresponding register destination are unmodified."},{"name":"C/C++ Intriniscs","value":"`VSUBPS __m512 _mm512_sub_ps (__m512 a, __m512 b);\n`"},{"name":"\u200b","value":"`VSUBPS __m512 _mm512_mask_sub_ps (__m512 s, __mmask16 k, __m512 a, __m512 b);\n`"},{"name":"\u200b","value":"`VSUBPS __m512 _mm512_maskz_sub_ps (__mmask16 k, __m512 a, __m512 b);\n`"},{"name":"\u200b","value":"`VSUBPS __m512 _mm512_sub_round_ps (__m512 a, __m512 b, int);\n`"},{"name":"\u200b","value":"`VSUBPS __m512 _mm512_mask_sub_round_ps (__m512 s, __mmask16 k, __m512 a, __m512 b, int);\n`"},{"name":"\u200b","value":"`VSUBPS __m512 _mm512_maskz_sub_round_ps (__mmask16 k, __m512 a, __m512 b, int);\n`"},{"name":"\u200b","value":"`VSUBPS __m256 _mm256_sub_ps (__m256 a, __m256 b);\n`"},{"name":"\u200b","value":"`VSUBPS __m256 _mm256_mask_sub_ps (__m256 s, __mmask8 k, __m256 a, __m256 b);\n`"},{"name":"\u200b","value":"`VSUBPS __m256 _mm256_maskz_sub_ps (__mmask16 k, __m256 a, __m256 b);\n`"},{"name":"\u200b","value":"`SUBPS __m128 _mm_sub_ps (__m128 a, __m128 b);\n`"},{"name":"\u200b","value":"`VSUBPS __m128 _mm_mask_sub_ps (__m128 s, __mmask8 k, __m128 a, __m128 b);\n`"},{"name":"\u200b","value":"`VSUBPS __m128 _mm_maskz_sub_ps (__mmask16 k, __m128 a, __m128 b);\n`"},{"name":"CPUID Flags","value":"SSE"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}