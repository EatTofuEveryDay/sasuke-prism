{"title":"PMULLD/PMULLQ â€” Multiply Packed Integers and Store Low Result","fields":[{"name":"Instruction Modes","value":"`PMULLD xmm1, xmm2/m128`\n`VPMULLD xmm1, xmm2, xmm3/m128`\n`VPMULLD ymm1, ymm2, ymm3/m256`\n`VPMULLD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`VPMULLD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VPMULLD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst`\n`VPMULLQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VPMULLQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VPMULLQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst`"},{"name":"Description","value":"Performs a SIMD signed multiply of the packed signed dword/qword integers from each element of the first source operand with the corresponding element in the second source operand. The low 32/64 bits of each 64/128-bit intermediate results are stored to the destination operand."},{"name":"\u200b","value":"128-bit Legacy SSE version: The first source and destination operands are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the corresponding ZMM destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 encoded version: The first source and destination operands are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the corresponding ZMM register are zeroed."},{"name":"\u200b","value":"VEX.256 encoded version: The first source operand is a YMM register; The second source operand is a YMM register or 256-bit memory location. Bits (MAXVL-1:256) of the corresponding destination ZMM register are zeroed."},{"name":"\u200b","value":"EVEX encoded versions: The first source operand is a ZMM/YMM/XMM register. The second source operand is a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32/64-bit memory location. The destination operand is conditionally updated based on writemask k1."},{"name":"C/C++ Intriniscs","value":"`VPMULLD __m512i _mm512_mullo_epi32(__m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMULLD __m512i _mm512_mask_mullo_epi32(__m512i s, __mmask16 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMULLD __m512i _mm512_maskz_mullo_epi32( __mmask16 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMULLD __m256i _mm256_mask_mullo_epi32(__m256i s, __mmask8 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMULLD __m256i _mm256_maskz_mullo_epi32( __mmask8 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMULLD __m128i _mm_mask_mullo_epi32(__m128i s, __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPMULLD __m128i _mm_maskz_mullo_epi32( __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPMULLD __m256i _mm256_mullo_epi32(__m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`PMULLD __m128i _mm_mullo_epi32(__m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPMULLQ __m512i _mm512_mullo_epi64(__m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMULLQ __m512i _mm512_mask_mullo_epi64(__m512i s, __mmask8 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMULLQ __m512i _mm512_maskz_mullo_epi64( __mmask8 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMULLQ __m256i _mm256_mullo_epi64(__m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMULLQ __m256i _mm256_mask_mullo_epi64(__m256i s, __mmask8 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMULLQ __m256i _mm256_maskz_mullo_epi64( __mmask8 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMULLQ __m128i _mm_mullo_epi64(__m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPMULLQ __m128i _mm_mask_mullo_epi64(__m128i s, __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPMULLQ __m128i _mm_maskz_mullo_epi64( __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"CPUID Flags","value":"SSE4_1"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}