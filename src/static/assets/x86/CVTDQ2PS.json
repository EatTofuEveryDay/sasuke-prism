{"title":"CVTDQ2PS â€” Convert Packed Doubleword Integers to Packed Single-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`CVTDQ2PS xmm1, xmm2/m128`\n`VCVTDQ2PS xmm1, xmm2/m128`\n`VCVTDQ2PS ymm1, ymm2/m256`\n`VCVTDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst`\n`VCVTDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst`\n`VCVTDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}`"},{"name":"Description","value":"Converts four, eight or sixteen packed signed doubleword integers in the source operand to four, eight or sixteen packed single-precision floating-point values in the destination operand."},{"name":"\u200b","value":"EVEX encoded versions: The source operand can be a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32-bit memory location. The destination operand is a ZMM/YMM/XMM register conditionally updated with writemask k1."},{"name":"\u200b","value":"VEX.256 encoded version: The source operand is a YMM register or 256- bit memory location. The destination operand is a YMM register. Bits (MAXVL-1:256) of the corresponding register destination are zeroed."},{"name":"\u200b","value":"VEX.128 encoded version: The source operand is an XMM register or 128- bit memory location. The destination operand is a XMM register. The upper bits (MAXVL-1:128) of the corresponding register destination are zeroed."},{"name":"\u200b","value":"128-bit Legacy SSE version: The source operand is an XMM register or 128- bit memory location. The destination operand is an XMM register. The upper Bits (MAXVL-1:128) of the corresponding register destination are unmodified."},{"name":"\u200b","value":"VEX.vvvv and EVEX.vvvv are reserved and must be 1111b, otherwise instructions will #UD."},{"name":"C/C++ Intrinsics","value":"`VCVTDQ2PS __m512 _mm512_cvtepi32_ps( __m512i a);\n`"},{"name":"\u200b","value":"`VCVTDQ2PS __m512 _mm512_mask_cvtepi32_ps( __m512 s, __mmask16 k, __m512i a);\n`"},{"name":"\u200b","value":"`VCVTDQ2PS __m512 _mm512_maskz_cvtepi32_ps( __mmask16 k, __m512i a);\n`"},{"name":"\u200b","value":"`VCVTDQ2PS __m512 _mm512_cvt_roundepi32_ps( __m512i a, int r);\n`"},{"name":"\u200b","value":"`VCVTDQ2PS __m512 _mm512_mask_cvt_roundepi_ps( __m512 s, __mmask16 k, __m512i a, int r);\n`"},{"name":"\u200b","value":"`VCVTDQ2PS __m512 _mm512_maskz_cvt_roundepi32_ps( __mmask16 k, __m512i a, int r);\n`"},{"name":"\u200b","value":"`VCVTDQ2PS __m256 _mm256_mask_cvtepi32_ps( __m256 s, __mmask8 k, __m256i a);\n`"},{"name":"\u200b","value":"`VCVTDQ2PS __m256 _mm256_maskz_cvtepi32_ps( __mmask8 k, __m256i a);\n`"},{"name":"\u200b","value":"`VCVTDQ2PS __m128 _mm_mask_cvtepi32_ps( __m128 s, __mmask8 k, __m128i a);\n`"},{"name":"\u200b","value":"`VCVTDQ2PS __m128 _mm_maskz_cvtepi32_ps( __mmask8 k, __m128i a);\n`"},{"name":"\u200b","value":"`CVTDQ2PS __m256 _mm256_cvtepi32_ps (__m256i src)\n`"},{"name":"\u200b","value":"`CVTDQ2PS __m128 _mm_cvtepi32_ps (__m128i src)\n`"},{"name":"CPUID Flags","value":"SSE2"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}