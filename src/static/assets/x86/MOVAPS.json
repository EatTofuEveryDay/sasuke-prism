{"title":"MOVAPS â€” Move Aligned Packed Single-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`MOVAPS xmm1, xmm2/m128`\n`MOVAPS xmm2/m128, xmm1`\n`VMOVAPS xmm1, xmm2/m128`\n`VMOVAPS xmm2/m128, xmm1`\n`VMOVAPS ymm1, ymm2/m256`\n`VMOVAPS ymm2/m256, ymm1`\n`VMOVAPS xmm1 {k1}{z}, xmm2/m128`\n`VMOVAPS ymm1 {k1}{z}, ymm2/m256`\n`VMOVAPS zmm1 {k1}{z}, zmm2/m512`\n`VMOVAPS xmm2/m128 {k1}{z}, xmm1`\n`VMOVAPS ymm2/m256 {k1}{z}, ymm1`\n`VMOVAPS zmm2/m512 {k1}{z}, zmm1`"},{"name":"Description","value":"Moves 4, 8 or 16 single-precision floating-point values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load an XMM, YMM or ZMM register from an 128-bit, 256-bit or 512-bit memory location, to store the contents of an XMM, YMM or ZMM register into a 128-bit, 256-bit or 512-bit memory location, or to move data between two XMM, two YMM or two ZMM registers."},{"name":"\u200b","value":"When the source or destination operand is a memory operand, the operand must be aligned on a 16-byte (128-bit version), 32-byte (VEX.256 encoded version) or 64-byte (EVEX.512 encoded version) boundary or a general-protection exception (#GP) will be generated. For EVEX.512 encoded versions, the operand must be aligned to the size of the memory operand. To move single-precision floating-point values to and from unaligned memory locations, use the VMOVUPS instruction."},{"name":"\u200b","value":"Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instructions will #UD."},{"name":"\u200b","value":"EVEX.512 encoded version:"},{"name":"\u200b","value":"Moves 512 bits of packed single-precision floating-point values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load a ZMM register from a 512-bit float32 memory location, to store the contents of a ZMM register into a float32 memory location, or to move data between two ZMM registers. When the source or destination operand is a memory operand, the operand must be aligned on a 64-byte boundary or a general-protection exception (#GP) will be generated. To move single-precision floating-point values to and from unaligned memory locations, use the VMOVUPS instruction."},{"name":"\u200b","value":"VEX.256 and EVEX.256 encoded version:"},{"name":"\u200b","value":"Moves 256 bits of packed single-precision floating-point values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load a YMM register from a 256-bit memory location, to store the contents of a YMM register into a 256-bit memory location, or to move data between two YMM registers. When the source or destination operand is a memory operand, the operand must be aligned on a 32-byte boundary or a general-protection exception (#GP) will be generated."},{"name":"\u200b","value":"128-bit versions:"},{"name":"\u200b","value":"Moves 128 bits of packed single-precision floating-point values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load an XMM register from a 128-bit memory location, to store the contents of an XMM register into a 128-bit memory location, or to move data between two XMM registers. When the source or destination operand is a memory operand, the operand must be aligned on a 16-byte boundary or a general-protection exception (#GP) will be generated. To move single-precision floating-point values to and from unaligned memory locations, use the VMOVUPS instruction."},{"name":"\u200b","value":"128-bit Legacy SSE version: Bits (MAXVL-1:128) of the corresponding ZMM destination register remain unchanged."},{"name":"\u200b","value":"(E)VEX.128 encoded version: Bits (MAXVL-1:128) of the destination ZMM register are zeroed."},{"name":"C/C++ Intrinsics","value":"`VMOVAPS __m512 _mm512_load_ps( void * m);\n`"},{"name":"\u200b","value":"`VMOVAPS __m512 _mm512_mask_load_ps(__m512 s, __mmask16 k, void * m);\n`"},{"name":"\u200b","value":"`VMOVAPS __m512 _mm512_maskz_load_ps( __mmask16 k, void * m);\n`"},{"name":"\u200b","value":"`VMOVAPS void _mm512_store_ps( void * d, __m512 a);\n`"},{"name":"\u200b","value":"`VMOVAPS void _mm512_mask_store_ps( void * d, __mmask16 k, __m512 a);\n`"},{"name":"\u200b","value":"`VMOVAPS __m256 _mm256_mask_load_ps(__m256 a, __mmask8 k, void * s);\n`"},{"name":"\u200b","value":"`VMOVAPS __m256 _mm256_maskz_load_ps( __mmask8 k, void * s);\n`"},{"name":"\u200b","value":"`VMOVAPS void _mm256_mask_store_ps( void * d, __mmask8 k, __m256 a);\n`"},{"name":"\u200b","value":"`VMOVAPS __m128 _mm_mask_load_ps(__m128 a, __mmask8 k, void * s);\n`"},{"name":"\u200b","value":"`VMOVAPS __m128 _mm_maskz_load_ps( __mmask8 k, void * s);\n`"},{"name":"\u200b","value":"`VMOVAPS void _mm_mask_store_ps( void * d, __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"(4 more)"},{"name":"CPUID Flags","value":"SSE"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}