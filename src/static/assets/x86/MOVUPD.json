{"title":"MOVUPD â€” Move Unaligned Packed Double-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`MOVUPD xmm1, xmm2/m128`\n`MOVUPD xmm2/m128, xmm1`\n`VMOVUPD xmm1, xmm2/m128`\n`VMOVUPD xmm2/m128, xmm1`\n`VMOVUPD ymm1, ymm2/m256`\n`VMOVUPD ymm2/m256, ymm1`\n`VMOVUPD xmm1 {k1}{z}, xmm2/m128`\n`VMOVUPD xmm2/m128 {k1}{z}, xmm1`\n`VMOVUPD ymm1 {k1}{z}, ymm2/m256`\n`VMOVUPD ymm2/m256 {k1}{z}, ymm1`\n`VMOVUPD zmm1 {k1}{z}, zmm2/m512`\n`VMOVUPD zmm2/m512 {k1}{z}, zmm1`"},{"name":"Description","value":"Note: VEX.vvvv and EVEX.vvvv is reserved and must be 1111b otherwise instructions will #UD."},{"name":"\u200b","value":"EVEX.512 encoded version:"},{"name":"\u200b","value":"Moves 512 bits of packed double-precision floating-point values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load a ZMM register from a float64 memory location, to store the contents of a ZMM register into a memory. The destination operand is updated according to the writemask."},{"name":"\u200b","value":"VEX.256 encoded version:"},{"name":"\u200b","value":"Moves 256 bits of packed double-precision floating-point values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load a YMM register from a 256-bit memory location, to store the contents of a YMM register into a 256-bit memory location, or to move data between two YMM registers. Bits (MAXVL-1:256) of the destination register are zeroed."},{"name":"C/C++ Intrinsics","value":"`VMOVUPD __m512d _mm512_loadu_pd( void * s);\n`"},{"name":"\u200b","value":"`VMOVUPD __m512d _mm512_mask_loadu_pd(__m512d a, __mmask8 k, void * s);\n`"},{"name":"\u200b","value":"`VMOVUPD __m512d _mm512_maskz_loadu_pd( __mmask8 k, void * s);\n`"},{"name":"\u200b","value":"`VMOVUPD void _mm512_storeu_pd( void * d, __m512d a);\n`"},{"name":"\u200b","value":"`VMOVUPD void _mm512_mask_storeu_pd( void * d, __mmask8 k, __m512d a);\n`"},{"name":"\u200b","value":"`VMOVUPD __m256d _mm256_mask_loadu_pd(__m256d s, __mmask8 k, void * m);\n`"},{"name":"\u200b","value":"`VMOVUPD __m256d _mm256_maskz_loadu_pd( __mmask8 k, void * m);\n`"},{"name":"\u200b","value":"`VMOVUPD void _mm256_mask_storeu_pd( void * d, __mmask8 k, __m256d a);\n`"},{"name":"\u200b","value":"`VMOVUPD __m128d _mm_mask_loadu_pd(__m128d s, __mmask8 k, void * m);\n`"},{"name":"\u200b","value":"`VMOVUPD __m128d _mm_maskz_loadu_pd( __mmask8 k, void * m);\n`"},{"name":"\u200b","value":"`VMOVUPD void _mm_mask_storeu_pd( void * d, __mmask8 k, __m128d a);\n`"},{"name":"\u200b","value":"`MOVUPD __m256d _mm256_loadu_pd (double * p);\n`"},{"name":"\u200b","value":"`MOVUPD void _mm256_storeu_pd( double *p, __m256d a);\n`"},{"name":"\u200b","value":"`MOVUPD __m128d _mm_loadu_pd (double * p);\n`"},{"name":"\u200b","value":"`MOVUPD void _mm_storeu_pd( double *p, __m128d a);\n`"},{"name":"CPUID Flags","value":"SSE2"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}