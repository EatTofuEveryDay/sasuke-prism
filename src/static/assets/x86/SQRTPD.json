{"title":"SQRTPD â€” Square Root of Double-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`SQRTPD xmm1, xmm2/m128`\n`VSQRTPD xmm1, xmm2/m128`\n`VSQRTPD ymm1, ymm2/m256`\n`VSQRTPD xmm1 {k1}{z}, xmm2/m128/m64bcst`\n`VSQRTPD ymm1 {k1}{z}, ymm2/m256/m64bcst`\n`VSQRTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}`"},{"name":"Description","value":"Performs a SIMD computation of the square roots of the two, four or eight packed double-precision floating-point values in the source operand (the second operand) stores the packed double-precision floating-point results in the destination operand (the first operand)."},{"name":"\u200b","value":"EVEX encoded versions: The source operand is a ZMM/YMM/XMM register, a 512/256/128-bit memory location, or a 512/256/128-bit vector broadcasted from a 64-bit memory location. The destination operand is a ZMM/YMM/XMM register updated according to the writemask."},{"name":"\u200b","value":"VEX.256 encoded version: The source operand is a YMM register or a 256-bit memory location. The destination operand is a YMM register. The upper bits (MAXVL-1:256) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"VEX.128 encoded version: the source operand second source operand or a 128-bit memory location. The destination operand is an XMM register. The upper bits (MAXVL-1:128) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"128-bit Legacy SSE version: The second source can be an XMM register or 128-bit memory location. The destination is not distinct from the first source XMM register and the upper bits (MAXVL-1:128) of the corresponding ZMM register destination are unmodified."},{"name":"\u200b","value":"Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instructions will #UD."},{"name":"C/C++ Intriniscs","value":"`VSQRTPD __m512d _mm512_sqrt_round_pd(__m512d a, int r);\n`"},{"name":"\u200b","value":"`VSQRTPD __m512d _mm512_mask_sqrt_round_pd(__m512d s, __mmask8 k, __m512d a, int r);\n`"},{"name":"\u200b","value":"`VSQRTPD __m512d _mm512_maskz_sqrt_round_pd( __mmask8 k, __m512d a, int r);\n`"},{"name":"\u200b","value":"`VSQRTPD __m256d _mm256_sqrt_pd (__m256d a);\n`"},{"name":"\u200b","value":"`VSQRTPD __m256d _mm256_mask_sqrt_pd(__m256d s, __mmask8 k, __m256d a, int r);\n`"},{"name":"\u200b","value":"`VSQRTPD __m256d _mm256_maskz_sqrt_pd( __mmask8 k, __m256d a, int r);\n`"},{"name":"\u200b","value":"`SQRTPD __m128d _mm_sqrt_pd (__m128d a);\n`"},{"name":"\u200b","value":"`VSQRTPD __m128d _mm_mask_sqrt_pd(__m128d s, __mmask8 k, __m128d a, int r);\n`"},{"name":"\u200b","value":"`VSQRTPD __m128d _mm_maskz_sqrt_pd( __mmask8 k, __m128d a, int r);\n`"},{"name":"CPUID Flags","value":"SSE2"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}