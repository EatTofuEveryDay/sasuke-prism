{"title":"PMADDWD â€” Multiply and Add Packed Integers","fields":[{"name":"Instruction Modes","value":"`PMADDWD mm, mm/m64`\n`PMADDWD xmm1, xmm2/m128`\n`VPMADDWD xmm1, xmm2, xmm3/m128`\n`VPMADDWD ymm1, ymm2, ymm3/m256`\n`VPMADDWD xmm1 {k1}{z}, xmm2, xmm3/m128`\n`VPMADDWD ymm1 {k1}{z}, ymm2, ymm3/m256`\n`VPMADDWD zmm1 {k1}{z}, zmm2, zmm3/m512`"},{"name":"Description","value":"Multiplies the individual signed words of the destination operand (first operand) by the corresponding signed words of the source operand (second operand), producing temporary signed, doubleword results. The adjacent double-word results are then summed and stored in the destination operand. For example, the corresponding low-order words (15-0) and (31-16) in the source and destination operands are multiplied by one another and the double-word results are added together and stored in the low doubleword of the destination register (31-0). The same operation is performed on the other pairs of adjacent words. (Figure 4-11 shows this operation when using 64-bit operands)."},{"name":"\u200b","value":"The (V)PMADDWD instruction wraps around only in one situation: when the 2 pairs of words being operated on in a group are all 8000H. In this case, the result wraps around to 80000000H."},{"name":"\u200b","value":"In 64-bit mode and not encoded with VEX/EVEX, using a REX prefix in the form of REX.R permits this instruction to access additional registers (XMM8-XMM15)."},{"name":"\u200b","value":"Legacy SSE version: The first source and destination operands are MMX registers. The second source operand is an MMX register or a 64-bit memory location."},{"name":"\u200b","value":"128-bit Legacy SSE version: The first source and destination operands are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the corresponding YMM destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 encoded version: The first source and destination operands are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the destination YMM register are zeroed."},{"name":"\u200b","value":"VEX.256 encoded version: The second source operand can be an YMM register or a 256-bit memory location. The first source and destination operands are YMM registers."},{"name":"\u200b","value":"EVEX.512 encoded version: The second source operand can be an ZMM register or a 512-bit memory location. The first source and destination operands are ZMM registers."},{"name":"C/C++ Intriniscs","value":"`VPMADDWD __m512i _mm512_madd_epi16( __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMADDWD __m512i _mm512_mask_madd_epi16(__m512i s, __mmask32 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMADDWD __m512i _mm512_maskz_madd_epi16( __mmask32 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMADDWD __m256i _mm256_mask_madd_epi16(__m256i s, __mmask16 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMADDWD __m256i _mm256_maskz_madd_epi16( __mmask16 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMADDWD __m128i _mm_mask_madd_epi16(__m128i s, __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPMADDWD __m128i _mm_maskz_madd_epi16( __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`PMADDWD:__m64 _mm_madd_pi16(__m64 m1, __m64 m2)\n`"},{"name":"\u200b","value":"`(V)PMADDWD:__m128i _mm_madd_epi16 ( __m128i a, __m128i b)\n`"},{"name":"\u200b","value":"`VPMADDWD:__m256i _mm256_madd_epi16 ( __m256i a, __m256i b)\n`"},{"name":"CPUID Flags","value":"MMX"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}