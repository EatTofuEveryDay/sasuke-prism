{"title":"PEXTRW â€” Extract Word","fields":[{"name":"Instruction Modes","value":"`ib1 PEXTRW reg, mm, imm8`\n`ib PEXTRW reg, xmm, imm8`\n`ib PEXTRW reg/m16, xmm, imm8`\n`ib VPEXTRW reg, xmm1, imm8`\n`ib VPEXTRW reg/m16, xmm2, imm8`\n`ib VPEXTRW reg, xmm1, imm8`\n`ib VPEXTRW reg/m16, xmm2, imm8`"},{"name":"Description","value":"Copies the word in the source operand (second operand) specified by the count operand (third operand) to the destination operand (first operand). The source operand can be an MMX technology register or an XMM register. The destination operand can be the low word of a general-purpose register or a 16-bit memory address. The count operand is an 8-bit immediate. When specifying a word location in an MMX technology register, the 2 least-significant bits of the count operand specify the location; for an XMM register, the 3 least-significant bits specify the location. The content of the destination register above bit 16 is cleared (set to all 0s)."},{"name":"\u200b","value":"In 64-bit mode, using a REX prefix in the form of REX.R permits this instruction to access additional registers (XMM8-XMM15, R8-15). If the destination operand is a general-purpose register, the default operand size is 64-bits in 64-bit mode."},{"name":"\u200b","value":"Note: In VEX.128 encoded versions, VEX.vvvv is reserved and must be 1111b, VEX.L must be 0, otherwise the instruction will #UD. In EVEX.128 encoded versions, EVEX.vvvv is reserved and must be 1111b, EVEX.L must be 0, otherwise the instruction will #UD. If the destination operand is a register, the default operand size in 64-bit mode for VPEXTRW is 64 bits, the bits above the least significant byte/word/dword data are filled with zeros."},{"name":"C/C++ Intrinsics","value":"`PEXTRW: int _mm_extract_pi16 (__m64 a, int n)\n`"},{"name":"\u200b","value":"`PEXTRW: int _mm_extract_epi16 ( __m128i a, int imm)\n`"},{"name":"CPUID Flags","value":"SSE"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}