{"title":"VCVTTSD2USI — Convert with Truncation Scalar Double-Precision Floating-Point Value to Unsigned Integer","fields":[{"name":"Instruction Modes","value":"`VCVTTSD2USI r32, xmm1/m64{sae}`\n`VCVTTSD2USI r64, xmm1/m64{sae}`"},{"name":"Description","value":"Converts with truncation a double-precision floating-point value in the source operand (the second operand) to an unsigned doubleword integer (or unsigned quadword integer if operand size is 64 bits) in the destination operand (the first operand). The source operand can be an XMM register or a 64-bit memory location. The destination operand is a general-purpose register. When the source operand is an XMM register, the double-precision floating-point value is contained in the low quadword of the register."},{"name":"\u200b","value":"When a conversion is inexact, the value returned is rounded according to the rounding control bits in the MXCSR register. If a converted result cannot be represented in the destination format, the floating-point invalid exception is raised, and if this exception is masked, the integer value 2w – 1 is returned, where w represents the number of bits in the destination format."},{"name":"\u200b","value":"EVEX.W1 version: promotes the instruction to produce 64-bit data in 64-bit mode."},{"name":"C/C++ Intriniscs","value":"`VCVTTSD2USI unsigned int _mm_cvttsd_u32(__m128d);\n`"},{"name":"\u200b","value":"`VCVTTSD2USI unsigned int _mm_cvtt_roundsd_u32(__m128d, int sae);\n`"},{"name":"\u200b","value":"`VCVTTSD2USI unsigned __int64 _mm_cvttsd_u64(__m128d);\n`"},{"name":"\u200b","value":"`VCVTTSD2USI unsigned __int64 _mm_cvtt_roundsd_u64(__m128d, int sae);\n`"},{"name":"CPUID Flags","value":"AVX512F"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}