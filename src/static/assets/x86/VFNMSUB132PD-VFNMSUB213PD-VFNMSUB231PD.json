{"title":"VFNMSUB132PD/VFNMSUB213PD/VFNMSUB231PD â€” Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`VFNMSUB132PD xmm1, xmm2, xmm3/m128`\n`VFNMSUB213PD xmm1, xmm2, xmm3/m128`\n`VFNMSUB231PD xmm1, xmm2, xmm3/m128`\n`VFNMSUB132PD ymm1, ymm2, ymm3/m256`\n`VFNMSUB213PD ymm1, ymm2, ymm3/m256`\n`VFNMSUB231PD ymm1, ymm2, ymm3/m256`\n`VFNMSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VFNMSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VFNMSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VFNMSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VFNMSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VFNMSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VFNMSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}`\n`VFNMSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}`\n`VFNMSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}`"},{"name":"Description","value":"VFNMSUB132PD: Multiplies the two, four or eight packed double-precision floating-point values from the first source operand to the two, four or eight packed double-precision floating-point values in the third source operand. From negated infinite precision intermediate results, subtracts the two, four or eight packed double-precision floating-point values in the second source operand, performs rounding and stores the resulting two, four or eight packed double-precision floating-point values to the destination operand (first source operand)."},{"name":"\u200b","value":"VFNMSUB213PD: Multiplies the two, four or eight packed double-precision floating-point values from the second source operand to the two, four or eight packed double-precision floating-point values in the first source operand. From negated infinite precision intermediate results, subtracts the two, four or eight packed double-precision floating-point values in the third source operand, performs rounding and stores the resulting two, four or eight packed double-precision floating-point values to the destination operand (first source operand)."},{"name":"\u200b","value":"VFNMSUB231PD: Multiplies the two, four or eight packed double-precision floating-point values from the second source to the two, four or eight packed double-precision floating-point values in the third source operand. From negated infinite precision intermediate results, subtracts the two, four or eight packed double-precision floating-point values in the first source operand, performs rounding and stores the resulting two, four or eight packed double-precision floating-point values to the destination operand (first source operand)."},{"name":"\u200b","value":"EVEX encoded versions: The destination operand (also first source operand) and the second source operand are ZMM/YMM/XMM register. The third source operand is a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 64-bit memory location. The destination operand is conditionally updated with write mask k1."},{"name":"\u200b","value":"VEX.256 encoded version: The destination operand (also first source operand) is a YMM register and encoded in reg_field. The second source operand is a YMM register and encoded in VEX.vvvv. The third source operand is a YMM register or a 256-bit memory location and encoded in rm_field."},{"name":"\u200b","value":"VEX.128 encoded version: The destination operand (also first source operand) is a XMM register and encoded in reg_field. The second source operand is a XMM register and encoded in VEX.vvvv. The third source operand is a XMM register or a 128-bit memory location and encoded in rm_field. The upper 128 bits of the YMM destination register are zeroed."},{"name":"C/C++ Intriniscs","value":"`VFNMSUBxxxPD __m512d _mm512_fnmsub_pd(__m512d a, __m512d b, __m512d c);\n`"},{"name":"\u200b","value":"`VFNMSUBxxxPD __m512d _mm512_fnmsub_round_pd(__m512d a, __m512d b, __m512d c, int r);\n`"},{"name":"\u200b","value":"`VFNMSUBxxxPD __m512d _mm512_mask_fnmsub_pd(__m512d a, __mmask8 k, __m512d b, __m512d c);\n`"},{"name":"\u200b","value":"`VFNMSUBxxxPD __m512d _mm512_maskz_fnmsub_pd(__mmask8 k, __m512d a, __m512d b, __m512d c);\n`"},{"name":"\u200b","value":"`VFNMSUBxxxPD __m512d _mm512_mask3_fnmsub_pd(__m512d a, __m512d b, __m512d c, __mmask8 k);\n`"},{"name":"\u200b","value":"`VFNMSUBxxxPD __m512d _mm512_mask_fnmsub_round_pd(__m512d a, __mmask8 k, __m512d b, __m512d c, int r);\n`"},{"name":"\u200b","value":"`VFNMSUBxxxPD __m512d _mm512_maskz_fnmsub_round_pd(__mmask8 k, __m512d a, __m512d b, __m512d c, int r);\n`"},{"name":"\u200b","value":"`VFNMSUBxxxPD __m512d _mm512_mask3_fnmsub_round_pd(__m512d a, __m512d b, __m512d c, __mmask8 k, int r);\n`"},{"name":"\u200b","value":"`VFNMSUBxxxPD __m256d _mm256_mask_fnmsub_pd(__m256d a, __mmask8 k, __m256d b, __m256d c);\n`"},{"name":"\u200b","value":"`VFNMSUBxxxPD __m256d _mm256_maskz_fnmsub_pd(__mmask8 k, __m256d a, __m256d b, __m256d c);\n`"},{"name":"\u200b","value":"`VFNMSUBxxxPD __m256d _mm256_mask3_fnmsub_pd(__m256d a, __m256d b, __m256d c, __mmask8 k);\n`"},{"name":"\u200b","value":"`VFNMSUBxxxPD __m128d _mm_mask_fnmsub_pd(__m128d a, __mmask8 k, __m128d b, __m128d c);\n`"},{"name":"\u200b","value":"`VFNMSUBxxxPD __m128d _mm_maskz_fnmsub_pd(__mmask8 k, __m128d a, __m128d b, __m128d c);\n`"},{"name":"\u200b","value":"`VFNMSUBxxxPD __m128d _mm_mask3_fnmsub_pd(__m128d a, __m128d b, __m128d c, __mmask8 k);\n`"},{"name":"\u200b","value":"`VFNMSUBxxxPD __m128d _mm_fnmsub_pd (__m128d a, __m128d b, __m128d c);\n`"},{"name":"\u200b","value":"`VFNMSUBxxxPD __m256d _mm256_fnmsub_pd (__m256d a, __m256d b, __m256d c);\n`"},{"name":"CPUID Flags","value":"FMA"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}