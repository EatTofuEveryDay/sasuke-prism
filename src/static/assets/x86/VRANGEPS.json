{"title":"VRANGEPS â€” Range Restriction Calculation For Packed Pairs of Float32 Values","fields":[{"name":"Instruction Modes","value":"`ib VRANGEPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8`\n`ib VRANGEPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8`\n`ib VRANGEPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8`"},{"name":"Description","value":"This instruction calculates 4/8/16 range operation outputs from two sets of packed input single-precision FP values in the first source operand (the second operand) and the second source operand (the third operand). The range outputs are written to the destination operand (the first operand) under the writemask k1."},{"name":"\u200b","value":"Bits7:4 of imm8 byte must be zero. The range operation output is performed in two parts, each configured by a two-bit control field within imm8[3:0]:"},{"name":"C/C++ Intriniscs","value":"`VRANGEPS __m512 _mm512_range_ps ( __m512 a, __m512 b, int imm);\n`"},{"name":"\u200b","value":"`VRANGEPS __m512 _mm512_range_round_ps ( __m512 a, __m512 b, int imm, int sae);\n`"},{"name":"\u200b","value":"`VRANGEPS __m512 _mm512_mask_range_ps (__m512 s, __mmask16 k, __m512 a, __m512 b, int imm);\n`"},{"name":"\u200b","value":"`VRANGEPS __m512 _mm512_mask_range_round_ps (__m512 s, __mmask16 k, __m512 a, __m512 b, int imm, int sae);\n`"},{"name":"\u200b","value":"`VRANGEPS __m512 _mm512_maskz_range_ps ( __mmask16 k, __m512 a, __m512 b, int imm);\n`"},{"name":"\u200b","value":"`VRANGEPS __m512 _mm512_maskz_range_round_ps ( __mmask16 k, __m512 a, __m512 b, int imm, int sae);\n`"},{"name":"\u200b","value":"`VRANGEPS __m256 _mm256_range_ps ( __m256 a, __m256 b, int imm);\n`"},{"name":"\u200b","value":"`VRANGEPS __m256 _mm256_mask_range_ps (__m256 s, __mmask8 k, __m256 a, __m256 b, int imm);\n`"},{"name":"\u200b","value":"`VRANGEPS __m256 _mm256_maskz_range_ps ( __mmask8 k, __m256 a, __m256 b, int imm);\n`"},{"name":"\u200b","value":"`VRANGEPS __m128 _mm_range_ps ( __m128 a, __m128 b, int imm);\n`"},{"name":"\u200b","value":"`VRANGEPS __m128 _mm_mask_range_ps (__m128 s, __mmask8 k, __m128 a, __m128 b, int imm);\n`"},{"name":"\u200b","value":"`VRANGEPS __m128 _mm_maskz_range_ps ( __mmask8 k, __m128 a, __m128 b, int imm);\n`"},{"name":"CPUID Flags","value":"AVX512VL AVX512DQ"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}