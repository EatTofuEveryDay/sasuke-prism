{"title":"MOVD/MOVQ — Move Doubleword/Move Quadword","fields":[{"name":"Instruction Modes","value":"`MOVD mm, r/m32`\n`MOVQ mm, r/m64`\n`MOVD r/m32, mm`\n`MOVQ r/m64, mm`\n`MOVD xmm, r/m32`\n`MOVQ xmm, r/m64`\n`MOVD r/m32, xmm`\n`MOVQ r/m64, xmm`\n`VMOVD xmm1, r32/m32`\n`VMOVQ xmm1, r64/m64`\n`VMOVD r32/m32, xmm1`\n`VMOVQ r64/m64, xmm1`\n`VMOVD xmm1, r32/m32`\n`VMOVQ xmm1, r64/m64`\n`VMOVD r32/m32, xmm1`\n`VMOVQ r64/m64, xmm1`"},{"name":"Description","value":"Copies a doubleword from the source operand (second operand) to the destination operand (first operand). The source and destination operands can be general-purpose registers, MMX technology registers, XMM registers, or 32-bit memory locations. This instruction can be used to move a doubleword to and from the low doubleword of an MMX technology register and a general-purpose register or a 32-bit memory location, or to and from the low doubleword of an XMM register and a general-purpose register or a 32-bit memory location. The instruction cannot be used to transfer data between MMX technology registers, between XMM registers, between general-purpose registers, or between memory locations."},{"name":"\u200b","value":"When the destination operand is an MMX technology register, the source operand is written to the low doubleword of the register, and the register is zero-extended to 64 bits. When the destination operand is an XMM register, the source operand is written to the low doubleword of the register, and the register is zero-extended to 128 bits."},{"name":"\u200b","value":"In 64-bit mode, the instruction’s default operation size is 32 bits. Use of the REX.R prefix permits access to additional registers (R8-R15). Use of the REX.W prefix promotes operation to 64 bits. See the summary chart at the beginning of this section for encoding data and limits."},{"name":"C/C++ Intriniscs","value":"`MOVD: __m64 _mm_cvtsi32_si64 (int i )\n`"},{"name":"\u200b","value":"`MOVD: int _mm_cvtsi64_si32 ( __m64m )\n`"},{"name":"\u200b","value":"`MOVD: __m128i _mm_cvtsi32_si128 (int a)\n`"},{"name":"\u200b","value":"`MOVD: int _mm_cvtsi128_si32 ( __m128i a)\n`"},{"name":"\u200b","value":"`MOVQ: __int64 _mm_cvtsi128_si64(__m128i);\n`"},{"name":"\u200b","value":"`MOVQ: __m128i _mm_cvtsi64_si128(__int64);\n`"},{"name":"\u200b","value":"`VMOVD __m128i _mm_cvtsi32_si128( int);\n`"},{"name":"\u200b","value":"`VMOVD int _mm_cvtsi128_si32( __m128i );\n`"},{"name":"\u200b","value":"`VMOVQ __m128i _mm_cvtsi64_si128 (__int64);\n`"},{"name":"\u200b","value":"`VMOVQ __int64 _mm_cvtsi128_si64(__m128i );\n`"},{"name":"\u200b","value":"`VMOVQ __m128i _mm_loadl_epi64( __m128i * s);\n`"},{"name":"\u200b","value":"`VMOVQ void _mm_storel_epi64( __m128i * d, __m128i s);\n`"},{"name":"CPUID Flags","value":"MMX"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}