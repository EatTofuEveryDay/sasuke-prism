{"title":"VCVTUDQ2PD â€” Convert Packed Unsigned Doubleword Integers to Packed Double-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`VCVTUDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst`\n`VCVTUDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst`\n`VCVTUDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst`"},{"name":"Description","value":"Converts packed unsigned doubleword integers in the source operand (second operand) to packed double-precision floating-point values in the destination operand (first operand)."},{"name":"\u200b","value":"The source operand is a YMM/XMM/XMM (low 64 bits) register, a 256/128/64-bit memory location or a 256/128/64-bit vector broadcasted from a 32-bit memory location. The destination operand is a ZMM/YMM/XMM register conditionally updated with writemask k1."},{"name":"\u200b","value":"Attempt to encode this instruction with EVEX embedded rounding is ignored."},{"name":"\u200b","value":"Note: EVEX.vvvv is reserved and must be 1111b, otherwise instructions will #UD."},{"name":"C/C++ Intriniscs","value":"`VCVTUDQ2PD __m512d _mm512_cvtepu32_pd( __m256i a);\n`"},{"name":"\u200b","value":"`VCVTUDQ2PD __m512d _mm512_mask_cvtepu32_pd( __m512d s, __mmask8 k, __m256i a);\n`"},{"name":"\u200b","value":"`VCVTUDQ2PD __m512d _mm512_maskz_cvtepu32_pd( __mmask8 k, __m256i a);\n`"},{"name":"\u200b","value":"`VCVTUDQ2PD __m256d _mm256_cvtepu32_pd( __m128i a);\n`"},{"name":"\u200b","value":"`VCVTUDQ2PD __m256d _mm256_mask_cvtepu32_pd( __m256d s, __mmask8 k, __m128i a);\n`"},{"name":"\u200b","value":"`VCVTUDQ2PD __m256d _mm256_maskz_cvtepu32_pd( __mmask8 k, __m128i a);\n`"},{"name":"\u200b","value":"`VCVTUDQ2PD __m128d _mm_cvtepu32_pd( __m128i a);\n`"},{"name":"\u200b","value":"`VCVTUDQ2PD __m128d _mm_mask_cvtepu32_pd( __m128d s, __mmask8 k, __m128i a);\n`"},{"name":"\u200b","value":"`VCVTUDQ2PD __m128d _mm_maskz_cvtepu32_pd( __mmask8 k, __m128i a);\n`"},{"name":"CPUID Flags","value":"AVX512VL AVX512F"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}