{"title":"UNPCKLPS â€” Unpack and Interleave Low Packed Single-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`UNPCKLPS xmm1, xmm2/m128`\n`VUNPCKLPS xmm1,xmm2, xmm3/m128`\n`VUNPCKLPS ymm1,ymm2,ymm3/m256`\n`VUNPCKLPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`VUNPCKLPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VUNPCKLPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst`"},{"name":"Description","value":"Performs an interleaved unpack of the low single-precision floating-point values from the first source operand and the second source operand."},{"name":"\u200b","value":"128-bit Legacy SSE version: The second source can be an XMM register or an 128-bit memory location. The destination is not distinct from the first source XMM register and the upper bits (MAXVL-1:128) of the corresponding ZMM register destination are unmodified. When unpacking from a memory operand, an implementation may fetch only the appropriate 64 bits; however, alignment to 16-byte boundary and normal segment checking will still be enforced."},{"name":"\u200b","value":"VEX.128 encoded version: The first source operand is a XMM register. The second source operand can be a XMM register or a 128-bit memory location. The destination operand is a XMM register. The upper bits (MAXVL-1:128) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"VEX.256 encoded version: The first source operand is a YMM register. The second source operand can be a YMM register or a 256-bit memory location. The destination operand is a YMM register."},{"name":"C/C++ Intriniscs","value":"`VUNPCKLPS __m512 _mm512_unpacklo_ps(__m512 a, __m512 b);\n`"},{"name":"\u200b","value":"`VUNPCKLPS __m512 _mm512_mask_unpacklo_ps(__m512 s, __mmask16 k, __m512 a, __m512 b);\n`"},{"name":"\u200b","value":"`VUNPCKLPS __m512 _mm512_maskz_unpacklo_ps(__mmask16 k, __m512 a, __m512 b);\n`"},{"name":"\u200b","value":"`VUNPCKLPS __m256 _mm256_unpacklo_ps (__m256 a, __m256 b);\n`"},{"name":"\u200b","value":"`VUNPCKLPS __m256 _mm256_mask_unpacklo_ps(__m256 s, __mmask8 k, __m256 a, __m256 b);\n`"},{"name":"\u200b","value":"`VUNPCKLPS __m256 _mm256_maskz_unpacklo_ps(__mmask8 k, __m256 a, __m256 b);\n`"},{"name":"\u200b","value":"`UNPCKLPS __m128 _mm_unpacklo_ps (__m128 a, __m128 b);\n`"},{"name":"\u200b","value":"`VUNPCKLPS __m128 _mm_mask_unpacklo_ps(__m128 s, __mmask8 k, __m128 a, __m128 b);\n`"},{"name":"\u200b","value":"`VUNPCKLPS __m128 _mm_maskz_unpacklo_ps(__mmask8 k, __m128 a, __m128 b);\n`"},{"name":"CPUID Flags","value":"SSE"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}