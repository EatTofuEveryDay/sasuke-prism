{"title":"MOVUPS â€” Move Unaligned Packed Single-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`MOVUPS xmm1, xmm2/m128`\n`MOVUPS xmm2/m128, xmm1`\n`VMOVUPS xmm1, xmm2/m128`\n`VMOVUPS xmm2/m128, xmm1`\n`VMOVUPS ymm1, ymm2/m256`\n`VMOVUPS ymm2/m256, ymm1`\n`VMOVUPS xmm1 {k1}{z}, xmm2/m128`\n`VMOVUPS ymm1 {k1}{z}, ymm2/m256`\n`VMOVUPS zmm1 {k1}{z}, zmm2/m512`\n`VMOVUPS xmm2/m128 {k1}{z}, xmm1`\n`VMOVUPS ymm2/m256 {k1}{z}, ymm1`\n`VMOVUPS zmm2/m512 {k1}{z}, zmm1`"},{"name":"Description","value":"Note: VEX.vvvv and EVEX.vvvv is reserved and must be 1111b otherwise instructions will #UD."},{"name":"\u200b","value":"EVEX.512 encoded version:"},{"name":"\u200b","value":"Moves 512 bits of packed single-precision floating-point values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load a ZMM register from a 512-bit float32 memory location, to store the contents of a ZMM register into memory. The destination operand is updated according to the writemask."},{"name":"\u200b","value":"VEX.256 and EVEX.256 encoded versions:"},{"name":"\u200b","value":"Moves 256 bits of packed single-precision floating-point values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load a YMM register from a 256-bit memory location, to store the contents of a YMM register into a 256-bit memory location, or to move data between two YMM registers. Bits (MAXVL-1:256) of the destination register are zeroed."},{"name":"C/C++ Intrinsics","value":"`VMOVUPS __m512 _mm512_loadu_ps( void * s);\n`"},{"name":"\u200b","value":"`VMOVUPS __m512 _mm512_mask_loadu_ps(__m512 a, __mmask16 k, void * s);\n`"},{"name":"\u200b","value":"`VMOVUPS __m512 _mm512_maskz_loadu_ps( __mmask16 k, void * s);\n`"},{"name":"\u200b","value":"`VMOVUPS void _mm512_storeu_ps( void * d, __m512 a);\n`"},{"name":"\u200b","value":"`VMOVUPS void _mm512_mask_storeu_ps( void * d, __mmask8 k, __m512 a);\n`"},{"name":"\u200b","value":"`VMOVUPS __m256 _mm256_mask_loadu_ps(__m256 a, __mmask8 k, void * s);\n`"},{"name":"\u200b","value":"`VMOVUPS __m256 _mm256_maskz_loadu_ps( __mmask8 k, void * s);\n`"},{"name":"\u200b","value":"`VMOVUPS void _mm256_mask_storeu_ps( void * d, __mmask8 k, __m256 a);\n`"},{"name":"\u200b","value":"`VMOVUPS __m128 _mm_mask_loadu_ps(__m128 a, __mmask8 k, void * s);\n`"},{"name":"\u200b","value":"`VMOVUPS __m128 _mm_maskz_loadu_ps( __mmask8 k, void * s);\n`"},{"name":"\u200b","value":"`VMOVUPS void _mm_mask_storeu_ps( void * d, __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`MOVUPS __m256 _mm256_loadu_ps ( float * p);\n`"},{"name":"\u200b","value":"`MOVUPS void _mm256 _storeu_ps( float *p, __m256 a);\n`"},{"name":"\u200b","value":"`MOVUPS __m128 _mm_loadu_ps ( float * p);\n`"},{"name":"\u200b","value":"`MOVUPS void _mm_storeu_ps( float *p, __m128 a);\n`"},{"name":"CPUID Flags","value":"SSE"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}