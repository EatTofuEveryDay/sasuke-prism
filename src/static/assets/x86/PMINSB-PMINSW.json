{"title":"PMINSB/PMINSW — Minimum of Packed Signed Integers","fields":[{"name":"Instruction Modes","value":"`PMINSW mm1, mm2/m64`\n`PMINSB xmm1, xmm2/m128`\n`PMINSW xmm1, xmm2/m128`\n`VPMINSB xmm1, xmm2, xmm3/m128`\n`VPMINSW xmm1, xmm2, xmm3/m128`\n`VPMINSB ymm1, ymm2, ymm3/m256`\n`VPMINSW ymm1, ymm2, ymm3/m256`\n`VPMINSB xmm1{k1}{z}, xmm2, xmm3/m128`\n`VPMINSB ymm1{k1}{z}, ymm2, ymm3/m256`\n`VPMINSB zmm1{k1}{z}, zmm2, zmm3/m512`\n`VPMINSW xmm1{k1}{z}, xmm2, xmm3/m128`\n`VPMINSW ymm1{k1}{z}, ymm2, ymm3/m256`\n`VPMINSW zmm1{k1}{z}, zmm2, zmm3/m512`\n`NOTES: 1. See note in Section 2.4, “AVX and SSE Instruction Exception Specification” in the Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 2A and Section 22.25.3, “Exception Conditions of Legacy SIMD Instructions Operating on MMX Registers” in the Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 3A.`"},{"name":"Description","value":"Performs a SIMD compare of the packed signed byte, word, or dword integers in the second source operand and the first source operand and returns the minimum value for each pair of integers to the destination operand."},{"name":"\u200b","value":"Legacy SSE version PMINSW: The source operand can be an MMX technology register or a 64-bit memory location. The destination operand can be an MMX technology register."},{"name":"\u200b","value":"128-bit Legacy SSE version: The first source and destination operands are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the corresponding destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 encoded version: The first source and destination operands are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the corresponding destination register are zeroed."},{"name":"\u200b","value":"VEX.256 encoded version: The second source operand can be an YMM register or a 256-bit memory location. The first source and destination operands are YMM registers."},{"name":"\u200b","value":"EVEX encoded versions: The first source operand is a ZMM/YMM/XMM register; The second source operand is a ZMM/YMM/XMM register or a 512/256/128-bit memory location. The destination operand is conditionally updated based on writemask k1."},{"name":"C/C++ Intriniscs","value":"`VPMINSB __m512i _mm512_min_epi8( __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMINSB __m512i _mm512_mask_min_epi8(__m512i s, __mmask64 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMINSB __m512i _mm512_maskz_min_epi8( __mmask64 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMINSW __m512i _mm512_min_epi16( __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMINSW __m512i _mm512_mask_min_epi16(__m512i s, __mmask32 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMINSW __m512i _mm512_maskz_min_epi16( __mmask32 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMINSB __m256i _mm256_mask_min_epi8(__m256i s, __mmask32 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMINSB __m256i _mm256_maskz_min_epi8( __mmask32 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMINSW __m256i _mm256_mask_min_epi16(__m256i s, __mmask16 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMINSW __m256i _mm256_maskz_min_epi16( __mmask16 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMINSB __m128i _mm_mask_min_epi8(__m128i s, __mmask16 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPMINSB __m128i _mm_maskz_min_epi8( __mmask16 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPMINSW __m128i _mm_mask_min_epi16(__m128i s, __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPMINSW __m128i _mm_maskz_min_epi16( __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`(V)PMINSB __m128i _mm_min_epi8 ( __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`(V)PMINSW __m128i _mm_min_epi16 ( __m128i a, __m128i b)\n`"},{"name":"\u200b","value":"`VPMINSB __m256i _mm256_min_epi8 ( __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMINSW __m256i _mm256_min_epi16 ( __m256i a, __m256i b)\n`"},{"name":"\u200b","value":"`PMINSW:__m64 _mm_min_pi16 (__m64 a, __m64 b)\n`"},{"name":"CPUID Flags","value":"SSE"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}