{"title":"MOVLPS — Move Low Packed Single-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`MOVLPS xmm1, m64`\n`VMOVLPS xmm2, xmm1, m64`\n`VMOVLPS xmm2, xmm1, m64`\n`MOVLPS m64, xmm1`\n`VMOVLPS m64, xmm1`\n`VMOVLPS m64, xmm1`"},{"name":"Description","value":"This instruction cannot be used for register to register or memory to memory moves."},{"name":"\u200b","value":"128-bit Legacy SSE load:"},{"name":"\u200b","value":"Moves two packed single-precision floating-point values from the source 64-bit memory operand and stores them in the low 64-bits of the destination XMM register. The upper 64bits of the XMM register are preserved. Bits (MAXVL-1:128) of the corresponding destination register are preserved."},{"name":"\u200b","value":"VEX.128 &amp; EVEX encoded load:"},{"name":"\u200b","value":"Loads two packed single-precision floating-point values from the source 64-bit memory operand (the third operand), merges them with the upper 64-bits of the first source operand (the second operand), and stores them in the low 128-bits of the destination register (the first operand). Bits (MAXVL-1:128) of the corresponding destination register are zeroed."},{"name":"\u200b","value":"128-bit store:"},{"name":"\u200b","value":"Loads two packed single-precision floating-point values from the low 64-bits of the XMM register source (second operand) to the 64-bit memory location (first operand)."},{"name":"\u200b","value":"Note: VMOVLPS (store) (VEX.128.0F 13 /r) is legal and has the same behavior as the existing 0F 13 store. For VMOVLPS (store) VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instruction will #UD."},{"name":"\u200b","value":"If VMOVLPS is encoded with VEX.L or EVEX.L’L= 1, an attempt to execute the instruction encoded with VEX.L or EVEX.L’L= 1 will cause an #UD exception."},{"name":"C/C++ Intriniscs","value":"`MOVLPS __m128 _mm_loadl_pi ( __m128 a, __m64 *p)\n`"},{"name":"\u200b","value":"`MOVLPS void _mm_storel_pi (__m64 *p, __m128 a)\n`"},{"name":"CPUID Flags","value":"SSE"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}