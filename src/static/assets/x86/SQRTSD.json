{"title":"SQRTSD â€” Compute Square Root of Scalar Double-Precision Floating-Point Value","fields":[{"name":"Instruction Modes","value":"`SQRTSD xmm1,xmm2/m64`\n`VSQRTSD xmm1,xmm2, xmm3/m64`\n`VSQRTSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}`"},{"name":"Description","value":"Computes the square root of the low double-precision floating-point value in the second source operand and stores the double-precision floating-point result in the destination operand. The second source operand can be an XMM register or a 64-bit memory location. The first source and destination operands are XMM registers."},{"name":"\u200b","value":"128-bit Legacy SSE version: The first source operand and the destination operand are the same. The quadword at bits 127:64 of the destination operand remains unchanged. Bits (MAXVL-1:64) of the corresponding destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 and EVEX encoded versions: Bits 127:64 of the destination operand are copied from the corresponding bits of the first source operand. Bits (MAXVL-1:128) of the destination register are zeroed."},{"name":"\u200b","value":"EVEX encoded version: The low quadword element of the destination operand is updated according to the writemask."},{"name":"\u200b","value":"Software should ensure VSQRTSD is encoded with VEX.L=0. Encoding VSQRTSD with VEX.L=1 may encounter unpredictable behavior across different processor generations."},{"name":"C/C++ Intrinsics","value":"`VSQRTSD __m128d _mm_sqrt_round_sd(__m128d a, __m128d b, int r);\n`"},{"name":"\u200b","value":"`VSQRTSD __m128d _mm_mask_sqrt_round_sd(__m128d s, __mmask8 k, __m128d a, __m128d b, int r);\n`"},{"name":"\u200b","value":"`VSQRTSD __m128d _mm_maskz_sqrt_round_sd(__mmask8 k, __m128d a, __m128d b, int r);\n`"},{"name":"\u200b","value":"`SQRTSD __m128d _mm_sqrt_sd (__m128d a, __m128d b)\n`"},{"name":"CPUID Flags","value":"SSE2"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}