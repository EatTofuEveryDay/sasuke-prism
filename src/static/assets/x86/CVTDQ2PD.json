{"title":"CVTDQ2PD â€” Convert Packed Doubleword Integers to Packed Double-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`CVTDQ2PD xmm1, xmm2/m64`\n`VCVTDQ2PD xmm1, xmm2/m64`\n`VCVTDQ2PD ymm1, xmm2/m128`\n`VCVTDQ2PD xmm1 {k1}{z}, xmm2/m128/m32bcst`\n`VCVTDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst`\n`VCVTDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst`"},{"name":"Description","value":"Converts two, four or eight packed signed doubleword integers in the source operand (the second operand) to two, four or eight packed double-precision floating-point values in the destination operand (the first operand)."},{"name":"\u200b","value":"EVEX encoded versions: The source operand can be a YMM/XMM/XMM (low 64 bits) register, a 256/128/64-bit memory location or a 256/128/64-bit vector broadcasted from a 32-bit memory location. The destination operand is a ZMM/YMM/XMM register conditionally updated with writemask k1. Attempt to encode this instruction with EVEX embedded rounding is ignored."},{"name":"\u200b","value":"VEX.256 encoded version: The source operand is an XMM register or 128- bit memory location. The destination operand is a YMM register."},{"name":"\u200b","value":"VEX.128 encoded version: The source operand is an XMM register or 64- bit memory location. The destination operand is a XMM register. The upper Bits (MAXVL-1:128) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"128-bit Legacy SSE version: The source operand is an XMM register or 64- bit memory location. The destination operand is an XMM register. The upper Bits (MAXVL-1:128) of the corresponding ZMM register destination are unmodified."},{"name":"\u200b","value":"VEX.vvvv and EVEX.vvvv are reserved and must be 1111b, otherwise instructions will #UD."},{"name":"C/C++ Intrinsics","value":"`VCVTDQ2PD __m512d _mm512_cvtepi32_pd( __m256i a);\n`"},{"name":"\u200b","value":"`VCVTDQ2PD __m512d _mm512_mask_cvtepi32_pd( __m512d s, __mmask8 k, __m256i a);\n`"},{"name":"\u200b","value":"`VCVTDQ2PD __m512d _mm512_maskz_cvtepi32_pd( __mmask8 k, __m256i a);\n`"},{"name":"\u200b","value":"`VCVTDQ2PD __m256d _mm256_cvtepi32_pd (__m128i src);\n`"},{"name":"\u200b","value":"`VCVTDQ2PD __m256d _mm256_mask_cvtepi32_pd( __m256d s, __mmask8 k, __m256i a);\n`"},{"name":"\u200b","value":"`VCVTDQ2PD __m256d _mm256_maskz_cvtepi32_pd( __mmask8 k, __m256i a);\n`"},{"name":"\u200b","value":"`VCVTDQ2PD __m128d _mm_mask_cvtepi32_pd( __m128d s, __mmask8 k, __m128i a);\n`"},{"name":"\u200b","value":"`VCVTDQ2PD __m128d _mm_maskz_cvtepi32_pd( __mmask8 k, __m128i a);\n`"},{"name":"\u200b","value":"`CVTDQ2PD __m128d _mm_cvtepi32_pd (__m128i src)\n`"},{"name":"CPUID Flags","value":"SSE2"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}