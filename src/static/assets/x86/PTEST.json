{"title":"PTEST â€” Logical Compare","fields":[{"name":"Instruction Modes","value":"`PTEST xmm1, xmm2/m128`\n`VPTEST xmm1, xmm2/m128`\n`VPTEST ymm1, ymm2/m256`"},{"name":"Description","value":"PTEST and VPTEST set the ZF flag if all bits in the result are 0 of the bitwise AND of the first source operand (first operand) and the second source operand (second operand). VPTEST sets the CF flag if all bits in the result are 0 of the bitwise AND of the second source operand (second operand) and the logical NOT of the destination operand."},{"name":"\u200b","value":"The first source register is specified by the ModR/M reg field."},{"name":"\u200b","value":"128-bit versions: The first source register is an XMM register. The second source register can be an XMM register or a 128-bit memory location. The destination register is not modified."},{"name":"\u200b","value":"VEX.256 encoded version: The first source register is a YMM register. The second source register can be a YMM register or a 256-bit memory location. The destination register is not modified."},{"name":"\u200b","value":"Note: In VEX-encoded versions, VEX.vvvv is reserved and must be 1111b, otherwise instructions will #UD."},{"name":"C/C++ Intrinsics","value":"`<strong>PTEST</strong> int _mm_testz_si128 (__m128i s1, __m128i s2);\n`"},{"name":"\u200b","value":"`int _mm_testc_si128 (__m128i s1, __m128i s2);\n`"},{"name":"\u200b","value":"`int _mm_testnzc_si128 (__m128i s1, __m128i s2);\n`"},{"name":"\u200b","value":"`<strong>VPTEST</strong> int _mm256_testz_si256 (__m256i s1, __m256i s2);\n`"},{"name":"\u200b","value":"`int _mm256_testc_si256 (__m256i s1, __m256i s2);\n`"},{"name":"\u200b","value":"`int _mm256_testnzc_si256 (__m256i s1, __m256i s2);\n`"},{"name":"\u200b","value":"`int _mm_testz_si128 (__m128i s1, __m128i s2);\n`"},{"name":"\u200b","value":"`int _mm_testc_si128 (__m128i s1, __m128i s2);\n`"},{"name":"\u200b","value":"`int _mm_testnzc_si128 (__m128i s1, __m128i s2);\n`"},{"name":"CPUID Flags","value":"SSE4_1"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}