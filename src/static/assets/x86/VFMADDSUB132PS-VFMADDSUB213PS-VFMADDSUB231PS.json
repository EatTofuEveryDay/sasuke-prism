{"title":"VFMADDSUB132PS/VFMADDSUB213PS/VFMADDSUB231PS â€” Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`VFMADDSUB132PS xmm1, xmm2, xmm3/m128`\n`VFMADDSUB213PS xmm1, xmm2, xmm3/m128`\n`VFMADDSUB231PS xmm1, xmm2, xmm3/m128`\n`VFMADDSUB132PS ymm1, ymm2, ymm3/m256`\n`VFMADDSUB213PS ymm1, ymm2, ymm3/m256`\n`VFMADDSUB231PS ymm1, ymm2, ymm3/m256`\n`VFMADDSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`VFMADDSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`VFMADDSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`VFMADDSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VFMADDSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VFMADDSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VFMADDSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}`\n`VFMADDSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}`\n`VFMADDSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}`"},{"name":"Description","value":"VFMADDSUB132PS: Multiplies the four, eight or sixteen packed single-precision floating-point values from the first source operand to the corresponding packed single-precision floating-point values in the third source operand. From the infinite precision intermediate result, adds the odd single-precision floating-point elements and subtracts the even single-precision floating-point values in the second source operand, performs rounding and stores the resulting packed single-precision floating-point values to the destination operand (first source operand)."},{"name":"\u200b","value":"VFMADDSUB213PS: Multiplies the four, eight or sixteen packed single-precision floating-point values from the second source operand to the corresponding packed single-precision floating-point values in the first source operand. From the infinite precision intermediate result, adds the odd single-precision floating-point elements and subtracts the even single-precision floating-point values in the third source operand, performs rounding and stores the resulting packed single-precision floating-point values to the destination operand (first source operand)."},{"name":"\u200b","value":"VFMADDSUB231PS: Multiplies the four, eight or sixteen packed single-precision floating-point values from the second source operand to the corresponding packed single-precision floating-point values in the third source operand. From the infinite precision intermediate result, adds the odd single-precision floating-point elements and subtracts the even single-precision floating-point values in the first source operand, performs rounding and stores the resulting packed single-precision floating-point values to the destination operand (first source operand)."},{"name":"\u200b","value":"EVEX encoded versions: The destination operand (also first source operand) and the second source operand are ZMM/YMM/XMM register. The third source operand is a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32-bit memory location. The destination operand is conditionally updated with write mask k1."},{"name":"\u200b","value":"VEX.256 encoded version: The destination operand (also first source operand) is a YMM register and encoded in reg_field. The second source operand is a YMM register and encoded in VEX.vvvv. The third source operand is a YMM register or a 256-bit memory location and encoded in rm_field."},{"name":"\u200b","value":"VEX.128 encoded version: The destination operand (also first source operand) is a XMM register and encoded in reg_field. The second source operand is a XMM register and encoded in VEX.vvvv. The third source operand is a XMM register or a 128-bit memory location and encoded in rm_field. The upper 128 bits of the YMM destination register are zeroed."},{"name":"\u200b","value":"Compiler tools may optionally support a complementary mnemonic for each instruction mnemonic listed in the opcode/instruction column of the summary table. The behavior of the complementary mnemonic in situations involving NANs are governed by the definition of the instruction mnemonic defined in the opcode/instruction column."},{"name":"C/C++ Intriniscs","value":"`VFMADDSUBxxxPS __m512 _mm512_fmaddsub_ps(__m512 a, __m512 b, __m512 c);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPS __m512 _mm512_fmaddsub_round_ps(__m512 a, __m512 b, __m512 c, int r);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPS __m512 _mm512_mask_fmaddsub_ps(__m512 a, __mmask16 k, __m512 b, __m512 c);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPS __m512 _mm512_maskz_fmaddsub_ps(__mmask16 k, __m512 a, __m512 b, __m512 c);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPS __m512 _mm512_mask3_fmaddsub_ps(__m512 a, __m512 b, __m512 c, __mmask16 k);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPS __m512 _mm512_mask_fmaddsub_round_ps(__m512 a, __mmask16 k, __m512 b, __m512 c, int r);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPS __m512 _mm512_maskz_fmaddsub_round_ps(__mmask16 k, __m512 a, __m512 b, __m512 c, int r);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPS __m512 _mm512_mask3_fmaddsub_round_ps(__m512 a, __m512 b, __m512 c, __mmask16 k, int r);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPS __m256 _mm256_mask_fmaddsub_ps(__m256 a, __mmask8 k, __m256 b, __m256 c);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPS __m256 _mm256_maskz_fmaddsub_ps(__mmask8 k, __m256 a, __m256 b, __m256 c);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPS __m256 _mm256_mask3_fmaddsub_ps(__m256 a, __m256 b, __m256 c, __mmask8 k);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPS __m128 _mm_mask_fmaddsub_ps(__m128 a, __mmask8 k, __m128 b, __m128 c);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPS __m128 _mm_maskz_fmaddsub_ps(__mmask8 k, __m128 a, __m128 b, __m128 c);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPS __m128 _mm_mask3_fmaddsub_ps(__m128 a, __m128 b, __m128 c, __mmask8 k);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPS __m128 _mm_fmaddsub_ps (__m128 a, __m128 b, __m128 c);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPS __m256 _mm256_fmaddsub_ps (__m256 a, __m256 b, __m256 c);\n`"},{"name":"CPUID Flags","value":"FMA"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}