{"title":"SUBSS â€” Subtract Scalar Single-Precision Floating-Point Value","fields":[{"name":"Instruction Modes","value":"`SUBSS xmm1, xmm2/m32`\n`VSUBSS xmm1,xmm2, xmm3/m32`\n`VSUBSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}`"},{"name":"Description","value":"Subtract the low single-precision floating-point value from the second source operand and the first source operand and store the double-precision floating-point result in the low doubleword of the destination operand."},{"name":"\u200b","value":"The second source operand can be an XMM register or a 32-bit memory location. The first source and destination operands are XMM registers."},{"name":"\u200b","value":"128-bit Legacy SSE version: The destination and first source operand are the same. Bits (MAXVL-1:32) of the corresponding destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 and EVEX encoded versions: Bits (127:32) of the XMM register destination are copied from corresponding bits in the first source operand. Bits (MAXVL-1:128) of the destination register are zeroed."},{"name":"\u200b","value":"EVEX encoded version: The low doubleword element of the destination operand is updated according to the writemask."},{"name":"\u200b","value":"Software should ensure VSUBSS is encoded with VEX.L=0. Encoding VSUBSD with VEX.L=1 may encounter unpredictable behavior across different processor generations."},{"name":"C/C++ Intriniscs","value":"`VSUBSS __m128 _mm_mask_sub_ss (__m128 s, __mmask8 k, __m128 a, __m128 b);\n`"},{"name":"\u200b","value":"`VSUBSS __m128 _mm_maskz_sub_ss (__mmask8 k, __m128 a, __m128 b);\n`"},{"name":"\u200b","value":"`VSUBSS __m128 _mm_sub_round_ss (__m128 a, __m128 b, int);\n`"},{"name":"\u200b","value":"`VSUBSS __m128 _mm_mask_sub_round_ss (__m128 s, __mmask8 k, __m128 a, __m128 b, int);\n`"},{"name":"\u200b","value":"`VSUBSS __m128 _mm_maskz_sub_round_ss (__mmask8 k, __m128 a, __m128 b, int);\n`"},{"name":"\u200b","value":"`SUBSS __m128 _mm_sub_ss (__m128 a, __m128 b);\n`"},{"name":"CPUID Flags","value":"SSE"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}