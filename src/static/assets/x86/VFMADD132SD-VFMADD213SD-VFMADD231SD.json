{"title":"VFMADD132SD/VFMADD213SD/VFMADD231SD â€” Fused Multiply-Add of Scalar Double- Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`VFMADD132SD xmm1, xmm2, xmm3/m64`\n`VFMADD213SD xmm1, xmm2, xmm3/m64`\n`VFMADD231SD xmm1, xmm2, xmm3/m64`\n`VFMADD132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}`\n`VFMADD213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}`\n`VFMADD231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}`"},{"name":"Description","value":"Performs a SIMD multiply-add computation on the low double-precision floating-point values using three source operands and writes the multiply-add result in the destination operand. The destination operand is also the first source operand. The first and second operand are XMM registers. The third source operand can be an XMM register or a 64-bit memory location."},{"name":"\u200b","value":"VFMADD132SD: Multiplies the low double-precision floating-point value from the first source operand to the low double-precision floating-point value in the third source operand, adds the infinite precision intermediate result to the low double-precision floating-point values in the second source operand, performs rounding and stores the resulting double-precision floating-point value to the destination operand (first source operand)."},{"name":"\u200b","value":"VFMADD213SD: Multiplies the low double-precision floating-point value from the second source operand to the low double-precision floating-point value in the first source operand, adds the infinite precision intermediate result to the low double-precision floating-point value in the third source operand, performs rounding and stores the resulting double-precision floating-point value to the destination operand (first source operand)."},{"name":"\u200b","value":"VFMADD231SD: Multiplies the low double-precision floating-point value from the second source to the low double-precision floating-point value in the third source operand, adds the infinite precision intermediate result to the low double-precision floating-point value in the first source operand, performs rounding and stores the resulting double-precision floating-point value to the destination operand (first source operand)."},{"name":"\u200b","value":"VEX.128 and EVEX encoded version: The destination operand (also first source operand) is encoded in reg_field. The second source operand is encoded in VEX.vvvv/EVEX.vvvv. The third source operand is encoded in rm_field. Bits 127:64 of the destination are unchanged. Bits MAXVL-1:128 of the destination register are zeroed."},{"name":"\u200b","value":"EVEX encoded version: The low quadword element of the destination is updated according to the writemask."},{"name":"C/C++ Intriniscs","value":"`VFMADDxxxSD __m128d _mm_fmadd_round_sd(__m128d a, __m128d b, __m128d c, int r);\n`"},{"name":"\u200b","value":"`VFMADDxxxSD __m128d _mm_mask_fmadd_sd(__m128d a, __mmask8 k, __m128d b, __m128d c);\n`"},{"name":"\u200b","value":"`VFMADDxxxSD __m128d _mm_maskz_fmadd_sd(__mmask8 k, __m128d a, __m128d b, __m128d c);\n`"},{"name":"\u200b","value":"`VFMADDxxxSD __m128d _mm_mask3_fmadd_sd(__m128d a, __m128d b, __m128d c, __mmask8 k);\n`"},{"name":"\u200b","value":"`VFMADDxxxSD __m128d _mm_mask_fmadd_round_sd(__m128d a, __mmask8 k, __m128d b, __m128d c, int r);\n`"},{"name":"\u200b","value":"`VFMADDxxxSD __m128d _mm_maskz_fmadd_round_sd(__mmask8 k, __m128d a, __m128d b, __m128d c, int r);\n`"},{"name":"\u200b","value":"`VFMADDxxxSD __m128d _mm_mask3_fmadd_round_sd(__m128d a, __m128d b, __m128d c, __mmask8 k, int r);\n`"},{"name":"\u200b","value":"`VFMADDxxxSD __m128d _mm_fmadd_sd (__m128d a, __m128d b, __m128d c);\n`"},{"name":"CPUID Flags","value":"FMA"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}