{"title":"VGETMANTSD — Extract Float64 of Normalized Mantissas from Float64 Scalar","fields":[{"name":"Instruction Modes","value":"`ib VGETMANTSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8`"},{"name":"Description","value":"Convert the double-precision floating values in the low quadword element of the second source operand (the third operand) to DP FP value with the mantissa normalization and sign control specified by the imm8 byte, see Figure 5-15. The converted result is written to the low quadword element of the destination operand (the first operand) using writemask k1. Bits (127:64) of the XMM register destination are copied from corresponding bits in the first source operand. The normalized mantissa is specified by interv (imm8[1:0]) and the sign control (sc) is specified by bits 3:2 of the immediate byte."},{"name":"\u200b","value":"The conversion operation is:"},{"name":"\u200b","value":"GetMant(x) = ±2k|x.significand|"},{"name":"\u200b","value":"where:"},{"name":"\u200b","value":"1 &lt;= |x.significand| &lt; 2"},{"name":"\u200b","value":"Unbiased exponent k depends on the interval range defined by interv and whether the exponent of the source is even or odd. The sign of the final result is determined by sc and the source sign."},{"name":"\u200b","value":"If interv != 0 then k = -1, otherwise K = 0. The encoded value of imm8[1:0] and sign control are shown in"},{"name":"\u200b","value":"Figure 5-15."},{"name":"\u200b","value":"The converted DP FP result is encoded according to the sign control, the unbiased exponent k (adding bias) and a mantissa normalized to the range specified by interv."},{"name":"\u200b","value":"The GetMant() function follows Table 5-16 when dealing with floating-point special numbers."},{"name":"\u200b","value":"This instruction is writemasked, so only those elements with the corresponding bit set in vector mask register k1 are computed and stored into zmm1. Elements in zmm1 with the corresponding bit clear in k1 retain their previous values."},{"name":"C/C++ Intriniscs","value":"`VGETMANTSD __m128d _mm_getmant_sd( __m128d a, __m128 b, enum intv, enum sgn);\n`"},{"name":"\u200b","value":"`VGETMANTSD __m128d _mm_mask_getmant_sd(__m128d s, __mmask8 k, __m128d a, __m128d b, enum intv, enum sgn);\n`"},{"name":"\u200b","value":"`VGETMANTSD __m128d _mm_maskz_getmant_sd( __mmask8 k, __m128 a, __m128d b, enum intv, enum sgn);\n`"},{"name":"\u200b","value":"`VGETMANTSD __m128d _mm_getmant_round_sd( __m128d a, __m128 b, enum intv, enum sgn, int r);\n`"},{"name":"\u200b","value":"`VGETMANTSD __m128d _mm_mask_getmant_round_sd(__m128d s, __mmask8 k, __m128d a, __m128d b, enum intv, enum sgn, int r);\n`"},{"name":"\u200b","value":"`VGETMANTSD __m128d _mm_maskz_getmant_round_sd( __mmask8 k, __m128d a, __m128d b, enum intv, enum sgn, int r);\n`"},{"name":"CPUID Flags","value":"AVX512F"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}