{"title":"SQRTPS â€” Square Root of Single-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`SQRTPS xmm1, xmm2/m128`\n`VSQRTPS xmm1, xmm2/m128`\n`VSQRTPS ymm1, ymm2/m256`\n`VSQRTPS xmm1 {k1}{z}, xmm2/m128/m32bcst`\n`VSQRTPS ymm1 {k1}{z}, ymm2/m256/m32bcst`\n`VSQRTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}`"},{"name":"Description","value":"Performs a SIMD computation of the square roots of the four, eight or sixteen packed single-precision floating-point values in the source operand (second operand) stores the packed single-precision floating-point results in the destination operand."},{"name":"\u200b","value":"EVEX.512 encoded versions: The source operand is a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32-bit memory location. The destination operand is a ZMM/YMM/XMM register updated according to the writemask."},{"name":"\u200b","value":"VEX.256 encoded version: The source operand is a YMM register or a 256-bit memory location. The destination operand is a YMM register. The upper bits (MAXVL-1:256) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"VEX.128 encoded version: the source operand second source operand or a 128-bit memory location. The destination operand is an XMM register. The upper bits (MAXVL-1:128) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"128-bit Legacy SSE version: The second source can be an XMM register or 128-bit memory location. The destination is not distinct from the first source XMM register and the upper bits (MAXVL-1:128) of the corresponding ZMM register destination are unmodified."},{"name":"\u200b","value":"Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instructions will #UD."},{"name":"C/C++ Intriniscs","value":"`VSQRTPS __m512 _mm512_sqrt_round_ps(__m512 a, int r);\n`"},{"name":"\u200b","value":"`VSQRTPS __m512 _mm512_mask_sqrt_round_ps(__m512 s, __mmask16 k, __m512 a, int r);\n`"},{"name":"\u200b","value":"`VSQRTPS __m512 _mm512_maskz_sqrt_round_ps( __mmask16 k, __m512 a, int r);\n`"},{"name":"\u200b","value":"`VSQRTPS __m256 _mm256_sqrt_ps (__m256 a);\n`"},{"name":"\u200b","value":"`VSQRTPS __m256 _mm256_mask_sqrt_ps(__m256 s, __mmask8 k, __m256 a, int r);\n`"},{"name":"\u200b","value":"`VSQRTPS __m256 _mm256_maskz_sqrt_ps( __mmask8 k, __m256 a, int r);\n`"},{"name":"\u200b","value":"`SQRTPS __m128 _mm_sqrt_ps (__m128 a);\n`"},{"name":"\u200b","value":"`VSQRTPS __m128 _mm_mask_sqrt_ps(__m128 s, __mmask8 k, __m128 a, int r);\n`"},{"name":"\u200b","value":"`VSQRTPS __m128 _mm_maskz_sqrt_ps( __mmask8 k, __m128 a, int r);\n`"},{"name":"CPUID Flags","value":"SSE"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}