{"title":"PSUBSB/PSUBSW — Subtract Packed Signed Integers with Signed Saturation","fields":[{"name":"Instruction Modes","value":"`PSUBSB mm, mm/m64`\n`PSUBSB xmm1, xmm2/m128`\n`PSUBSW mm, mm/m64`\n`PSUBSW xmm1, xmm2/m128`\n`VPSUBSB xmm1, xmm2, xmm3/m128`\n`VPSUBSW xmm1, xmm2, xmm3/m128`\n`VPSUBSB ymm1, ymm2, ymm3/m256`\n`VPSUBSW ymm1, ymm2, ymm3/m256`\n`VPSUBSB xmm1 {k1}{z}, xmm2, xmm3/m128`\n`VPSUBSB ymm1 {k1}{z}, ymm2, ymm3/m256`\n`VPSUBSB zmm1 {k1}{z}, zmm2, zmm3/m512`\n`VPSUBSW xmm1 {k1}{z}, xmm2, xmm3/m128`\n`VPSUBSW ymm1 {k1}{z}, ymm2, ymm3/m256`"},{"name":"Description","value":"Performs a SIMD subtract of the packed signed integers of the source operand (second operand) from the packed signed integers of the destination operand (first operand), and stores the packed integer results in the destination operand. See Figure 9-4 in the Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 1, for an illustration of a SIMD operation. Overflow is handled with signed saturation, as described in the following paragraphs."},{"name":"\u200b","value":"The (V)PSUBSB instruction subtracts packed signed byte integers. When an individual byte result is beyond the range of a signed byte integer (that is, greater than 7FH or less than 80H), the saturated value of 7FH or 80H, respectively, is written to the destination operand."},{"name":"\u200b","value":"The (V)PSUBSW instruction subtracts packed signed word integers. When an individual word result is beyond the range of a signed word integer (that is, greater than 7FFFH or less than 8000H), the saturated value of 7FFFH or 8000H, respectively, is written to the destination operand."},{"name":"\u200b","value":"In 64-bit mode and not encoded with VEX/EVEX, using a REX prefix in the form of REX.R permits this instruction to access additional registers (XMM8-XMM15)."},{"name":"\u200b","value":"Legacy SSE version 64-bit operand: The destination operand must be an MMX technology register and the source operand can be either an MMX technology register or a 64-bit memory location."},{"name":"\u200b","value":"128-bit Legacy SSE version: The second source operand is an XMM register or a 128-bit memory location. The first source operand and destination operands are XMM registers. Bits (MAXVL-1:128) of the corresponding YMM destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 encoded version: The second source operand is an XMM register or a 128-bit memory location. The first source operand and destination operands are XMM registers. Bits (MAXVL-1:128) of the destination YMM register are zeroed."},{"name":"\u200b","value":"VEX.256 encoded versions: The second source operand is an YMM register or an 256-bit memory location. The first source operand and destination operands are YMM registers. Bits (MAXVL-1:256) of the corresponding ZMM register are zeroed."},{"name":"\u200b","value":"EVEX encoded version: The second source operand is an ZMM/YMM/XMM register or an 512/256/128-bit memory location. The first source operand and destination operands are ZMM/YMM/XMM registers. The destination is conditionally updated with writemask k1."},{"name":"CPUID Flags","value":"MMX"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}