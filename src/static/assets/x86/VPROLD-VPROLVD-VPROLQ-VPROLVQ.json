{"title":"VPROLD/VPROLVD/VPROLQ/VPROLVQ â€” Bit Rotate Left","fields":[{"name":"Instruction Modes","value":"`VPROLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`ib VPROLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8`\n`VPROLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`ib VPROLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8`\n`VPROLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`ib VPROLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8`\n`VPROLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`ib VPROLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8`\n`VPROLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst`\n`ib VPROLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8`\n`VPROLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst`\n`ib VPROLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8`"},{"name":"Description","value":"Rotates the bits in the individual data elements (doublewords, or quadword) in the first source operand to the left by the number of bits specified in the count operand. If the value specified by the count operand is greater than 31 (for doublewords), or 63 (for a quadword), then the count operand modulo the data size (32 or 64) is used."},{"name":"\u200b","value":"EVEX.128 encoded version: The destination operand is a XMM register. The source operand is a XMM register or a memory location (for immediate form). The count operand can come either from an XMM register or a memory location or an 8-bit immediate. Bits (MAXVL-1:128) of the corresponding ZMM register are zeroed."},{"name":"\u200b","value":"EVEX.256 encoded version: The destination operand is a YMM register. The source operand is a YMM register or a memory location (for immediate form). The count operand can come either from an XMM register or a memory location or an 8-bit immediate. Bits (MAXVL-1:256) of the corresponding ZMM register are zeroed."},{"name":"\u200b","value":"EVEX.512 encoded version: The destination operand is a ZMM register updated according to the writemask. For the count operand in immediate form, the source operand can be a ZMM register, a 512-bit memory location or a 512-bit vector broadcasted from a 32/64-bit memory location, the count operand is an 8-bit immediate. For the count operand in variable form, the first source operand (the second operand) is a ZMM register and the counter operand (the third operand) is a ZMM register, a 512-bit memory location or a 512-bit vector broadcasted from a 32/64-bit memory location."},{"name":"C/C++ Intriniscs","value":"`VPROLD __m512i _mm512_rol_epi32(__m512i a, int imm);\n`"},{"name":"\u200b","value":"`VPROLD __m512i _mm512_mask_rol_epi32(__m512i a, __mmask16 k, __m512i b, int imm);\n`"},{"name":"\u200b","value":"`VPROLD __m512i _mm512_maskz_rol_epi32( __mmask16 k, __m512i a, int imm);\n`"},{"name":"\u200b","value":"`VPROLD __m256i _mm256_rol_epi32(__m256i a, int imm);\n`"},{"name":"\u200b","value":"`VPROLD __m256i _mm256_mask_rol_epi32(__m256i a, __mmask8 k, __m256i b, int imm);\n`"},{"name":"\u200b","value":"`VPROLD __m256i _mm256_maskz_rol_epi32( __mmask8 k, __m256i a, int imm);\n`"},{"name":"\u200b","value":"`VPROLD __m128i _mm_rol_epi32(__m128i a, int imm);\n`"},{"name":"\u200b","value":"`VPROLD __m128i _mm_mask_rol_epi32(__m128i a, __mmask8 k, __m128i b, int imm);\n`"},{"name":"\u200b","value":"`VPROLD __m128i _mm_maskz_rol_epi32( __mmask8 k, __m128i a, int imm);\n`"},{"name":"\u200b","value":"`VPROLQ __m512i _mm512_rol_epi64(__m512i a, int imm);\n`"},{"name":"\u200b","value":"`VPROLQ __m512i _mm512_mask_rol_epi64(__m512i a, __mmask8 k, __m512i b, int imm);\n`"},{"name":"\u200b","value":"`VPROLQ __m512i _mm512_maskz_rol_epi64(__mmask8 k, __m512i a, int imm);\n`"},{"name":"\u200b","value":"`VPROLQ __m256i _mm256_rol_epi64(__m256i a, int imm);\n`"},{"name":"\u200b","value":"`VPROLQ __m256i _mm256_mask_rol_epi64(__m256i a, __mmask8 k, __m256i b, int imm);\n`"},{"name":"\u200b","value":"`VPROLQ __m256i _mm256_maskz_rol_epi64( __mmask8 k, __m256i a, int imm);\n`"},{"name":"\u200b","value":"`VPROLQ __m128i _mm_rol_epi64(__m128i a, int imm);\n`"},{"name":"\u200b","value":"`VPROLQ __m128i _mm_mask_rol_epi64(__m128i a, __mmask8 k, __m128i b, int imm);\n`"},{"name":"\u200b","value":"`VPROLQ __m128i _mm_maskz_rol_epi64( __mmask8 k, __m128i a, int imm);\n`"},{"name":"\u200b","value":"`VPROLVD __m512i _mm512_rolv_epi32(__m512i a, __m512i cnt);\n`"},{"name":"\u200b","value":"`VPROLVD __m512i _mm512_mask_rolv_epi32(__m512i a, __mmask16 k, __m512i b, __m512i cnt);\n`"},{"name":"\u200b","value":"`VPROLVD __m512i _mm512_maskz_rolv_epi32(__mmask16 k, __m512i a, __m512i cnt);\n`"},{"name":"\u200b","value":"`VPROLVD __m256i _mm256_rolv_epi32(__m256i a, __m256i cnt);\n`"},{"name":"\u200b","value":"`VPROLVD __m256i _mm256_mask_rolv_epi32(__m256i a, __mmask8 k, __m256i b, __m256i cnt);\n`"},{"name":"\u200b","value":"`VPROLVD __m256i _mm256_maskz_rolv_epi32(__mmask8 k, __m256i a, __m256i cnt);\n`"},{"name":"\u200b","value":"`VPROLVD __m128i _mm_rolv_epi32(__m128i a, __m128i cnt);\n`"},{"name":"\u200b","value":"`VPROLVD __m128i _mm_mask_rolv_epi32(__m128i a, __mmask8 k, __m128i b, __m128i cnt);\n`"},{"name":"\u200b","value":"`VPROLVD __m128i _mm_maskz_rolv_epi32(__mmask8 k, __m128i a, __m128i cnt);\n`"},{"name":"\u200b","value":"`VPROLVQ __m512i _mm512_rolv_epi64(__m512i a, __m512i cnt);\n`"},{"name":"\u200b","value":"`VPROLVQ __m512i _mm512_mask_rolv_epi64(__m512i a, __mmask8 k, __m512i b, __m512i cnt);\n`"},{"name":"\u200b","value":"`VPROLVQ __m512i _mm512_maskz_rolv_epi64( __mmask8 k, __m512i a, __m512i cnt);\n`"},{"name":"\u200b","value":"`VPROLVQ __m256i _mm256_rolv_epi64(__m256i a, __m256i cnt);\n`"},{"name":"\u200b","value":"`VPROLVQ __m256i _mm256_mask_rolv_epi64(__m256i a, __mmask8 k, __m256i b, __m256i cnt);\n`"},{"name":"\u200b","value":"`VPROLVQ __m256i _mm256_maskz_rolv_epi64(__mmask8 k, __m256i a, __m256i cnt);\n`"},{"name":"\u200b","value":"`VPROLVQ __m128i _mm_rolv_epi64(__m128i a, __m128i cnt);\n`"},{"name":"\u200b","value":"`VPROLVQ __m128i _mm_mask_rolv_epi64(__m128i a, __mmask8 k, __m128i b, __m128i cnt);\n`"},{"name":"\u200b","value":"`VPROLVQ __m128i _mm_maskz_rolv_epi64(__mmask8 k, __m128i a, __m128i cnt);\n`"},{"name":"CPUID Flags","value":"AVX512VL AVX512F"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}