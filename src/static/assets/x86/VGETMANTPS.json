{"title":"VGETMANTPS — Extract Float32 Vector of Normalized Mantissas from Float32 Vector","fields":[{"name":"Instruction Modes","value":"`ib VGETMANTPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8`\n`ib VGETMANTPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8`\n`ib VGETMANTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8`"},{"name":"Description","value":"Convert single-precision floating values in the source operand (the second operand) to SP FP values with the mantissa normalization and sign control specified by the imm8 byte, see Figure 5-15. The converted results are written to the destination operand (the first operand) using writemask k1. The normalized mantissa is specified by interv (imm8[1:0]) and the sign control (sc) is specified by bits 3:2 of the immediate byte."},{"name":"\u200b","value":"The destination operand is a ZMM/YMM/XMM register updated under the writemask. The source operand can be a ZMM/YMM/XMM register, a 512/256/128-bit memory location, or a 512/256/128-bit vector broadcasted from a 32-bit memory location."},{"name":"\u200b","value":"For each input SP FP value x, The conversion operation is:"},{"name":"\u200b","value":"GetMant(x) = ±2k|x.significand|"},{"name":"\u200b","value":"where:"},{"name":"\u200b","value":"1 &lt;= |x.significand| &lt; 2"},{"name":"\u200b","value":"Unbiased exponent k depends on the interval range defined by interv and whether the exponent of the source is even or odd. The sign of the final result is determined by sc and the source sign."},{"name":"\u200b","value":"if interv != 0 then k = -1, otherwise K = 0. The encoded value of imm8[1:0] and sign control are shown"},{"name":"\u200b","value":"in Figure 5-15."},{"name":"\u200b","value":"Each converted SP FP result is encoded according to the sign control, the unbiased exponent k (adding bias) and a mantissa normalized to the range specified by interv."},{"name":"\u200b","value":"The GetMant() function follows Table 5-16 when dealing with floating-point special numbers."},{"name":"\u200b","value":"This instruction is writemasked, so only those elements with the corresponding bit set in vector mask register k1 are computed and stored into the destination. Elements in zmm1 with the corresponding bit clear in k1 retain their previous values."},{"name":"\u200b","value":"Note: EVEX.vvvv is reserved and must be 1111b, VEX.L must be 0; otherwise instructions will #UD."},{"name":"C/C++ Intrinsics","value":"`VGETMANTPS __m512 _mm512_getmant_ps( __m512 a, enum intv, enum sgn);\n`"},{"name":"\u200b","value":"`VGETMANTPS __m512 _mm512_mask_getmant_ps(__m512 s, __mmask16 k, __m512 a, enum intv, enum sgn;\n`"},{"name":"\u200b","value":"`VGETMANTPS __m512 _mm512_maskz_getmant_ps(__mmask16 k, __m512 a, enum intv, enum sgn);\n`"},{"name":"\u200b","value":"`VGETMANTPS __m512 _mm512_getmant_round_ps( __m512 a, enum intv, enum sgn, int r);\n`"},{"name":"\u200b","value":"`VGETMANTPS __m512 _mm512_mask_getmant_round_ps(__m512 s, __mmask16 k, __m512 a, enum intv, enum sgn, int r);\n`"},{"name":"\u200b","value":"`VGETMANTPS __m512 _mm512_maskz_getmant_round_ps(__mmask16 k, __m512 a, enum intv, enum sgn, int r);\n`"},{"name":"\u200b","value":"`VGETMANTPS __m256 _mm256_getmant_ps( __m256 a, enum intv, enum sgn);\n`"},{"name":"\u200b","value":"`VGETMANTPS __m256 _mm256_mask_getmant_ps(__m256 s, __mmask8 k, __m256 a, enum intv, enum sgn);\n`"},{"name":"\u200b","value":"`VGETMANTPS __m256 _mm256_maskz_getmant_ps( __mmask8 k, __m256 a, enum intv, enum sgn);\n`"},{"name":"\u200b","value":"(3 more)"},{"name":"CPUID Flags","value":"AVX512VL AVX512F"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}