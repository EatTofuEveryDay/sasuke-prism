{"title":"PCMPGTQ â€” Compare Packed Data for Greater Than","fields":[{"name":"Instruction Modes","value":"`PCMPGTQ xmm1,xmm2/m128`\n`VPCMPGTQ xmm1, xmm2, xmm3/m128`\n`VPCMPGTQ ymm1, ymm2, ymm3/m256`\n`VPCMPGTQ k1 {k2}, xmm2, xmm3/m128/m64bcst`\n`VPCMPGTQ k1 {k2}, ymm2, ymm3/m256/m64bcst`\n`VPCMPGTQ k1 {k2}, zmm2, zmm3/m512/m64bcst`"},{"name":"Description","value":"Performs an SIMD signed compare for the packed quadwords in the destination operand (first operand) and the source operand (second operand). If the data element in the first (destination) operand is greater than the corresponding element in the second (source) operand, the corresponding data element in the destination is set to all 1s; otherwise, it is set to 0s."},{"name":"\u200b","value":"128-bit Legacy SSE version: The second source operand can be an XMM register or a 128-bit memory location. The first source operand and destination operand are XMM registers. Bits (MAXVL-1:128) of the corresponding YMM destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 encoded version: The second source operand can be an XMM register or a 128-bit memory location. The first source operand and destination operand are XMM registers. Bits (MAXVL-1:128) of the corresponding YMM register are zeroed."},{"name":"\u200b","value":"VEX.256 encoded version: The first source operand is a YMM register. The second source operand is a YMM register or a 256-bit memory location. The destination operand is a YMM register."},{"name":"\u200b","value":"EVEX encoded VPCMPGTD/Q: The first source operand (second operand) is a ZMM/YMM/XMM register. The second source operand can be a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 64-bit memory location. The destination operand (first operand) is a mask register updated according to the writemask k2."},{"name":"C/C++ Intrinsics","value":"`VPCMPGTQ __mmask8 _mm512_cmpgt_epi64_mask( __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPCMPGTQ __mmask8 _mm512_mask_cmpgt_epi64_mask(__mmask8 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPCMPGTQ __mmask8 _mm256_cmpgt_epi64_mask( __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPCMPGTQ __mmask8 _mm256_mask_cmpgt_epi64_mask(__mmask8 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPCMPGTQ __mmask8 _mm_cmpgt_epi64_mask( __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPCMPGTQ __mmask8 _mm_mask_cmpgt_epi64_mask(__mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`(V)PCMPGTQ: __m128i _mm_cmpgt_epi64(__m128i a, __m128i b)\n`"},{"name":"\u200b","value":"`VPCMPGTQ: __m256i _mm256_cmpgt_epi64( __m256i a, __m256i b);\n`"},{"name":"CPUID Flags","value":"SSE4_2"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}