{"title":"CMPPD â€” Compare Packed Double-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`ib CMPPD xmm1, xmm2/m128, imm8`\n`ib VCMPPD xmm1, xmm2, xmm3/m128, imm8`\n`ib VCMPPD ymm1, ymm2, ymm3/m256, imm8`\n`ib VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8`\n`ib VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8`\n`ib VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8`"},{"name":"Description","value":"Performs a SIMD compare of the packed double-precision floating-point values in the second source operand and the first source operand and returns the results of the comparison to the destination operand. The comparison predicate operand (immediate byte) specifies the type of comparison performed on each pair of packed values in the two source operands."},{"name":"\u200b","value":"EVEX encoded versions: The first source operand (second operand) is a ZMM/YMM/XMM register. The second source operand can be a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 64-bit memory location. The destination operand (first operand) is an opmask register. Comparison results are written to the destination operand under the writemask k2. Each comparison result is a single mask bit of 1 (comparison true) or 0 (comparison false)."},{"name":"\u200b","value":"VEX.256 encoded version: The first source operand (second operand) is a YMM register. The second source operand (third operand) can be a YMM register or a 256-bit memory location. The destination operand (first operand) is a YMM register. Four comparisons are performed with results written to the destination operand. The result of each comparison is a quadword mask of all 1s (comparison true) or all 0s (comparison false)."},{"name":"\u200b","value":"128-bit Legacy SSE version: The first source and destination operand (first operand) is an XMM register. The second source operand (second operand) can be an XMM register or 128-bit memory location. Bits (MAXVL-1:128) of the corresponding ZMM destination register remain unchanged. Two comparisons are performed with results written to bits 127:0 of the destination operand. The result of each comparison is a quadword mask of all 1s (comparison true) or all 0s (comparison false)."},{"name":"\u200b","value":"VEX.128 encoded version: The first source operand (second operand) is an XMM register. The second source operand (third operand) can be an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the destination ZMM register are zeroed. Two comparisons are performed with results written to bits 127:0 of the destination operand."},{"name":"\u200b","value":"The comparison predicate operand is an 8-bit immediate:"},{"name":"C/C++ Intrinsics","value":"`VCMPPD __mmask8 _mm512_cmp_pd_mask( __m512d a, __m512d b, int imm);\n`"},{"name":"\u200b","value":"`VCMPPD __mmask8 _mm512_cmp_round_pd_mask( __m512d a, __m512d b, int imm, int sae);\n`"},{"name":"\u200b","value":"`VCMPPD __mmask8 _mm512_mask_cmp_pd_mask( __mmask8 k1, __m512d a, __m512d b, int imm);\n`"},{"name":"\u200b","value":"`VCMPPD __mmask8 _mm512_mask_cmp_round_pd_mask( __mmask8 k1, __m512d a, __m512d b, int imm, int sae);\n`"},{"name":"\u200b","value":"`VCMPPD __mmask8 _mm256_cmp_pd_mask( __m256d a, __m256d b, int imm);\n`"},{"name":"\u200b","value":"`VCMPPD __mmask8 _mm256_mask_cmp_pd_mask( __mmask8 k1, __m256d a, __m256d b, int imm);\n`"},{"name":"\u200b","value":"`VCMPPD __mmask8 _mm_cmp_pd_mask( __m128d a, __m128d b, int imm);\n`"},{"name":"\u200b","value":"`VCMPPD __mmask8 _mm_mask_cmp_pd_mask( __mmask8 k1, __m128d a, __m128d b, int imm);\n`"},{"name":"\u200b","value":"`VCMPPD __m256 _mm256_cmp_pd(__m256d a, __m256d b, int imm)\n`"},{"name":"\u200b","value":"`(V)CMPPD __m128 _mm_cmp_pd(__m128d a, __m128d b, int imm)\n`"},{"name":"CPUID Flags","value":"SSE2"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}