{"title":"VPCMPB/VPCMPUB â€” Compare Packed Byte Values Into Mask","fields":[{"name":"Instruction Modes","value":"`ib VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8`\n`ib VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8`\n`ib VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8`\n`ib VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8`\n`ib VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8`\n`ib VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8`"},{"name":"Description","value":"Performs a SIMD compare of the packed byte values in the second source operand and the first source operand and returns the results of the comparison to the mask destination operand. The comparison predicate operand (immediate byte) specifies the type of comparison performed on each pair of packed values in the two source operands. The result of each comparison is a single mask bit result of 1 (comparison true) or 0 (comparison false)."},{"name":"\u200b","value":"VPCMPB performs a comparison between pairs of signed byte values."},{"name":"\u200b","value":"VPCMPUB performs a comparison between pairs of unsigned byte values."},{"name":"\u200b","value":"The first source operand (second operand) is a ZMM/YMM/XMM register. The second source operand can be a ZMM/YMM/XMM register or a 512/256/128-bit memory location. The destination operand (first operand) is a mask register k1. Up to 64/32/16 comparisons are performed with results written to the destination operand under the writemask k2."},{"name":"\u200b","value":"The comparison predicate operand is an 8-bit immediate: bits 2:0 define the type of comparison to be performed. Bits 3 through 7 of the immediate are reserved. Compiler can implement the pseudo-op mnemonic listed in Table 5-17."},{"name":"C/C++ Intrinsics","value":"`VPCMPB __mmask64 _mm512_cmp_epi8_mask( __m512i a, __m512i b, int cmp);\n`"},{"name":"\u200b","value":"`VPCMPB __mmask64 _mm512_mask_cmp_epi8_mask( __mmask64 m, __m512i a, __m512i b, int cmp);\n`"},{"name":"\u200b","value":"`VPCMPB __mmask32 _mm256_cmp_epi8_mask( __m256i a, __m256i b, int cmp);\n`"},{"name":"\u200b","value":"`VPCMPB __mmask32 _mm256_mask_cmp_epi8_mask( __mmask32 m, __m256i a, __m256i b, int cmp);\n`"},{"name":"\u200b","value":"`VPCMPB __mmask16 _mm_cmp_epi8_mask( __m128i a, __m128i b, int cmp);\n`"},{"name":"\u200b","value":"`VPCMPB __mmask16 _mm_mask_cmp_epi8_mask( __mmask16 m, __m128i a, __m128i b, int cmp);\n`"},{"name":"\u200b","value":"`VPCMPB __mmask64 _mm512_cmp[eq|ge|gt|le|lt|neq]_epi8_mask( __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPCMPB __mmask64 _mm512_mask_cmp[eq|ge|gt|le|lt|neq]_epi8_mask( __mmask64 m, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPCMPB __mmask32 _mm256_cmp[eq|ge|gt|le|lt|neq]_epi8_mask( __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPCMPB __mmask32 _mm256_mask_cmp[eq|ge|gt|le|lt|neq]_epi8_mask( __mmask32 m, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPCMPB __mmask16 _mm_cmp[eq|ge|gt|le|lt|neq]_epi8_mask( __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPCMPB __mmask16 _mm_mask_cmp[eq|ge|gt|le|lt|neq]_epi8_mask( __mmask16 m, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPCMPUB __mmask64 _mm512_cmp_epu8_mask( __m512i a, __m512i b, int cmp);\n`"},{"name":"\u200b","value":"`VPCMPUB __mmask64 _mm512_mask_cmp_epu8_mask( __mmask64 m, __m512i a, __m512i b, int cmp);\n`"},{"name":"\u200b","value":"`VPCMPUB __mmask32 _mm256_cmp_epu8_mask( __m256i a, __m256i b, int cmp);\n`"},{"name":"\u200b","value":"`VPCMPUB __mmask32 _mm256_mask_cmp_epu8_mask( __mmask32 m, __m256i a, __m256i b, int cmp);\n`"},{"name":"\u200b","value":"`VPCMPUB __mmask16 _mm_cmp_epu8_mask( __m128i a, __m128i b, int cmp);\n`"},{"name":"\u200b","value":"(7 more)"},{"name":"CPUID Flags","value":"AVX512VL AVX512BW"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}