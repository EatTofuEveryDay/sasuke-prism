{"title":"SUBPD â€” Subtract Packed Double-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`SUBPD xmm1, xmm2/m128`\n`VSUBPD xmm1,xmm2, xmm3/m128`\n`VSUBPD ymm1, ymm2, ymm3/m256`\n`VSUBPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VSUBPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VSUBPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}`"},{"name":"Description","value":"Performs a SIMD subtract of the two, four or eight packed double-precision floating-point values of the second Source operand from the first Source operand, and stores the packed double-precision floating-point results in the destination operand."},{"name":"\u200b","value":"VEX.128 and EVEX.128 encoded versions: The second source operand is an XMM register or an 128-bit memory location. The first source operand and destination operands are XMM registers. Bits (MAXVL-1:128) of the corresponding destination register are zeroed."},{"name":"\u200b","value":"VEX.256 and EVEX.256 encoded versions: The second source operand is an YMM register or an 256-bit memory location. The first source operand and destination operands are YMM registers. Bits (MAXVL-1:256) of the corresponding destination register are zeroed."},{"name":"\u200b","value":"EVEX.512 encoded version: The second source operand is a ZMM register, a 512-bit memory location or a 512-bit vector broadcasted from a 64-bit memory location. The first source operand and destination operands are ZMM registers. The destination operand is conditionally updated according to the writemask."},{"name":"\u200b","value":"128-bit Legacy SSE version: The second source can be an XMM register or an 128-bit memory location. The destination is not distinct from the first source XMM register and the upper Bits (MAXVL-1:128) of the corresponding register destination are unmodified."},{"name":"C/C++ Intrinsics","value":"`VSUBPD __m512d _mm512_sub_pd (__m512d a, __m512d b);\n`"},{"name":"\u200b","value":"`VSUBPD __m512d _mm512_mask_sub_pd (__m512d s, __mmask8 k, __m512d a, __m512d b);\n`"},{"name":"\u200b","value":"`VSUBPD __m512d _mm512_maskz_sub_pd (__mmask8 k, __m512d a, __m512d b);\n`"},{"name":"\u200b","value":"`VSUBPD __m512d _mm512_sub_round_pd (__m512d a, __m512d b, int);\n`"},{"name":"\u200b","value":"`VSUBPD __m512d _mm512_mask_sub_round_pd (__m512d s, __mmask8 k, __m512d a, __m512d b, int);\n`"},{"name":"\u200b","value":"`VSUBPD __m512d _mm512_maskz_sub_round_pd (__mmask8 k, __m512d a, __m512d b, int);\n`"},{"name":"\u200b","value":"`VSUBPD __m256d _mm256_sub_pd (__m256d a, __m256d b);\n`"},{"name":"\u200b","value":"`VSUBPD __m256d _mm256_mask_sub_pd (__m256d s, __mmask8 k, __m256d a, __m256d b);\n`"},{"name":"\u200b","value":"`VSUBPD __m256d _mm256_maskz_sub_pd (__mmask8 k, __m256d a, __m256d b);\n`"},{"name":"\u200b","value":"`SUBPD __m128d _mm_sub_pd (__m128d a, __m128d b);\n`"},{"name":"\u200b","value":"`VSUBPD __m128d _mm_mask_sub_pd (__m128d s, __mmask8 k, __m128d a, __m128d b);\n`"},{"name":"\u200b","value":"`VSUBPD __m128d _mm_maskz_sub_pd (__mmask8 k, __m128d a, __m128d b);\n`"},{"name":"CPUID Flags","value":"SSE2"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}