{"title":"BNDCU/BNDCN — Check Upper Bound","fields":[{"name":"Instruction Modes","value":"`BNDCU bnd, r/m32`\n`BNDCU bnd, r/m64`\n`BNDCN bnd, r/m32`\n`BNDCN bnd, r/m64`"},{"name":"Description","value":"Compare the address in the second operand with the upper bound in bnd. The second operand can be either a register or a memory operand. If the address is higher than the upper bound in bnd.UB, it will set BNDSTATUS to 01H and signal a #BR exception."},{"name":"\u200b","value":"BNDCU perform 1’s complement operation on the upper bound of bnd first before proceeding with address comparison. BNDCN perform address comparison directly using the upper bound in bnd that is already reverted out of 1’s complement form."},{"name":"\u200b","value":"This instruction does not cause any memory access, and does not read or write any flags."},{"name":"\u200b","value":"Effective address computation of m32/64 has identical behavior to LEA"},{"name":"C/C++ Intrinsics","value":"`BNDCU .void _bnd_chk_ptr_ubounds(const void *q)\n`"},{"name":"CPUID Flags","value":"MPX"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}