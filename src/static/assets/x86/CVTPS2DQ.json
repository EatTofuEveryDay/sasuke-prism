{"title":"CVTPS2DQ â€” Convert Packed Single-Precision Floating-Point Values to Packed Signed Doubleword Integer Values","fields":[{"name":"Instruction Modes","value":"`CVTPS2DQ xmm1, xmm2/m128`\n`VCVTPS2DQ xmm1, xmm2/m128`\n`VCVTPS2DQ ymm1, ymm2/m256`\n`VCVTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst`\n`VCVTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst`\n`VCVTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er}`"},{"name":"Description","value":"Converts four, eight or sixteen packed single-precision floating-point values in the source operand to four, eight or sixteen signed doubleword integers in the destination operand."},{"name":"\u200b","value":"When a conversion is inexact, the value returned is rounded according to the rounding control bits in the MXCSR register or the embedded rounding control bits. If a converted result cannot be represented in the destination format, the floating-point invalid exception is raised, and if this exception is masked, the indefinite integer value (2w-1, where w represents the number of bits in the destination format) is returned."},{"name":"\u200b","value":"EVEX encoded versions: The source operand is a ZMM register, a 512-bit memory location or a 512-bit vector broadcasted from a 32-bit memory location. The destination operand is a ZMM register conditionally updated with writemask k1."},{"name":"\u200b","value":"VEX.256 encoded version: The source operand is a YMM register or 256- bit memory location. The destination operand is a YMM register. The upper bits (MAXVL-1:256) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"VEX.128 encoded version: The source operand is an XMM register or 128- bit memory location. The destination operand is a XMM register. The upper bits (MAXVL-1:128) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"128-bit Legacy SSE version: The source operand is an XMM register or 128- bit memory location. The destination operand is an XMM register. The upper bits (MAXVL-1:128) of the corresponding ZMM register destination are unmodified."},{"name":"\u200b","value":"VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instructions will #UD."},{"name":"C/C++ Intrinsics","value":"`VCVTPS2DQ __m512i _mm512_cvtps_epi32( __m512 a);\n`"},{"name":"\u200b","value":"`VCVTPS2DQ __m512i _mm512_mask_cvtps_epi32( __m512i s, __mmask16 k, __m512 a);\n`"},{"name":"\u200b","value":"`VCVTPS2DQ __m512i _mm512_maskz_cvtps_epi32( __mmask16 k, __m512 a);\n`"},{"name":"\u200b","value":"`VCVTPS2DQ __m512i _mm512_cvt_roundps_epi32( __m512 a, int r);\n`"},{"name":"\u200b","value":"`VCVTPS2DQ __m512i _mm512_mask_cvt_roundps_epi32( __m512i s, __mmask16 k, __m512 a, int r);\n`"},{"name":"\u200b","value":"`VCVTPS2DQ __m512i _mm512_maskz_cvt_roundps_epi32( __mmask16 k, __m512 a, int r);\n`"},{"name":"\u200b","value":"`VCVTPS2DQ __m256i _mm256_mask_cvtps_epi32( __m256i s, __mmask8 k, __m256 a);\n`"},{"name":"\u200b","value":"`VCVTPS2DQ __m256i _mm256_maskz_cvtps_epi32( __mmask8 k, __m256 a);\n`"},{"name":"\u200b","value":"`VCVTPS2DQ __m128i _mm_mask_cvtps_epi32( __m128i s, __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VCVTPS2DQ __m128i _mm_maskz_cvtps_epi32( __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VCVTPS2DQ __ m256i _mm256_cvtps_epi32 (__m256 a)\n`"},{"name":"\u200b","value":"`CVTPS2DQ __m128i _mm_cvtps_epi32 (__m128 a)\n`"},{"name":"CPUID Flags","value":"SSE2"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}