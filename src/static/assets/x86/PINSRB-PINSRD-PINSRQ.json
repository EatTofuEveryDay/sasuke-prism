{"title":"PINSRB/PINSRD/PINSRQ — Insert Byte/Dword/Qword","fields":[{"name":"Instruction Modes","value":"`ib PINSRB xmm1, r32/m8, imm8`\n`ib PINSRD xmm1, r/m32, imm8`\n`ib PINSRQ xmm1, r/m64, imm8`\n`ib VPINSRB xmm1, xmm2, r32/m8, imm8`\n`ib VPINSRD xmm1, xmm2, r/m32, imm8`\n`ib VPINSRQ xmm1, xmm2, r/m64, imm8`\n`ib VPINSRB xmm1, xmm2, r32/m8, imm8`\n`ib VPINSRD xmm1, xmm2, r32/m32, imm8`\n`ib VPINSRQ xmm1, xmm2, r64/m64, imm8`"},{"name":"Description","value":"Copies a byte/dword/qword from the source operand (second operand) and inserts it in the destination operand (first operand) at the location specified with the count operand (third operand). (The other elements in the destination register are left untouched.) The source operand can be a general-purpose register or a memory location. (When the source operand is a general-purpose register, PINSRB copies the low byte of the register.) The destination operand is an XMM register. The count operand is an 8-bit immediate. When specifying a qword[dword, byte] location in an XMM register, the [2, 4] least-significant bit(s) of the count operand specify the location."},{"name":"\u200b","value":"In 64-bit mode and not encoded with VEX/EVEX, using a REX prefix in the form of REX.R permits this instruction to access additional registers (XMM8-XMM15, R8-15). Use of REX.W permits the use of 64 bit general purpose registers."},{"name":"\u200b","value":"128-bit Legacy SSE version: Bits (MAXVL-1:128) of the corresponding YMM destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 encoded version: Bits (MAXVL-1:128) of the destination register are zeroed. VEX.L must be 0, otherwise the instruction will #UD. Attempt to execute VPINSRQ in non-64-bit mode will cause #UD."},{"name":"\u200b","value":"EVEX.128 encoded version: Bits (MAXVL-1:128) of the destination register are zeroed. EVEX.L’L must be 0, otherwise the instruction will #UD."},{"name":"C/C++ Intrinsics","value":"`PINSRB: __m128i _mm_insert_epi8 (__m128i s1, int s2, const int ndx);\n`"},{"name":"\u200b","value":"`PINSRD: __m128i _mm_insert_epi32 (__m128i s2, int s, const int ndx);\n`"},{"name":"\u200b","value":"`PINSRQ: __m128i _mm_insert_epi64(__m128i s2, __int64 s, const int ndx);\n`"},{"name":"CPUID Flags","value":"SSE4_1"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}