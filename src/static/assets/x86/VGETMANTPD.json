{"title":"VGETMANTPD â€” Extract Float64 Vector of Normalized Mantissas from Float64 Vector","fields":[{"name":"Instruction Modes","value":"`ib VGETMANTPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8`\n`ib VGETMANTPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8`\n`ib VGETMANTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8`"},{"name":"Description","value":"Convert double-precision floating values in the source operand (the second operand) to DP FP values with the mantissa normalization and sign control specified by the imm8 byte, see Figure 5-15. The converted results are written to the destination operand (the first operand) using writemask k1. The normalized mantissa is specified by interv (imm8[1:0]) and the sign control (sc) is specified by bits 3:2 of the immediate byte."},{"name":"\u200b","value":"The destination operand is a ZMM/YMM/XMM register updated under the writemask. The source operand can be a ZMM/YMM/XMM register, a 512/256/128-bit memory location, or a 512/256/128-bit vector broadcasted from a 64-bit memory location."},{"name":"C/C++ Intriniscs","value":"`VGETMANTPD __m512d _mm512_getmant_pd( __m512d a, enum intv, enum sgn);\n`"},{"name":"\u200b","value":"`VGETMANTPD __m512d _mm512_mask_getmant_pd(__m512d s, __mmask8 k, __m512d a, enum intv, enum sgn);\n`"},{"name":"\u200b","value":"`VGETMANTPD __m512d _mm512_maskz_getmant_pd( __mmask8 k, __m512d a, enum intv, enum sgn);\n`"},{"name":"\u200b","value":"`VGETMANTPD __m512d _mm512_getmant_round_pd( __m512d a, enum intv, enum sgn, int r);\n`"},{"name":"\u200b","value":"`VGETMANTPD __m512d _mm512_mask_getmant_round_pd(__m512d s, __mmask8 k, __m512d a, enum intv, enum sgn, int r);\n`"},{"name":"\u200b","value":"`VGETMANTPD __m512d _mm512_maskz_getmant_round_pd( __mmask8 k, __m512d a, enum intv, enum sgn, int r);\n`"},{"name":"\u200b","value":"`VGETMANTPD __m256d _mm256_getmant_pd( __m256d a, enum intv, enum sgn);\n`"},{"name":"\u200b","value":"`VGETMANTPD __m256d _mm256_mask_getmant_pd(__m256d s, __mmask8 k, __m256d a, enum intv, enum sgn);\n`"},{"name":"\u200b","value":"`VGETMANTPD __m256d _mm256_maskz_getmant_pd( __mmask8 k, __m256d a, enum intv, enum sgn);\n`"},{"name":"\u200b","value":"`VGETMANTPD __m128d _mm_getmant_pd( __m128d a, enum intv, enum sgn);\n`"},{"name":"\u200b","value":"`VGETMANTPD __m128d _mm_mask_getmant_pd(__m128d s, __mmask8 k, __m128d a, enum intv, enum sgn);\n`"},{"name":"\u200b","value":"`VGETMANTPD __m128d _mm_maskz_getmant_pd( __mmask8 k, __m128d a, enum intv, enum sgn);\n`"},{"name":"CPUID Flags","value":"AVX512VL AVX512F"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}