{"title":"CVTTPD2DQ â€” Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Doubleword Integers","fields":[{"name":"Instruction Modes","value":"`CVTTPD2DQ xmm1, xmm2/m128`\n`VCVTTPD2DQ xmm1, xmm2/m128`\n`VCVTTPD2DQ xmm1, ymm2/m256`\n`VCVTTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst`\n`VCVTTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst`\n`VCVTTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}`"},{"name":"Description","value":"Converts two, four or eight packed double-precision floating-point values in the source operand (second operand) to two, four or eight packed signed doubleword integers in the destination operand (first operand)."},{"name":"\u200b","value":"When a conversion is inexact, a truncated (round toward zero) value is returned. If a converted result is larger than the maximum signed doubleword integer, the floating-point invalid exception is raised, and if this exception is masked, the indefinite integer value (80000000H) is returned."},{"name":"\u200b","value":"EVEX encoded versions: The source operand is a ZMM/YMM/XMM register, a 512/256/128-bit memory location, or a 512/256/128-bit vector broadcasted from a 64-bit memory location. The destination operand is a YMM/XMM/XMM (low 64 bits) register conditionally updated with writemask k1. The upper bits (MAXVL-1:256) of the corresponding destination are zeroed."},{"name":"\u200b","value":"VEX.256 encoded version: The source operand is a YMM register or 256- bit memory location. The destination operand is an XMM register. The upper bits (MAXVL-1:128) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"VEX.128 encoded version: The source operand is an XMM register or 128- bit memory location. The destination operand is a XMM register. The upper bits (MAXVL-1:64) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"128-bit Legacy SSE version: The source operand is an XMM register or 128- bit memory location. The destination operand is an XMM register. The upper bits (MAXVL-1:128) of the corresponding ZMM register destination are unmodified."},{"name":"\u200b","value":"Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b, otherwise instructions will #UD."},{"name":"C/C++ Intriniscs","value":"`VCVTTPD2DQ __m256i _mm512_cvttpd_epi32( __m512d a);\n`"},{"name":"\u200b","value":"`VCVTTPD2DQ __m256i _mm512_mask_cvttpd_epi32( __m256i s, __mmask8 k, __m512d a);\n`"},{"name":"\u200b","value":"`VCVTTPD2DQ __m256i _mm512_maskz_cvttpd_epi32( __mmask8 k, __m512d a);\n`"},{"name":"\u200b","value":"`VCVTTPD2DQ __m256i _mm512_cvtt_roundpd_epi32( __m512d a, int sae);\n`"},{"name":"\u200b","value":"`VCVTTPD2DQ __m256i _mm512_mask_cvtt_roundpd_epi32( __m256i s, __mmask8 k, __m512d a, int sae);\n`"},{"name":"\u200b","value":"`VCVTTPD2DQ __m256i _mm512_maskz_cvtt_roundpd_epi32( __mmask8 k, __m512d a, int sae);\n`"},{"name":"\u200b","value":"`VCVTTPD2DQ __m128i _mm256_mask_cvttpd_epi32( __m128i s, __mmask8 k, __m256d a);\n`"},{"name":"\u200b","value":"`VCVTTPD2DQ __m128i _mm256_maskz_cvttpd_epi32( __mmask8 k, __m256d a);\n`"},{"name":"\u200b","value":"`VCVTTPD2DQ __m128i _mm_mask_cvttpd_epi32( __m128i s, __mmask8 k, __m128d a);\n`"},{"name":"\u200b","value":"`VCVTTPD2DQ __m128i _mm_maskz_cvttpd_epi32( __mmask8 k, __m128d a);\n`"},{"name":"\u200b","value":"`VCVTTPD2DQ __m128i _mm256_cvttpd_epi32 (__m256d src);\n`"},{"name":"\u200b","value":"`CVTTPD2DQ __m128i _mm_cvttpd_epi32 (__m128d src);\n`"},{"name":"CPUID Flags","value":"SSE2"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}