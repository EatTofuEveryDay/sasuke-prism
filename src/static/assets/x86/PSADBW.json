{"title":"PSADBW â€” Compute Sum of Absolute Differences","fields":[{"name":"Instruction Modes","value":"`PSADBW mm1, mm2/m64`\n`PSADBW xmm1, xmm2/m128`\n`VPSADBW xmm1, xmm2, xmm3/m128`\n`VPSADBW ymm1, ymm2, ymm3/m256`\n`VPSADBW xmm1, xmm2, xmm3/m128`\n`VPSADBW ymm1, ymm2, ymm3/m256`\n`VPSADBW zmm1, zmm2, zmm3/m512`"},{"name":"Description","value":"Computes the absolute value of the difference of 8 unsigned byte integers from the source operand (second operand) and from the destination operand (first operand). These 8 differences are then summed to produce an unsigned word integer result that is stored in the destination operand. Figure 4-14 shows the operation of the PSADBW instruction when using 64-bit operands."},{"name":"\u200b","value":"When operating on 64-bit operands, the word integer result is stored in the low word of the destination operand, and the remaining bytes in the destination operand are cleared to all 0s."},{"name":"\u200b","value":"When operating on 128-bit operands, two packed results are computed. Here, the 8 low-order bytes of the source and destination operands are operated on to produce a word result that is stored in the low word of the destination operand, and the 8 high-order bytes are operated on to produce a word result that is stored in bits 64 through 79 of the destination operand. The remaining bytes of the destination operand are cleared."},{"name":"\u200b","value":"For 256-bit version, the third group of 8 differences are summed to produce an unsigned word in bits[143:128] of the destination register and the fourth group of 8 differences are summed to produce an unsigned word in bits[207:192] of the destination register. The remaining words of the destination are set to 0."},{"name":"\u200b","value":"For 512-bit version, the fifth group result is stored in bits [271:256] of the destination. The result from the sixth group is stored in bits [335:320]. The results for the seventh and eighth group are stored respectively in bits [399:384] and bits [463:447], respectively. The remaining bits in the destination are set to 0."},{"name":"\u200b","value":"In 64-bit mode and not encoded by VEX/EVEX prefix, using a REX prefix in the form of REX.R permits this instruction to access additional registers (XMM8-XMM15)."},{"name":"\u200b","value":"Legacy SSE version: The source operand can be an MMX technology register or a 64-bit memory location. The destination operand is an MMX technology register."},{"name":"\u200b","value":"128-bit Legacy SSE version: The first source operand and destination register are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the corresponding ZMM destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 and EVEX.128 encoded versions: The first source operand and destination register are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the corresponding ZMM register are zeroed."},{"name":"\u200b","value":"VEX.256 and EVEX.256 encoded versions: The first source operand and destination register are YMM registers. The second source operand is an YMM register or a 256-bit memory location. Bits (MAXVL-1:256) of the corresponding ZMM register are zeroed."},{"name":"\u200b","value":"EVEX.512 encoded version: The first source operand and destination register are ZMM registers. The second source operand is a ZMM register or a 512-bit memory location."},{"name":"C/C++ Intrinsics","value":"`VPSADBW __m512i _mm512_sad_epu8( __m512i a, __m512i b)\n`"},{"name":"\u200b","value":"`PSADBW:__m64 _mm_sad_pu8(__m64 a,__m64 b)\n`"},{"name":"\u200b","value":"`(V)PSADBW:__m128i _mm_sad_epu8(__m128i a, __m128i b)\n`"},{"name":"\u200b","value":"`VPSADBW:__m256i _mm256_sad_epu8( __m256i a, __m256i b)\n`"},{"name":"CPUID Flags","value":"SSE"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}