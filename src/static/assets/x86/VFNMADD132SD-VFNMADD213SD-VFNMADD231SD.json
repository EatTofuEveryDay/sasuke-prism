{"title":"VFNMADD132SD/VFNMADD213SD/VFNMADD231SD â€” Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`VFNMADD132SD xmm1, xmm2, xmm3/m64`\n`VFNMADD213SD xmm1, xmm2, xmm3/m64`\n`VFNMADD231SD xmm1, xmm2, xmm3/m64`\n`VFNMADD132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}`\n`VFNMADD213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}`\n`VFNMADD231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}`"},{"name":"Description","value":"VFNMADD132SD: Multiplies the low packed double-precision floating-point value from the first source operand to the low packed double-precision floating-point value in the third source operand, adds the negated infinite precision intermediate result to the low packed double-precision floating-point values in the second source operand, performs rounding and stores the resulting packed double-precision floating-point value to the destination operand (first source operand)."},{"name":"\u200b","value":"VFNMADD213SD: Multiplies the low packed double-precision floating-point value from the second source operand to the low packed double-precision floating-point value in the first source operand, adds the negated infinite precision intermediate result to the low packed double-precision floating-point value in the third source operand, performs rounding and stores the resulting packed double-precision floating-point value to the destination operand (first source operand)."},{"name":"\u200b","value":"VFNMADD231SD: Multiplies the low packed double-precision floating-point value from the second source to the low packed double-precision floating-point value in the third source operand, adds the negated infinite precision intermediate result to the low packed double-precision floating-point value in the first source operand, performs rounding and stores the resulting packed double-precision floating-point value to the destination operand (first source operand)."},{"name":"\u200b","value":"VEX.128 and EVEX encoded version: The destination operand (also first source operand) is encoded in reg_field. The second source operand is encoded in VEX.vvvv/EVEX.vvvv. The third source operand is encoded in rm_field. Bits 127:64 of the destination are unchanged. Bits MAXVL-1:128 of the destination register are zeroed."},{"name":"\u200b","value":"EVEX encoded version: The low quadword element of the destination is updated according to the writemask."},{"name":"\u200b","value":"Compiler tools may optionally support a complementary mnemonic for each instruction mnemonic listed in the opcode/instruction column of the summary table. The behavior of the complementary mnemonic in situations involving NANs are governed by the definition of the instruction mnemonic defined in the opcode/instruction column."},{"name":"C/C++ Intrinsics","value":"`VFNMADDxxxSD __m128d _mm_fnmadd_round_sd(__m128d a, __m128d b, __m128d c, int r);\n`"},{"name":"\u200b","value":"`VFNMADDxxxSD __m128d _mm_mask_fnmadd_sd(__m128d a, __mmask8 k, __m128d b, __m128d c);\n`"},{"name":"\u200b","value":"`VFNMADDxxxSD __m128d _mm_maskz_fnmadd_sd(__mmask8 k, __m128d a, __m128d b, __m128d c);\n`"},{"name":"\u200b","value":"`VFNMADDxxxSD __m128d _mm_mask3_fnmadd_sd(__m128d a, __m128d b, __m128d c, __mmask8 k);\n`"},{"name":"\u200b","value":"`VFNMADDxxxSD __m128d _mm_mask_fnmadd_round_sd(__m128d a, __mmask8 k, __m128d b, __m128d c, int r);\n`"},{"name":"\u200b","value":"`VFNMADDxxxSD __m128d _mm_maskz_fnmadd_round_sd(__mmask8 k, __m128d a, __m128d b, __m128d c, int r);\n`"},{"name":"\u200b","value":"`VFNMADDxxxSD __m128d _mm_mask3_fnmadd_round_sd(__m128d a, __m128d b, __m128d c, __mmask8 k, int r);\n`"},{"name":"\u200b","value":"`VFNMADDxxxSD __m128d _mm_fnmadd_sd (__m128d a, __m128d b, __m128d c);\n`"},{"name":"CPUID Flags","value":"FMA"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}