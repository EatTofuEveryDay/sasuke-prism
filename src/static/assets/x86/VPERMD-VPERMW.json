{"title":"VPERMD/VPERMW â€” Permute Packed Doublewords/Words Elements","fields":[{"name":"Instruction Modes","value":"`VPERMD ymm1, ymm2, ymm3/m256`\n`VPERMD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VPERMD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst`\n`VPERMW xmm1 {k1}{z}, xmm2, xmm3/m128`\n`VPERMW ymm1 {k1}{z}, ymm2, ymm3/m256`\n`VPERMW zmm1 {k1}{z}, zmm2, zmm3/m512`"},{"name":"Description","value":"Copies doublewords (or words) from the second source operand (the third operand) to the destination operand (the first operand) according to the indices in the first source operand (the second operand). Note that this instruction permits a doubleword (word) in the source operand to be copied to more than one location in the destination operand."},{"name":"\u200b","value":"VEX.256 encoded VPERMD: The first and second operands are YMM registers, the third operand can be a YMM register or memory location. Bits (MAXVL-1:256) of the corresponding destination register are zeroed."},{"name":"\u200b","value":"EVEX encoded VPERMD: The first and second operands are ZMM/YMM registers, the third operand can be a ZMM/YMM register, a 512/256-bit memory location or a 512/256-bit vector broadcasted from a 32-bit memory location. The elements in the destination are updated using the writemask k1."},{"name":"\u200b","value":"VPERMW: first and second operands are ZMM/YMM/XMM registers, the third operand can be a ZMM/YMM/XMM register, or a 512/256/128-bit memory location. The destination is updated using the writemask k1."},{"name":"\u200b","value":"EVEX.128 encoded versions: Bits (MAXVL-1:128) of the corresponding ZMM register are zeroed."},{"name":"C/C++ Intrinsics","value":"`VPERMD __m512i _mm512_permutexvar_epi32( __m512i idx, __m512i a);\n`"},{"name":"\u200b","value":"`VPERMD __m512i _mm512_mask_permutexvar_epi32(__m512i s, __mmask16 k, __m512i idx, __m512i a);\n`"},{"name":"\u200b","value":"`VPERMD __m512i _mm512_maskz_permutexvar_epi32( __mmask16 k, __m512i idx, __m512i a);\n`"},{"name":"\u200b","value":"`VPERMD __m256i _mm256_permutexvar_epi32( __m256i idx, __m256i a);\n`"},{"name":"\u200b","value":"`VPERMD __m256i _mm256_mask_permutexvar_epi32(__m256i s, __mmask8 k, __m256i idx, __m256i a);\n`"},{"name":"\u200b","value":"`VPERMD __m256i _mm256_maskz_permutexvar_epi32( __mmask8 k, __m256i idx, __m256i a);\n`"},{"name":"\u200b","value":"`VPERMW __m512i _mm512_permutexvar_epi16( __m512i idx, __m512i a);\n`"},{"name":"\u200b","value":"`VPERMW __m512i _mm512_mask_permutexvar_epi16(__m512i s, __mmask32 k, __m512i idx, __m512i a);\n`"},{"name":"\u200b","value":"`VPERMW __m512i _mm512_maskz_permutexvar_epi16( __mmask32 k, __m512i idx, __m512i a);\n`"},{"name":"\u200b","value":"`VPERMW __m256i _mm256_permutexvar_epi16( __m256i idx, __m256i a);\n`"},{"name":"\u200b","value":"`VPERMW __m256i _mm256_mask_permutexvar_epi16(__m256i s, __mmask16 k, __m256i idx, __m256i a);\n`"},{"name":"\u200b","value":"`VPERMW __m256i _mm256_maskz_permutexvar_epi16( __mmask16 k, __m256i idx, __m256i a);\n`"},{"name":"\u200b","value":"`VPERMW __m128i _mm_permutexvar_epi16( __m128i idx, __m128i a);\n`"},{"name":"\u200b","value":"`VPERMW __m128i _mm_mask_permutexvar_epi16(__m128i s, __mmask8 k, __m128i idx, __m128i a);\n`"},{"name":"\u200b","value":"`VPERMW __m128i _mm_maskz_permutexvar_epi16( __mmask8 k, __m128i idx, __m128i a);\n`"},{"name":"CPUID Flags","value":"AVX2"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}