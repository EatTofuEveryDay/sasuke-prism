{"title":"VFMADDSUB132PD/VFMADDSUB213PD/VFMADDSUB231PD â€” Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`VFMADDSUB132PD xmm1, xmm2, xmm3/m128`\n`VFMADDSUB213PD xmm1, xmm2, xmm3/m128`\n`VFMADDSUB231PD xmm1, xmm2, xmm3/m128`\n`VFMADDSUB132PD ymm1, ymm2, ymm3/m256`\n`VFMADDSUB213PD ymm1, ymm2, ymm3/m256`\n`VFMADDSUB231PD ymm1, ymm2, ymm3/m256`\n`VFMADDSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VFMADDSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VFMADDSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VFMADDSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VFMADDSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VFMADDSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VFMADDSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}`\n`VFMADDSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}`\n`VFMADDSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}`"},{"name":"Description","value":"VFMADDSUB132PD: Multiplies the two, four, or eight packed double-precision floating-point values from the first source operand to the two or four packed double-precision floating-point values in the third source operand. From the infinite precision intermediate result, adds the odd double-precision floating-point elements and subtracts the even double-precision floating-point values in the second source operand, performs rounding and stores the resulting two or four packed double-precision floating-point values to the destination operand (first source operand)."},{"name":"\u200b","value":"VFMADDSUB213PD: Multiplies the two, four, or eight packed double-precision floating-point values from the second source operand to the two or four packed double-precision floating-point values in the first source operand. From the infinite precision intermediate result, adds the odd double-precision floating-point elements and subtracts the even double-precision floating-point values in the third source operand, performs rounding and stores the resulting two or four packed double-precision floating-point values to the destination operand (first source operand)."},{"name":"\u200b","value":"VFMADDSUB231PD: Multiplies the two, four, or eight packed double-precision floating-point values from the second source operand to the two or four packed double-precision floating-point values in the third source operand. From the infinite precision intermediate result, adds the odd double-precision floating-point elements and subtracts the even double-precision floating-point values in the first source operand, performs rounding and stores the resulting two or four packed double-precision floating-point values to the destination operand (first source operand)."},{"name":"\u200b","value":"EVEX encoded versions: The destination operand (also first source operand) and the second source operand are ZMM/YMM/XMM register. The third source operand is a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 64-bit memory location. The destination operand is conditionally updated with write mask k1."},{"name":"\u200b","value":"VEX.256 encoded version: The destination operand (also first source operand) is a YMM register and encoded in reg_field. The second source operand is a YMM register and encoded in VEX.vvvv. The third source operand is a YMM register or a 256-bit memory location and encoded in rm_field."},{"name":"\u200b","value":"VEX.128 encoded version: The destination operand (also first source operand) is a XMM register and encoded in reg_field. The second source operand is a XMM register and encoded in VEX.vvvv. The third source operand is a XMM register or a 128-bit memory location and encoded in rm_field. The upper 128 bits of the YMM destination register are zeroed."},{"name":"\u200b","value":"Compiler tools may optionally support a complementary mnemonic for each instruction mnemonic listed in the opcode/instruction column of the summary table. The behavior of the complementary mnemonic in situations involving NANs are governed by the definition of the instruction mnemonic defined in the opcode/instruction column."},{"name":"C/C++ Intriniscs","value":"`VFMADDSUBxxxPD __m512d _mm512_fmaddsub_pd(__m512d a, __m512d b, __m512d c);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPD __m512d _mm512_fmaddsub_round_pd(__m512d a, __m512d b, __m512d c, int r);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPD __m512d _mm512_mask_fmaddsub_pd(__m512d a, __mmask8 k, __m512d b, __m512d c);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPD __m512d _mm512_maskz_fmaddsub_pd(__mmask8 k, __m512d a, __m512d b, __m512d c);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPD __m512d _mm512_mask3_fmaddsub_pd(__m512d a, __m512d b, __m512d c, __mmask8 k);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPD __m512d _mm512_mask_fmaddsub_round_pd(__m512d a, __mmask8 k, __m512d b, __m512d c, int r);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPD __m512d _mm512_maskz_fmaddsub_round_pd(__mmask8 k, __m512d a, __m512d b, __m512d c, int r);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPD __m512d _mm512_mask3_fmaddsub_round_pd(__m512d a, __m512d b, __m512d c, __mmask8 k, int r);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPD __m256d _mm256_mask_fmaddsub_pd(__m256d a, __mmask8 k, __m256d b, __m256d c);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPD __m256d _mm256_maskz_fmaddsub_pd(__mmask8 k, __m256d a, __m256d b, __m256d c);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPD __m256d _mm256_mask3_fmaddsub_pd(__m256d a, __m256d b, __m256d c, __mmask8 k);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPD __m128d _mm_mask_fmaddsub_pd(__m128d a, __mmask8 k, __m128d b, __m128d c);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPD __m128d _mm_maskz_fmaddsub_pd(__mmask8 k, __m128d a, __m128d b, __m128d c);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPD __m128d _mm_mask3_fmaddsub_pd(__m128d a, __m128d b, __m128d c, __mmask8 k);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPD __m128d _mm_fmaddsub_pd (__m128d a, __m128d b, __m128d c);\n`"},{"name":"\u200b","value":"`VFMADDSUBxxxPD __m256d _mm256_fmaddsub_pd (__m256d a, __m256d b, __m256d c);\n`"},{"name":"CPUID Flags","value":"FMA"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}