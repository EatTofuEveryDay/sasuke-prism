{"title":"CVTSS2SD — Convert Scalar Single-Precision Floating-Point Value to Scalar Double-Precision Floating-Point Value","fields":[{"name":"Instruction Modes","value":"`CVTSS2SD xmm1, xmm2/m32`\n`VCVTSS2SD xmm1, xmm2, xmm3/m32`\n`VCVTSS2SD xmm1 {k1}{z}, xmm2, xmm3/m32{sae}`"},{"name":"Description","value":"Converts a single-precision floating-point value in the “convert-from” source operand to a double-precision floating-point value in the destination operand. When the “convert-from” source operand is an XMM register, the single-precision floating-point value is contained in the low doubleword of the register. The result is stored in the low quadword of the destination operand."},{"name":"\u200b","value":"128-bit Legacy SSE version: The “convert-from” source operand (the second operand) is an XMM register or memory location. Bits (MAXVL-1:64) of the corresponding destination register remain unchanged. The destination operand is an XMM register."},{"name":"\u200b","value":"VEX.128 and EVEX encoded versions: The “convert-from” source operand (the third operand) can be an XMM register or a 32-bit memory location. The first source and destination operands are XMM registers. Bits (127:64) of the XMM register destination are copied from the corresponding bits in the first source operand. Bits (MAXVL-1:128) of the destination register are zeroed."},{"name":"\u200b","value":"Software should ensure VCVTSS2SD is encoded with VEX.L=0. Encoding VCVTSS2SD with VEX.L=1 may encounter unpredictable behavior across different processor generations."},{"name":"C/C++ Intriniscs","value":"`VCVTSS2SD __m128d _mm_cvt_roundss_sd(__m128d a, __m128 b, int r);\n`"},{"name":"\u200b","value":"`VCVTSS2SD __m128d _mm_mask_cvt_roundss_sd(__m128d s, __mmask8 m, __m128d a,__m128 b, int r);\n`"},{"name":"\u200b","value":"`VCVTSS2SD __m128d _mm_maskz_cvt_roundss_sd(__mmask8 k, __m128d a, __m128 a, int r);\n`"},{"name":"\u200b","value":"`VCVTSS2SD __m128d _mm_mask_cvtss_sd(__m128d s, __mmask8 m, __m128d a,__m128 b);\n`"},{"name":"\u200b","value":"`VCVTSS2SD __m128d _mm_maskz_cvtss_sd(__mmask8 m, __m128d a,__m128 b);\n`"},{"name":"\u200b","value":"`CVTSS2SD __m128d_mm_cvtss_sd(__m128d a, __m128 a);\n`"},{"name":"CPUID Flags","value":"SSE2"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}