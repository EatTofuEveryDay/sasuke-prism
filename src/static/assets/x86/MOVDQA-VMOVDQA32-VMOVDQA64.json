{"title":"MOVDQA/VMOVDQA32/VMOVDQA64 â€” Move Aligned Packed Integer Values","fields":[{"name":"Instruction Modes","value":"`MOVDQA xmm1, xmm2/m128`\n`MOVDQA xmm2/m128, xmm1`\n`VMOVDQA xmm1, xmm2/m128`\n`VMOVDQA xmm2/m128, xmm1`\n`VMOVDQA ymm1, ymm2/m256`\n`VMOVDQA ymm2/m256, ymm1`\n`VMOVDQA32 xmm1 {k1}{z}, xmm2/m128`\n`VMOVDQA32 ymm1 {k1}{z}, ymm2/m256`\n`VMOVDQA32 zmm1 {k1}{z}, zmm2/m512`\n`VMOVDQA32 xmm2/m128 {k1}{z}, xmm1`\n`VMOVDQA32 ymm2/m256 {k1}{z}, ymm1`\n`VMOVDQA32 zmm2/m512 {k1}{z}, zmm1`\n`VMOVDQA64 xmm1 {k1}{z}, xmm2/m128`\n`VMOVDQA64 ymm1 {k1}{z}, ymm2/m256`\n`VMOVDQA64 zmm1 {k1}{z}, zmm2/m512`\n`VMOVDQA64 xmm2/m128 {k1}{z}, xmm1`\n`VMOVDQA64 ymm2/m256 {k1}{z}, ymm1`\n`VMOVDQA64 zmm2/m512 {k1}{z}, zmm1`"},{"name":"Description","value":"Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instructions will #UD."},{"name":"\u200b","value":"EVEX encoded versions:"},{"name":"\u200b","value":"Moves 128, 256 or 512 bits of packed doubleword/quadword integer values from the source operand (the second operand) to the destination operand (the first operand). This instruction can be used to load a vector register from an int32/int64 memory location, to store the contents of a vector register into an int32/int64 memory location, or to move data between two ZMM registers. When the source or destination operand is a memory operand, the operand must be aligned on a 16 (EVEX.128)/32(EVEX.256)/64(EVEX.512)-byte boundary or a general-protection exception (#GP) will be generated. To move integer data to and from unaligned memory locations, use the VMOVDQU instruction."},{"name":"\u200b","value":"The destination operand is updated at 32-bit (VMOVDQA32) or 64-bit (VMOVDQA64) granularity according to the writemask."},{"name":"\u200b","value":"VEX.256 encoded version:"},{"name":"\u200b","value":"Moves 256 bits of packed integer values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load a YMM register from a 256-bit memory location, to store the contents of a YMM register into a 256-bit memory location, or to move data between two YMM registers."},{"name":"\u200b","value":"When the source or destination operand is a memory operand, the operand must be aligned on a 32-byte boundary or a general-protection exception (#GP) will be generated. To move integer data to and from unaligned memory locations, use the VMOVDQU instruction. Bits (MAXVL-1:256) of the destination register are zeroed."},{"name":"\u200b","value":"128-bit versions:"},{"name":"\u200b","value":"Moves 128 bits of packed integer values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load an XMM register from a 128-bit memory location, to store the contents of an XMM register into a 128-bit memory location, or to move data between two XMM registers."},{"name":"\u200b","value":"When the source or destination operand is a memory operand, the operand must be aligned on a 16-byte boundary or a general-protection exception (#GP) will be generated. To move integer data to and from unaligned memory locations, use the VMOVDQU instruction."},{"name":"\u200b","value":"128-bit Legacy SSE version: Bits (MAXVL-1:128) of the corresponding ZMM destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 encoded version: Bits (MAXVL-1:128) of the destination register are zeroed."},{"name":"C/C++ Intrinsics","value":"`VMOVDQA32 __m512i _mm512_load_epi32( void * sa);\n`"},{"name":"\u200b","value":"`VMOVDQA32 __m512i _mm512_mask_load_epi32(__m512i s, __mmask16 k, void * sa);\n`"},{"name":"\u200b","value":"`VMOVDQA32 __m512i _mm512_maskz_load_epi32( __mmask16 k, void * sa);\n`"},{"name":"\u200b","value":"`VMOVDQA32 void _mm512_store_epi32(void * d, __m512i a);\n`"},{"name":"\u200b","value":"`VMOVDQA32 void _mm512_mask_store_epi32(void * d, __mmask16 k, __m512i a);\n`"},{"name":"\u200b","value":"`VMOVDQA32 __m256i _mm256_mask_load_epi32(__m256i s, __mmask8 k, void * sa);\n`"},{"name":"\u200b","value":"`VMOVDQA32 __m256i _mm256_maskz_load_epi32( __mmask8 k, void * sa);\n`"},{"name":"\u200b","value":"`VMOVDQA32 void _mm256_store_epi32(void * d, __m256i a);\n`"},{"name":"\u200b","value":"`VMOVDQA32 void _mm256_mask_store_epi32(void * d, __mmask8 k, __m256i a);\n`"},{"name":"\u200b","value":"`VMOVDQA32 __m128i _mm_mask_load_epi32(__m128i s, __mmask8 k, void * sa);\n`"},{"name":"\u200b","value":"(20 more)"},{"name":"CPUID Flags","value":"SSE2"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}