{"title":"VCVTPS2QQ â€” Convert Packed Single Precision Floating-Point Values to Packed Singed Quadword Integer Values","fields":[{"name":"Instruction Modes","value":"`VCVTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst`\n`VCVTPS2QQ ymm1 {k1}{z}, xmm2/m128/m32bcst`\n`VCVTPS2QQ zmm1 {k1}{z}, ymm2/m256/m32bcst{er}`"},{"name":"Description","value":"Converts eight packed single-precision floating-point values in the source operand to eight signed quadword integers in the destination operand."},{"name":"\u200b","value":"When a conversion is inexact, the value returned is rounded according to the rounding control bits in the MXCSR register or the embedded rounding control bits. If a converted result cannot be represented in the destination format, the floating-point invalid exception is raised, and if this exception is masked, the indefinite integer value (2w-1, where w represents the number of bits in the destination format) is returned."},{"name":"\u200b","value":"The source operand is a YMM/XMM/XMM (low 64- bits) register or a 256/128/64-bit memory location. The destination operation is a ZMM/YMM/XMM register conditionally updated with writemask k1."},{"name":"\u200b","value":"Note: EVEX.vvvv is reserved and must be 1111b otherwise instructions will #UD."},{"name":"C/C++ Intrinsics","value":"`VCVTPS2QQ __m512i _mm512_cvtps_epi64( __m512 a);\n`"},{"name":"\u200b","value":"`VCVTPS2QQ __m512i _mm512_mask_cvtps_epi64( __m512i s, __mmask16 k, __m512 a);\n`"},{"name":"\u200b","value":"`VCVTPS2QQ __m512i _mm512_maskz_cvtps_epi64( __mmask16 k, __m512 a);\n`"},{"name":"\u200b","value":"`VCVTPS2QQ __m512i _mm512_cvt_roundps_epi64( __m512 a, int r);\n`"},{"name":"\u200b","value":"`VCVTPS2QQ __m512i _mm512_mask_cvt_roundps_epi64( __m512i s, __mmask16 k, __m512 a, int r);\n`"},{"name":"\u200b","value":"`VCVTPS2QQ __m512i _mm512_maskz_cvt_roundps_epi64( __mmask16 k, __m512 a, int r);\n`"},{"name":"\u200b","value":"`VCVTPS2QQ __m256i _mm256_cvtps_epi64( __m256 a);\n`"},{"name":"\u200b","value":"`VCVTPS2QQ __m256i _mm256_mask_cvtps_epi64( __m256i s, __mmask8 k, __m256 a);\n`"},{"name":"\u200b","value":"`VCVTPS2QQ __m256i _mm256_maskz_cvtps_epi64( __mmask8 k, __m256 a);\n`"},{"name":"\u200b","value":"`VCVTPS2QQ __m128i _mm_cvtps_epi64( __m128 a);\n`"},{"name":"\u200b","value":"`VCVTPS2QQ __m128i _mm_mask_cvtps_epi64( __m128i s, __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VCVTPS2QQ __m128i _mm_maskz_cvtps_epi64( __mmask8 k, __m128 a);\n`"},{"name":"CPUID Flags","value":"AVX512VL AVX512DQ"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}