{"title":"MULSS â€” Multiply Scalar Single-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`MULSS xmm1,xmm2/m32`\n`VMULSS xmm1,xmm2, xmm3/m32`\n`VMULSS xmm1 {k1}{z}, xmm2, xmm3/m32 {er}`"},{"name":"Description","value":"Multiplies the low single-precision floating-point value from the second source operand by the low single-precision floating-point value in the first source operand, and stores the single-precision floating-point result in the destination operand. The second source operand can be an XMM register or a 32-bit memory location. The first source operand and the destination operands are XMM registers."},{"name":"\u200b","value":"128-bit Legacy SSE version: The first source operand and the destination operand are the same. Bits (MAXVL-1:32) of the corresponding YMM destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 and EVEX encoded version: The first source operand is an xmm register encoded by VEX.vvvv. The three high-order doublewords of the destination operand are copied from the first source operand. Bits (MAXVL-1:128) of the destination register are zeroed."},{"name":"\u200b","value":"EVEX encoded version: The low doubleword element of the destination operand is updated according to the writemask."},{"name":"\u200b","value":"Software should ensure VMULSS is encoded with VEX.L=0. Encoding VMULSS with VEX.L=1 may encounter unpredictable behavior across different processor generations."},{"name":"C/C++ Intriniscs","value":"`VMULSS __m128 _mm_mask_mul_ss(__m128 s, __mmask8 k, __m128 a, __m128 b);\n`"},{"name":"\u200b","value":"`VMULSS __m128 _mm_maskz_mul_ss( __mmask8 k, __m128 a, __m128 b);\n`"},{"name":"\u200b","value":"`VMULSS __m128 _mm_mul_round_ss( __m128 a, __m128 b, int);\n`"},{"name":"\u200b","value":"`VMULSS __m128 _mm_mask_mul_round_ss(__m128 s, __mmask8 k, __m128 a, __m128 b, int);\n`"},{"name":"\u200b","value":"`VMULSS __m128 _mm_maskz_mul_round_ss( __mmask8 k, __m128 a, __m128 b, int);\n`"},{"name":"\u200b","value":"`MULSS __m128 _mm_mul_ss(__m128 a, __m128 b)\n`"},{"name":"CPUID Flags","value":"SSE"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}