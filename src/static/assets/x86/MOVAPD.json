{"title":"MOVAPD â€” Move Aligned Packed Double-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`MOVAPD xmm1, xmm2/m128`\n`MOVAPD xmm2/m128, xmm1`\n`VMOVAPD xmm1, xmm2/m128`\n`VMOVAPD xmm2/m128, xmm1`\n`VMOVAPD ymm1, ymm2/m256`\n`VMOVAPD ymm2/m256, ymm1`\n`VMOVAPD xmm1 {k1}{z}, xmm2/m128`\n`VMOVAPD ymm1 {k1}{z}, ymm2/m256`\n`VMOVAPD zmm1 {k1}{z}, zmm2/m512`\n`VMOVAPD xmm2/m128 {k1}{z}, xmm1`\n`VMOVAPD ymm2/m256 {k1}{z}, ymm1`\n`VMOVAPD zmm2/m512 {k1}{z}, zmm1`"},{"name":"Description","value":"Moves 2, 4 or 8 double-precision floating-point values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load an XMM, YMM or ZMM register from an 128-bit, 256-bit or 512-bit memory location, to store the contents of an XMM, YMM or ZMM register into a 128-bit, 256-bit or 512-bit memory location, or to move data between two XMM, two YMM or two ZMM registers."},{"name":"\u200b","value":"When the source or destination operand is a memory operand, the operand must be aligned on a 16-byte (128-bit versions), 32-byte (256-bit version) or 64-byte (EVEX.512 encoded version) boundary or a general-protection exception (#GP) will be generated. For EVEX encoded versions, the operand must be aligned to the size of the memory operand. To move double-precision floating-point values to and from unaligned memory locations, use the VMOVUPD instruction."},{"name":"\u200b","value":"Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instructions will #UD."},{"name":"\u200b","value":"EVEX.512 encoded version:"},{"name":"\u200b","value":"Moves 512 bits of packed double-precision floating-point values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load a ZMM register from a 512-bit float64 memory location, to store the contents of a ZMM register into a 512-bit float64 memory location, or to move data between two ZMM registers. When the source or destination operand is a memory operand, the operand must be aligned on a 64-byte boundary or a general-protection exception (#GP) will be generated. To move single-precision floating-point values to and from unaligned memory locations, use the VMOVUPD instruction."},{"name":"\u200b","value":"VEX.256 and EVEX.256 encoded versions:"},{"name":"\u200b","value":"Moves 256 bits of packed double-precision floating-point values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load a YMM register from a 256-bit memory location, to store the contents of a YMM register into a 256-bit memory location, or to move data between two YMM registers. When the source or destination operand is a memory operand, the operand must be aligned on a 32-byte boundary or a general-protection exception (#GP) will be generated. To move double-precision floating-point values to and from unaligned memory locations, use the VMOVUPD instruction."},{"name":"\u200b","value":"128-bit versions:"},{"name":"\u200b","value":"Moves 128 bits of packed double-precision floating-point values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load an XMM register from a 128-bit memory location, to store the contents of an XMM register into a 128-bit memory location, or to move data between two XMM registers. When the source or destination operand is a memory operand, the operand must be aligned on a 16-byte boundary or a general-protection exception (#GP) will be generated. To move single-precision floating-point values to and from unaligned memory locations, use the VMOVUPD instruction."},{"name":"\u200b","value":"128-bit Legacy SSE version: Bits (MAXVL-1:128) of the corresponding ZMM destination register remain unchanged."},{"name":"\u200b","value":"(E)VEX.128 encoded version: Bits (MAXVL-1:128) of the destination ZMM register destination are zeroed."},{"name":"C/C++ Intriniscs","value":"`VMOVAPD __m512d _mm512_load_pd( void * m);\n`"},{"name":"\u200b","value":"`VMOVAPD __m512d _mm512_mask_load_pd(__m512d s, __mmask8 k, void * m);\n`"},{"name":"\u200b","value":"`VMOVAPD __m512d _mm512_maskz_load_pd( __mmask8 k, void * m);\n`"},{"name":"\u200b","value":"`VMOVAPD void _mm512_store_pd( void * d, __m512d a);\n`"},{"name":"\u200b","value":"`VMOVAPD void _mm512_mask_store_pd( void * d, __mmask8 k, __m512d a);\n`"},{"name":"\u200b","value":"`VMOVAPD __m256d _mm256_mask_load_pd(__m256d s, __mmask8 k, void * m);\n`"},{"name":"\u200b","value":"`VMOVAPD __m256d _mm256_maskz_load_pd( __mmask8 k, void * m);\n`"},{"name":"\u200b","value":"`VMOVAPD void _mm256_mask_store_pd( void * d, __mmask8 k, __m256d a);\n`"},{"name":"\u200b","value":"`VMOVAPD __m128d _mm_mask_load_pd(__m128d s, __mmask8 k, void * m);\n`"},{"name":"\u200b","value":"`VMOVAPD __m128d _mm_maskz_load_pd( __mmask8 k, void * m);\n`"},{"name":"\u200b","value":"`VMOVAPD void _mm_mask_store_pd( void * d, __mmask8 k, __m128d a);\n`"},{"name":"\u200b","value":"`MOVAPD __m256d _mm256_load_pd (double * p);\n`"},{"name":"\u200b","value":"`MOVAPD void _mm256_store_pd(double * p, __m256d a);\n`"},{"name":"\u200b","value":"`MOVAPD __m128d _mm_load_pd (double * p);\n`"},{"name":"\u200b","value":"`MOVAPD void _mm_store_pd(double * p, __m128d a);\n`"},{"name":"CPUID Flags","value":"SSE2"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}