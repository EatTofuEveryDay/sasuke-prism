{"title":"VEXTRACTI128/VEXTRACTI32x4/VEXTRACTI64x2/VEXTRACTI32x8/VEXTRACTI64x4 â€” Extract packed Integer Values","fields":[{"name":"Instruction Modes","value":"`ib VEXTRACTI128 xmm1/m128, ymm2, imm8`\n`ib VEXTRACTI32X4 xmm1/m128 {k1}{z}, ymm2, imm8`\n`ib VEXTRACTI32x4 xmm1/m128 {k1}{z}, zmm2, imm8`\n`ib VEXTRACTI64X2 xmm1/m128 {k1}{z}, ymm2, imm8`\n`ib VEXTRACTI64X2 xmm1/m128 {k1}{z}, zmm2, imm8`\n`ib VEXTRACTI32X8 ymm1/m256 {k1}{z}, zmm2, imm8`\n`ib VEXTRACTI64x4 ymm1/m256 {k1}{z}, zmm2, imm8`"},{"name":"Description","value":"VEXTRACTI128/VEXTRACTI32x4 and VEXTRACTI64x2 extract 128-bits of doubleword integer values from the source operand (the second operand) and store to the low 128-bit of the destination operand (the first operand). The 128-bit data extraction occurs at an 128-bit granular offset specified by imm8[0] (256-bit) or imm8[1:0] as the multiply factor. The destination may be either a vector register or an 128-bit memory location."},{"name":"\u200b","value":"VEXTRACTI32x4: The low 128-bit of the destination operand is updated at 32-bit granularity according to the writemask."},{"name":"\u200b","value":"VEXTRACTI64x2: The low 128-bit of the destination operand is updated at 64-bit granularity according to the writemask."},{"name":"\u200b","value":"VEXTRACTI32x8 and VEXTRACTI64x4 extract 256-bits of quadword integer values from the source operand (the second operand) and store to the low 256-bit of the destination operand (the first operand). The 256-bit data extraction occurs at an 256-bit granular offset specified by imm8[0] (256-bit) or imm8[0] as the multiply factor The destination may be either a vector register or a 256-bit memory location."},{"name":"\u200b","value":"VEXTRACTI32x8: The low 256-bit of the destination operand is updated at 32-bit granularity according to the writemask."},{"name":"\u200b","value":"VEXTRACTI64x4: The low 256-bit of the destination operand is updated at 64-bit granularity according to the writemask."},{"name":"\u200b","value":"VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instructions will #UD."},{"name":"\u200b","value":"The high 7 bits (6 bits in EVEX.512) of the immediate are ignored."},{"name":"\u200b","value":"If VEXTRACTI128 is encoded with VEX.L= 0, an attempt to execute the instruction encoded with VEX.L= 0 will cause an #UD exception."},{"name":"C/C++ Intrinsics","value":"`VEXTRACTI32x4 __m128i _mm512_extracti32x4_epi32(__m512i a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTI32x4 __m128i _mm512_mask_extracti32x4_epi32(__m128i s, __mmask8 k, __m512i a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTI32x4 __m128i _mm512_maskz_extracti32x4_epi32( __mmask8 k, __m512i a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTI32x4 __m128i _mm256_extracti32x4_epi32(__m256i a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTI32x4 __m128i _mm256_mask_extracti32x4_epi32(__m128i s, __mmask8 k, __m256i a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTI32x4 __m128i _mm256_maskz_extracti32x4_epi32( __mmask8 k, __m256i a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTI32x8 __m256i _mm512_extracti32x8_epi32(__m512i a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTI32x8 __m256i _mm512_mask_extracti32x8_epi32(__m256i s, __mmask8 k, __m512i a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTI32x8 __m256i _mm512_maskz_extracti32x8_epi32( __mmask8 k, __m512i a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTI64x2 __m128i _mm512_extracti64x2_epi64(__m512i a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTI64x2 __m128i _mm512_mask_extracti64x2_epi64(__m128i s, __mmask8 k, __m512i a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTI64x2 __m128i _mm512_maskz_extracti64x2_epi64( __mmask8 k, __m512i a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTI64x2 __m128i _mm256_extracti64x2_epi64(__m256i a, const int nidx);\n`"},{"name":"\u200b","value":"(6 more)"},{"name":"CPUID Flags","value":"AVX2"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}