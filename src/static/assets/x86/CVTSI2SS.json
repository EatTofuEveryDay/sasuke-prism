{"title":"CVTSI2SS — Convert Doubleword Integer to Scalar Single-Precision Floating-Point Value","fields":[{"name":"Instruction Modes","value":"`CVTSI2SS xmm1, r/m32`\n`CVTSI2SS xmm1, r/m64`\n`VCVTSI2SS xmm1, xmm2, r/m32`\n`VCVTSI2SS xmm1, xmm2, r/m64`\n`VCVTSI2SS xmm1, xmm2, r/m32{er}`\n`VCVTSI2SS xmm1, xmm2, r/m64{er}`"},{"name":"Description","value":"Converts a signed doubleword integer (or signed quadword integer if operand size is 64 bits) in the “convert-from” source operand to a single-precision floating-point value in the destination operand (first operand). The “convert-from” source operand can be a general-purpose register or a memory location. The destination operand is an XMM register. The result is stored in the low doubleword of the destination operand, and the upper three doublewords are left unchanged. When a conversion is inexact, the value returned is rounded according to the rounding control bits in the MXCSR register or the embedded rounding control bits."},{"name":"\u200b","value":"128-bit Legacy SSE version: In 64-bit mode, Use of the REX.W prefix promotes the instruction to use 64-bit input value. The “convert-from” source operand (the second operand) is a general-purpose register or memory location. Bits (MAXVL-1:32) of the corresponding destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 and EVEX encoded versions: The “convert-from” source operand (the third operand) can be a general-purpose register or a memory location. The first source and destination operands are XMM registers. Bits (127:32) of the XMM register destination are copied from corresponding bits in the first source operand. Bits (MAXVL-1:128) of the destination register are zeroed."},{"name":"\u200b","value":"EVEX encoded version: the converted result in written to the low doubleword element of the destination under the writemask."},{"name":"\u200b","value":"Software should ensure VCVTSI2SS is encoded with VEX.L=0. Encoding VCVTSI2SS with VEX.L=1 may encounter unpredictable behavior across different processor generations."},{"name":"C/C++ Intrinsics","value":"`VCVTSI2SS __m128 _mm_cvti32_ss(__m128 s, int a);\n`"},{"name":"\u200b","value":"`VCVTSI2SS __m128 _mm_cvt_roundi32_ss(__m128 s, int a, int r);\n`"},{"name":"\u200b","value":"`VCVTSI2SS __m128 _mm_cvti64_ss(__m128 s, __int64 a);\n`"},{"name":"\u200b","value":"`VCVTSI2SS __m128 _mm_cvt_roundi64_ss(__m128 s, __int64 a, int r);\n`"},{"name":"\u200b","value":"`CVTSI2SS __m128 _mm_cvtsi64_ss(__m128 s, __int64 a);\n`"},{"name":"\u200b","value":"`CVTSI2SS __m128 _mm_cvtsi32_ss(__m128 a, int b);\n`"},{"name":"CPUID Flags","value":"SSE"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}