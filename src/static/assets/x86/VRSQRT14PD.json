{"title":"VRSQRT14PD — Compute Approximate Reciprocals of Square Roots of Packed Float64 Values","fields":[{"name":"Instruction Modes","value":"`VRSQRT14PD xmm1 {k1}{z}, xmm2/m128/m64bcst`\n`VRSQRT14PD ymm1 {k1}{z}, ymm2/m256/m64bcst`\n`VRSQRT14PD zmm1 {k1}{z}, zmm2/m512/m64bcst`"},{"name":"Description","value":"This instruction performs a SIMD computation of the approximate reciprocals of the square roots of the eight packed double-precision floating-point values in the source operand (the second operand) and stores the packed double-precision floating-point results in the destination operand (the first operand) according to the writemask. The maximum relative error for this approximation is less than 2-14."},{"name":"\u200b","value":"EVEX.512 encoded version: The source operand can be a ZMM register, a 512-bit memory location, or a 512-bit vector broadcasted from a 64-bit memory location. The destination operand is a ZMM register, conditionally updated using writemask k1."},{"name":"\u200b","value":"EVEX.256 encoded version: The source operand is a YMM register, a 256-bit memory location, or a 256-bit vector broadcasted from a 64-bit memory location. The destination operand is a YMM register, conditionally updated using writemask k1."},{"name":"\u200b","value":"EVEX.128 encoded version: The source operand is a XMM register, a 128-bit memory location, or a 128-bit vector broadcasted from a 64-bit memory location. The destination operand is a XMM register, conditionally updated using writemask k1."},{"name":"\u200b","value":"The VRSQRT14PD instruction is not affected by the rounding control bits in the MXCSR register. When a source value is a 0.0, an ∞ with the sign of the source value is returned. When the source operand is an +∞ then +ZERO value is returned. A denormal source value is treated as zero only if DAZ bit is set in MXCSR. Otherwise it is treated correctly and performs the approximation with the specified masked response. When a source value is a negative value (other than 0.0) a floating-point QNaN_indefinite is returned. When a source value is an SNaN or QNaN, the SNaN is converted to a QNaN or the source QNaN is returned."},{"name":"\u200b","value":"MXCSR exception flags are not affected by this instruction and floating-point exceptions are not reported."},{"name":"\u200b","value":"Note: EVEX.vvvv is reserved and must be 1111b, otherwise instructions will #UD."},{"name":"C/C++ Intriniscs","value":"`VRSQRT14PD __m512d _mm512_rsqrt14_pd( __m512d a);\n`"},{"name":"\u200b","value":"`VRSQRT14PD __m512d _mm512_mask_rsqrt14_pd(__m512d s, __mmask8 k, __m512d a);\n`"},{"name":"\u200b","value":"`VRSQRT14PD __m512d _mm512_maskz_rsqrt14_pd( __mmask8 k, __m512d a);\n`"},{"name":"\u200b","value":"`VRSQRT14PD __m256d _mm256_rsqrt14_pd( __m256d a);\n`"},{"name":"\u200b","value":"`VRSQRT14PD __m256d _mm512_mask_rsqrt14_pd(__m256d s, __mmask8 k, __m256d a);\n`"},{"name":"\u200b","value":"`VRSQRT14PD __m256d _mm512_maskz_rsqrt14_pd( __mmask8 k, __m256d a);\n`"},{"name":"\u200b","value":"`VRSQRT14PD __m128d _mm_rsqrt14_pd( __m128d a);\n`"},{"name":"\u200b","value":"`VRSQRT14PD __m128d _mm_mask_rsqrt14_pd(__m128d s, __mmask8 k, __m128d a);\n`"},{"name":"\u200b","value":"`VRSQRT14PD __m128d _mm_maskz_rsqrt14_pd( __mmask8 k, __m128d a);\n`"},{"name":"CPUID Flags","value":"AVX512VL AVX512F"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}