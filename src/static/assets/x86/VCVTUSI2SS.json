{"title":"VCVTUSI2SS â€” Convert Unsigned Integer to Scalar Single-Precision Floating-Point Value","fields":[{"name":"Instruction Modes","value":"`VCVTUSI2SS xmm1, xmm2, r/m32{er}`\n`VCVTUSI2SS xmm1, xmm2, r/m64{er}`"},{"name":"Description","value":"Converts a unsigned doubleword integer (or unsigned quadword integer if operand size is 64 bits) in the source operand (second operand) to a single-precision floating-point value in the destination operand (first operand). The source operand can be a general-purpose register or a memory location. The destination operand is an XMM register. The result is stored in the low doubleword of the destination operand. When a conversion is inexact, the value returned is rounded according to the rounding control bits in the MXCSR register or the embedded rounding control bits."},{"name":"\u200b","value":"The second source operand can be a general-purpose register or a 32/64-bit memory location. The first source and destination operands are XMM registers. Bits (127:32) of the XMM register destination are copied from corresponding bits in the first source operand. Bits (MAXVL-1:128) of the destination register are zeroed."},{"name":"\u200b","value":"EVEX.W1 version: promotes the instruction to use 64-bit input value in 64-bit mode."},{"name":"C/C++ Intrinsics","value":"`VCVTUSI2SS __m128 _mm_cvtu32_ss( __m128 s, unsigned a);\n`"},{"name":"\u200b","value":"`VCVTUSI2SS __m128 _mm_cvt_roundu32_ss( __m128 s, unsigned a, int r);\n`"},{"name":"\u200b","value":"`VCVTUSI2SS __m128 _mm_cvtu64_ss( __m128 s, unsigned __int64 a);\n`"},{"name":"\u200b","value":"`VCVTUSI2SS __m128 _mm_cvt_roundu64_ss( __m128 s, unsigned __int64 a, int r);\n`"},{"name":"CPUID Flags","value":"AVX512F"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}