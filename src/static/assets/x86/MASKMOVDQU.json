{"title":"MASKMOVDQU — Store Selected Bytes of Double Quadword","fields":[{"name":"Instruction Modes","value":"`MASKMOVDQU xmm1, xmm2`\n`VMASKMOVDQU xmm1, xmm2`"},{"name":"Description","value":"Stores selected bytes from the source operand (first operand) into an 128-bit memory location. The mask operand (second operand) selects which bytes from the source operand are written to memory. The source and mask operands are XMM registers. The memory location specified by the effective address in the DI/EDI/RDI register (the default segment register is DS, but this may be overridden with a segment-override prefix). The memory location does not need to be aligned on a natural boundary. (The size of the store address depends on the address-size attribute.)"},{"name":"\u200b","value":"The most significant bit in each byte of the mask operand determines whether the corresponding byte in the source operand is written to the corresponding byte location in memory: 0 indicates no write and 1 indicates write."},{"name":"\u200b","value":"The MASKMOVDQU instruction generates a non-temporal hint to the processor to minimize cache pollution. The non-temporal hint is implemented by using a write combining (WC) memory type protocol (see “Caching of Temporal vs. Non-Temporal Data” in Chapter 10, of the Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 1). Because the WC protocol uses a weakly-ordered memory consistency model, a fencing operation implemented with the SFENCE or MFENCE instruction should be used in conjunction with MASKMOVDQU instructions if multiple processors might use different memory types to read/write the destination memory locations."},{"name":"\u200b","value":"Behavior with a mask of all 0s is as follows:"},{"name":"C/C++ Intrinsics","value":"`void _mm_maskmoveu_si128(__m128i d, __m128i n, char * p)\n`"},{"name":"CPUID Flags","value":"SSE2"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}