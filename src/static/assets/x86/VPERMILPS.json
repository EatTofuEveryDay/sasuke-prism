{"title":"VPERMILPS â€” Permute In-Lane of Quadruples of Single-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`VPERMILPS xmm1, xmm2, xmm3/m128`\n`ib VPERMILPS xmm1, xmm2/m128, imm8`\n`VPERMILPS ymm1, ymm2, ymm3/m256`\n`ib VPERMILPS ymm1, ymm2/m256, imm8`\n`VPERMILPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`VPERMILPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VPERMILPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst`\n`ib VPERMILPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8`\n`ib VPERMILPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8`\n`ibVPERMILPS zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8`"},{"name":"Description","value":"(variable control version)"},{"name":"\u200b","value":"Permute quadruples of single-precision floating-point values in the first source operand (second operand), each quadruplet using a 2-bit control field in the corresponding dword element of the second source operand. Permuted results are stored in the destination operand (first operand)."},{"name":"\u200b","value":"The 2-bit control fields are located at the low two bits of each dword element (see Figure 5-26). Each control determines which of the source element in an input quadruple is selected for the destination element. Each quadruple of source elements must lie in the same 128-bit region as the destination."},{"name":"\u200b","value":"EVEX version: The second source operand (third operand) is a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32-bit memory location. Permuted results are written to the destination under the writemask."},{"name":"C/C++ Intrinsics","value":"`VPERMILPS __m512 _mm512_permute_ps( __m512 a, int imm);\n`"},{"name":"\u200b","value":"`VPERMILPS __m512 _mm512_mask_permute_ps(__m512 s, __mmask16 k, __m512 a, int imm);\n`"},{"name":"\u200b","value":"`VPERMILPS __m512 _mm512_maskz_permute_ps( __mmask16 k, __m512 a, int imm);\n`"},{"name":"\u200b","value":"`VPERMILPS __m256 _mm256_mask_permute_ps(__m256 s, __mmask8 k, __m256 a, int imm);\n`"},{"name":"\u200b","value":"`VPERMILPS __m256 _mm256_maskz_permute_ps( __mmask8 k, __m256 a, int imm);\n`"},{"name":"\u200b","value":"`VPERMILPS __m128 _mm_mask_permute_ps(__m128 s, __mmask8 k, __m128 a, int imm);\n`"},{"name":"\u200b","value":"`VPERMILPS __m128 _mm_maskz_permute_ps( __mmask8 k, __m128 a, int imm);\n`"},{"name":"\u200b","value":"`VPERMILPS __m512 _mm512_permutevar_ps( __m512i i, __m512 a);\n`"},{"name":"\u200b","value":"`VPERMILPS __m512 _mm512_mask_permutevar_ps(__m512 s, __mmask16 k, __m512i i, __m512 a);\n`"},{"name":"\u200b","value":"`VPERMILPS __m512 _mm512_maskz_permutevar_ps( __mmask16 k, __m512i i, __m512 a);\n`"},{"name":"\u200b","value":"`VPERMILPS __m256 _mm256_mask_permutevar_ps(__m256 s, __mmask8 k, __m256 i, __m256 a);\n`"},{"name":"\u200b","value":"`VPERMILPS __m256 _mm256_maskz_permutevar_ps( __mmask8 k, __m256 i, __m256 a);\n`"},{"name":"\u200b","value":"`VPERMILPS __m128 _mm_mask_permutevar_ps(__m128 s, __mmask8 k, __m128 i, __m128 a);\n`"},{"name":"\u200b","value":"`VPERMILPS __m128 _mm_maskz_permutevar_ps( __mmask8 k, __m128 i, __m128 a);\n`"},{"name":"\u200b","value":"`VPERMILPS __m128 _mm_permute_ps (__m128 a, int control);\n`"},{"name":"\u200b","value":"`VPERMILPS __m256 _mm256_permute_ps (__m256 a, int control);\n`"},{"name":"\u200b","value":"`VPERMILPS __m128 _mm_permutevar_ps (__m128 a, __m128i control);\n`"},{"name":"\u200b","value":"`VPERMILPS __m256 _mm256_permutevar_ps (__m256 a, __m256i control);\n`"},{"name":"CPUID Flags","value":"AVX"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}