{"title":"XORPS â€” Bitwise Logical XOR of Packed Single Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`XORPS xmm1, xmm2/m128`\n`VXORPS xmm1,xmm2, xmm3/m128`\n`VXORPS ymm1, ymm2, ymm3/m256`\n`VXORPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`VXORPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VXORPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst`"},{"name":"Description","value":"Performs a bitwise logical XOR of the four, eight or sixteen packed single-precision floating-point values from the first source operand and the second source operand, and stores the result in the destination operand"},{"name":"\u200b","value":"EVEX.512 encoded version: The first source operand is a ZMM register. The second source operand can be a ZMM register or a vector memory location. The destination operand is a ZMM register conditionally updated with writemask k1."},{"name":"\u200b","value":"VEX.256 and EVEX.256 encoded versions: The first source operand is a YMM register. The second source operand is a YMM register or a 256-bit memory location. The destination operand is a YMM register (conditionally updated with writemask k1 in case of EVEX). The upper bits (MAXVL-1:256) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"VEX.128 and EVEX.128 encoded versions: The first source operand is an XMM register. The second source operand is an XMM register or 128-bit memory location. The destination operand is an XMM register (conditionally updated with writemask k1 in case of EVEX). The upper bits (MAXVL-1:128) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"128-bit Legacy SSE version: The second source can be an XMM register or an 128-bit memory location. The destination is not distinct from the first source XMM register and the upper bits (MAXVL-1:128) of the corresponding register destination are unmodified."},{"name":"C/C++ Intrinsics","value":"`VXORPS __m512 _mm512_xor_ps (__m512 a, __m512 b);\n`"},{"name":"\u200b","value":"`VXORPS __m512 _mm512_mask_xor_ps (__m512 a, __mmask16 m, __m512 b);\n`"},{"name":"\u200b","value":"`VXORPS __m512 _mm512_maskz_xor_ps (__mmask16 m, __m512 a);\n`"},{"name":"\u200b","value":"`VXORPS __m256 _mm256_xor_ps (__m256 a, __m256 b);\n`"},{"name":"\u200b","value":"`VXORPS __m256 _mm256_mask_xor_ps (__m256 a, __mmask8 m, __m256 b);\n`"},{"name":"\u200b","value":"`VXORPS __m256 _mm256_maskz_xor_ps (__mmask8 m, __m256 a);\n`"},{"name":"\u200b","value":"`XORPS __m128 _mm_xor_ps (__m128 a, __m128 b);\n`"},{"name":"\u200b","value":"`VXORPS __m128 _mm_mask_xor_ps (__m128 a, __mmask8 m, __m128 b);\n`"},{"name":"\u200b","value":"`VXORPS __m128 _mm_maskz_xor_ps (__mmask8 m, __m128 a);\n`"},{"name":"CPUID Flags","value":"SSE"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}