{"title":"VFMSUB132SS/VFMSUB213SS/VFMSUB231SS â€” Fused Multiply-Subtract of Scalar Single- Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`VFMSUB132SS xmm1, xmm2, xmm3/m32`\n`VFMSUB213SS xmm1, xmm2, xmm3/m32`\n`VFMSUB231SS xmm1, xmm2, xmm3/m32`\n`VFMSUB132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}`\n`VFMSUB213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}`\n`VFMSUB231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}`"},{"name":"Description","value":"Performs a SIMD multiply-subtract computation on the low packed single-precision floating-point values using three source operands and writes the multiply-subtract result in the destination operand. The destination operand is also the first source operand. The second operand must be a XMM register. The third source operand can be a XMM register or a 32-bit memory location."},{"name":"\u200b","value":"VFMSUB132SS: Multiplies the low packed single-precision floating-point value from the first source operand to the low packed single-precision floating-point value in the third source operand. From the infinite precision intermediate result, subtracts the low packed single-precision floating-point values in the second source operand, performs rounding and stores the resulting packed single-precision floating-point value to the destination operand (first source operand)."},{"name":"\u200b","value":"VFMSUB213SS: Multiplies the low packed single-precision floating-point value from the second source operand to the low packed single-precision floating-point value in the first source operand. From the infinite precision intermediate result, subtracts the low packed single-precision floating-point value in the third source operand, performs rounding and stores the resulting packed single-precision floating-point value to the destination operand (first source operand)."},{"name":"\u200b","value":"VFMSUB231SS: Multiplies the low packed single-precision floating-point value from the second source to the low packed single-precision floating-point value in the third source operand. From the infinite precision intermediate result, subtracts the low packed single-precision floating-point value in the first source operand, performs rounding and stores the resulting packed single-precision floating-point value to the destination operand (first source operand)."},{"name":"\u200b","value":"VEX.128 and EVEX encoded version: The destination operand (also first source operand) is encoded in reg_field. The second source operand is encoded in VEX.vvvv/EVEX.vvvv. The third source operand is encoded in rm_field. Bits 127:32 of the destination are unchanged. Bits MAXVL-1:128 of the destination register are zeroed."},{"name":"\u200b","value":"EVEX encoded version: The low doubleword element of the destination is updated according to the writemask."},{"name":"\u200b","value":"Compiler tools may optionally support a complementary mnemonic for each instruction mnemonic listed in the opcode/instruction column of the summary table. The behavior of the complementary mnemonic in situations involving NANs are governed by the definition of the instruction mnemonic defined in the opcode/instruction column."},{"name":"C/C++ Intrinsics","value":"`VFMSUBxxxSS __m128 _mm_fmsub_round_ss(__m128 a, __m128 b, __m128 c, int r);\n`"},{"name":"\u200b","value":"`VFMSUBxxxSS __m128 _mm_mask_fmsub_ss(__m128 a, __mmask8 k, __m128 b, __m128 c);\n`"},{"name":"\u200b","value":"`VFMSUBxxxSS __m128 _mm_maskz_fmsub_ss(__mmask8 k, __m128 a, __m128 b, __m128 c);\n`"},{"name":"\u200b","value":"`VFMSUBxxxSS __m128 _mm_mask3_fmsub_ss(__m128 a, __m128 b, __m128 c, __mmask8 k);\n`"},{"name":"\u200b","value":"`VFMSUBxxxSS __m128 _mm_mask_fmsub_round_ss(__m128 a, __mmask8 k, __m128 b, __m128 c, int r);\n`"},{"name":"\u200b","value":"`VFMSUBxxxSS __m128 _mm_maskz_fmsub_round_ss(__mmask8 k, __m128 a, __m128 b, __m128 c, int r);\n`"},{"name":"\u200b","value":"`VFMSUBxxxSS __m128 _mm_mask3_fmsub_round_ss(__m128 a, __m128 b, __m128 c, __mmask8 k, int r);\n`"},{"name":"\u200b","value":"`VFMSUBxxxSS __m128 _mm_fmsub_ss (__m128 a, __m128 b, __m128 c);\n`"},{"name":"CPUID Flags","value":"FMA"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}