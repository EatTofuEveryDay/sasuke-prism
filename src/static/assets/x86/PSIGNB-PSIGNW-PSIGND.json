{"title":"PSIGNB/PSIGNW/PSIGND — Packed SIGN","fields":[{"name":"Instruction Modes","value":"`PSIGNB mm1, mm2/m64`\n`PSIGNB xmm1, xmm2/m128`\n`PSIGNW mm1, mm2/m64`\n`PSIGNW xmm1, xmm2/m128`\n`PSIGND mm1, mm2/m64`\n`PSIGND xmm1, xmm2/m128`\n`VPSIGNB xmm1, xmm2, xmm3/m128`\n`VPSIGNW xmm1, xmm2, xmm3/m128`\n`VPSIGND xmm1, xmm2, xmm3/m128`\n`VPSIGNB ymm1, ymm2, ymm3/m256`\n`VPSIGNW ymm1, ymm2, ymm3/m256`\n`VPSIGND ymm1, ymm2, ymm3/m256`\n`NOTES: 1. See note in Section 2.4, “AVX and SSE Instruction Exception Specification” in the Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 2A and Section 22.25.3, “Exception Conditions of Legacy SIMD Instructions Operating on MMX Registers” in the Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 3A.`"},{"name":"Description","value":"(V)PSIGNB/(V)PSIGNW/(V)PSIGND negates each data element of the destination operand (the first operand) if the signed integer value of the corresponding data element in the source operand (the second operand) is less than zero. If the signed integer value of a data element in the source operand is positive, the corresponding data element in the destination operand is unchanged. If a data element in the source operand is zero, the corresponding data element in the destination operand is set to zero."},{"name":"\u200b","value":"(V)PSIGNB operates on signed bytes. (V)PSIGNW operates on 16-bit signed words. (V)PSIGND operates on signed 32-bit integers. When the source operand is a 128bit memory operand, the operand must be aligned on a 16-byte boundary or a general-protection exception (#GP) will be generated."},{"name":"\u200b","value":"Legacy SSE instructions: Both operands can be MMX registers. In 64-bit mode, use the REX prefix to access additional registers."},{"name":"\u200b","value":"128-bit Legacy SSE version: The first source and destination operands are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the corresponding YMM destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 encoded version: The first source and destination operands are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the destination YMM register are zeroed. VEX.L must be 0, otherwise instructions will #UD."},{"name":"\u200b","value":"VEX.256 encoded version: The first source and destination operands are YMM registers. The second source operand is an YMM register or a 256-bit memory location."},{"name":"C/C++ Intrinsics","value":"`PSIGNB: __m64 _mm_sign_pi8 (__m64 a, __m64 b)\n`"},{"name":"\u200b","value":"`(V)PSIGNB: __m128i _mm_sign_epi8 (__m128i a, __m128i b)\n`"},{"name":"\u200b","value":"`VPSIGNB: __m256i _mm256_sign_epi8 (__m256i a, __m256i b)\n`"},{"name":"\u200b","value":"`PSIGNW: __m64 _mm_sign_pi16 (__m64 a, __m64 b)\n`"},{"name":"\u200b","value":"`(V)PSIGNW: __m128i _mm_sign_epi16 (__m128i a, __m128i b)\n`"},{"name":"\u200b","value":"`VPSIGNW: __m256i _mm256_sign_epi16 (__m256i a, __m256i b)\n`"},{"name":"\u200b","value":"`PSIGND: __m64 _mm_sign_pi32 (__m64 a, __m64 b)\n`"},{"name":"\u200b","value":"`(V)PSIGND: __m128i _mm_sign_epi32 (__m128i a, __m128i b)\n`"},{"name":"\u200b","value":"`VPSIGND: __m256i _mm256_sign_epi32 (__m256i a, __m256i b)\n`"},{"name":"CPUID Flags","value":"SSSE3"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}