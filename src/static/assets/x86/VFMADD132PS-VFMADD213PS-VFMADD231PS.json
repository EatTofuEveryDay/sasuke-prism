{"title":"VFMADD132PS/VFMADD213PS/VFMADD231PS â€” Fused Multiply-Add of Packed Single- Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`VFMADD132PS xmm1, xmm2, xmm3/m128`\n`VFMADD213PS xmm1, xmm2, xmm3/m128`\n`VFMADD231PS xmm1, xmm2, xmm3/m128`\n`VFMADD132PS ymm1, ymm2, ymm3/m256`\n`VFMADD213PS ymm1, ymm2, ymm3/m256`\n`VFMADD231PS ymm1, ymm2, ymm3/m256`\n`VFMADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`VFMADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`VFMADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`VFMADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VFMADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VFMADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VFMADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}`\n`VFMADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}`\n`VFMADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}`"},{"name":"Description","value":"Performs a set of SIMD multiply-add computation on packed single-precision floating-point values using three source operands and writes the multiply-add results in the destination operand. The destination operand is also the first source operand. The second operand must be a SIMD register. The third source operand can be a SIMD register or a memory location."},{"name":"\u200b","value":"VFMADD132PS: Multiplies the four, eight or sixteen packed single-precision floating-point values from the first source operand to the four, eight or sixteen packed single-precision floating-point values in the third source operand, adds the infinite precision intermediate result to the four, eight or sixteen packed single-precision floating-point values in the second source operand, performs rounding and stores the resulting four, eight or sixteen packed single-precision floating-point values to the destination operand (first source operand)."},{"name":"\u200b","value":"VFMADD213PS: Multiplies the four, eight or sixteen packed single-precision floating-point values from the second source operand to the four, eight or sixteen packed single-precision floating-point values in the first source operand, adds the infinite precision intermediate result to the four, eight or sixteen packed single-precision floating-point values in the third source operand, performs rounding and stores the resulting the four, eight or sixteen packed single-precision floating-point values to the destination operand (first source operand)."},{"name":"\u200b","value":"VFMADD231PS: Multiplies the four, eight or sixteen packed single-precision floating-point values from the second source operand to the four, eight or sixteen packed single-precision floating-point values in the third source operand, adds the infinite precision intermediate result to the four, eight or sixteen packed single-precision floating-point values in the first source operand, performs rounding and stores the resulting four, eight or sixteen packed single-precision floating-point values to the destination operand (first source operand)."},{"name":"\u200b","value":"EVEX encoded versions: The destination operand (also first source operand) is a ZMM register and encoded in reg_field. The second source operand is a ZMM register and encoded in EVEX.vvvv. The third source operand is a ZMM register, a 512-bit memory location, or a 512-bit vector broadcasted from a 32-bit memory location. The destination operand is conditionally updated with write mask k1."},{"name":"\u200b","value":"VEX.256 encoded version: The destination operand (also first source operand) is a YMM register and encoded in reg_field. The second source operand is a YMM register and encoded in VEX.vvvv. The third source operand is a YMM register or a 256-bit memory location and encoded in rm_field."},{"name":"\u200b","value":"VEX.128 encoded version: The destination operand (also first source operand) is a XMM register and encoded in reg_field. The second source operand is a XMM register and encoded in VEX.vvvv. The third source operand is a XMM register or a 128-bit memory location and encoded in rm_field. The upper 128 bits of the YMM destination register are zeroed."},{"name":"C/C++ Intrinsics","value":"`VFMADDxxxPS __m512 _mm512_fmadd_ps(__m512 a, __m512 b, __m512 c);\n`"},{"name":"\u200b","value":"`VFMADDxxxPS __m512 _mm512_fmadd_round_ps(__m512 a, __m512 b, __m512 c, int r);\n`"},{"name":"\u200b","value":"`VFMADDxxxPS __m512 _mm512_mask_fmadd_ps(__m512 a, __mmask16 k, __m512 b, __m512 c);\n`"},{"name":"\u200b","value":"`VFMADDxxxPS __m512 _mm512_maskz_fmadd_ps(__mmask16 k, __m512 a, __m512 b, __m512 c);\n`"},{"name":"\u200b","value":"`VFMADDxxxPS __m512 _mm512_mask3_fmadd_ps(__m512 a, __m512 b, __m512 c, __mmask16 k);\n`"},{"name":"\u200b","value":"`VFMADDxxxPS __m512 _mm512_mask_fmadd_round_ps(__m512 a, __mmask16 k, __m512 b, __m512 c, int r);\n`"},{"name":"\u200b","value":"`VFMADDxxxPS __m512 _mm512_maskz_fmadd_round_ps(__mmask16 k, __m512 a, __m512 b, __m512 c, int r);\n`"},{"name":"\u200b","value":"`VFMADDxxxPS __m512 _mm512_mask3_fmadd_round_ps(__m512 a, __m512 b, __m512 c, __mmask16 k, int r);\n`"},{"name":"\u200b","value":"`VFMADDxxxPS __m256 _mm256_mask_fmadd_ps(__m256 a, __mmask8 k, __m256 b, __m256 c);\n`"},{"name":"\u200b","value":"`VFMADDxxxPS __m256 _mm256_maskz_fmadd_ps(__mmask8 k, __m256 a, __m256 b, __m256 c);\n`"},{"name":"\u200b","value":"`VFMADDxxxPS __m256 _mm256_mask3_fmadd_ps(__m256 a, __m256 b, __m256 c, __mmask8 k);\n`"},{"name":"\u200b","value":"`VFMADDxxxPS __m128 _mm_mask_fmadd_ps(__m128 a, __mmask8 k, __m128 b, __m128 c);\n`"},{"name":"\u200b","value":"`VFMADDxxxPS __m128 _mm_maskz_fmadd_ps(__mmask8 k, __m128 a, __m128 b, __m128 c);\n`"},{"name":"\u200b","value":"`VFMADDxxxPS __m128 _mm_mask3_fmadd_ps(__m128 a, __m128 b, __m128 c, __mmask8 k);\n`"},{"name":"\u200b","value":"`VFMADDxxxPS __m128 _mm_fmadd_ps (__m128 a, __m128 b, __m128 c);\n`"},{"name":"\u200b","value":"(1 more)"},{"name":"CPUID Flags","value":"FMA"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}