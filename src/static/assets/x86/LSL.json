{"title":"LSL — Load Segment Limit","fields":[{"name":"Instruction Modes","value":"`LSL r16, r16/m16`\n`LSL r32, r32/m16*`\n`LSL r64, r32/m16*`"},{"name":"Description","value":"Loads the unscrambled segment limit from the segment descriptor specified with the second operand (source operand) into the first operand (destination operand) and sets the ZF flag in the EFLAGS register. The source operand (which can be a register or a memory location) contains the segment selector for the segment descriptor being accessed. The destination operand is a general-purpose register."},{"name":"\u200b","value":"The processor performs access checks as part of the loading process. Once loaded in the destination register, software can compare the segment limit with the offset of a pointer."},{"name":"\u200b","value":"The segment limit is a 20-bit value contained in bytes 0 and 1 and in the first 4 bits of byte 6 of the segment descriptor. If the descriptor has a byte granular segment limit (the granularity flag is set to 0), the destination operand is loaded with a byte granular value (byte limit). If the descriptor has a page granular segment limit (the granularity flag is set to 1), the LSL instruction will translate the page granular limit (page limit) into a byte limit before loading it into the destination operand. The translation is performed by shifting the 20-bit “raw” limit left 12 bits and filling the low-order 12 bits with 1s."},{"name":"\u200b","value":"When the operand size is 32 bits, the 32-bit byte limit is stored in the destination operand. When the operand size is 16 bits, a valid 32-bit limit is computed; however, the upper 16 bits are truncated and only the low-order 16 bits are loaded into the destination operand."},{"name":"\u200b","value":"This instruction performs the following checks before it loads the segment limit into the destination register:"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}