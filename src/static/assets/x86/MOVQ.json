{"title":"MOVQ â€” Move Quadword","fields":[{"name":"Instruction Modes","value":"`MOVQ mm, mm/m64`\n`MOVQ mm/m64, mm`\n`MOVQ xmm1, xmm2/m64`\n`VMOVQ xmm1, xmm2/m64`\n`VMOVQ xmm1, xmm2/m64`\n`MOVQ xmm2/m64, xmm1`\n`VMOVQ xmm1/m64, xmm2`\n`VMOVQ xmm1/m64, xmm2`"},{"name":"Description","value":"Copies a quadword from the source operand (second operand) to the destination operand (first operand). The source and destination operands can be MMX technology registers, XMM registers, or 64-bit memory locations. This instruction can be used to move a quadword between two MMX technology registers or between an MMX technology register and a 64-bit memory location, or to move data between two XMM registers or between an XMM register and a 64-bit memory location. The instruction cannot be used to transfer data between memory locations."},{"name":"\u200b","value":"When the source operand is an XMM register, the low quadword is moved; when the destination operand is an XMM register, the quadword is stored to the low quadword of the register, and the high quadword is cleared to all 0s."},{"name":"\u200b","value":"In 64-bit mode and if not encoded using VEX/EVEX, use of the REX prefix in the form of REX.R permits this instruction to access additional registers (XMM8-XMM15)."},{"name":"\u200b","value":"Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b, otherwise instructions will #UD."},{"name":"\u200b","value":"If VMOVQ is encoded with VEX.L= 1, an attempt to execute the instruction encoded with VEX.L= 1 will cause an #UD exception."},{"name":"C/C++ Intrinsics","value":"`VMOVQ __m128i _mm_loadu_si64( void * s);\n`"},{"name":"\u200b","value":"`VMOVQ void _mm_storeu_si64( void * d, __m128i s);\n`"},{"name":"\u200b","value":"`MOVQ m128i _mm_move_epi64(__m128i a)\n`"},{"name":"CPUID Flags","value":"MMX"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}