{"title":"VSCALEFPD — Scale Packed Float64 Values With Float64 Values","fields":[{"name":"Instruction Modes","value":"`VSCALEFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VSCALEFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VSCALEFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}`"},{"name":"Description","value":"Performs a floating-point scale of the packed double-precision floating-point values in the first source operand by multiplying it by 2 power of the double-precision floating-point values in second source operand."},{"name":"\u200b","value":"The equation of this operation is given by:"},{"name":"\u200b","value":"zmm1 := zmm2*2floor(zmm3)."},{"name":"\u200b","value":"Floor(zmm3) means maximum integer value ≤ zmm3."},{"name":"\u200b","value":"If the result cannot be represented in double precision, then the proper overflow response (for positive scaling operand), or the proper underflow response (for negative scaling operand) is issued. The overflow and underflow responses are dependent on the rounding mode (for IEEE-compliant rounding), as well as on other settings in MXCSR (exception mask bits, FTZ bit), and on the SAE bit."},{"name":"\u200b","value":"The first source operand is a ZMM/YMM/XMM register. The second source operand is a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 64-bit memory location. The destination operand is a ZMM/YMM/XMM register conditionally updated with writemask k1."},{"name":"\u200b","value":"Handling of special-case input values are listed in Table 5-30 and Table 5-31."},{"name":"C/C++ Intrinsics","value":"`VSCALEFPD __m512d _mm512_scalef_round_pd(__m512d a, __m512d b, int rounding);\n`"},{"name":"\u200b","value":"`VSCALEFPD __m512d _mm512_mask_scalef_round_pd(__m512d s, __mmask8 k, __m512d a, __m512d b, int rounding);\n`"},{"name":"\u200b","value":"`VSCALEFPD __m512d _mm512_maskz_scalef_round_pd(__mmask8 k, __m512d a, __m512d b, int rounding);\n`"},{"name":"\u200b","value":"`VSCALEFPD __m512d _mm512_scalef_pd(__m512d a, __m512d b);\n`"},{"name":"\u200b","value":"`VSCALEFPD __m512d _mm512_mask_scalef_pd(__m512d s, __mmask8 k, __m512d a, __m512d b);\n`"},{"name":"\u200b","value":"`VSCALEFPD __m512d _mm512_maskz_scalef_pd(__mmask8 k, __m512d a, __m512d b);\n`"},{"name":"\u200b","value":"`VSCALEFPD __m256d _mm256_scalef_pd(__m256d a, __m256d b);\n`"},{"name":"\u200b","value":"`VSCALEFPD __m256d _mm256_mask_scalef_pd(__m256d s, __mmask8 k, __m256d a, __m256d b);\n`"},{"name":"\u200b","value":"`VSCALEFPD __m256d _mm256_maskz_scalef_pd(__mmask8 k, __m256d a, __m256d b);\n`"},{"name":"\u200b","value":"`VSCALEFPD __m128d _mm_scalef_pd(__m128d a, __m128d b);\n`"},{"name":"\u200b","value":"`VSCALEFPD __m128d _mm_mask_scalef_pd(__m128d s, __mmask8 k, __m128d a, __m128d b);\n`"},{"name":"\u200b","value":"`VSCALEFPD __m128d _mm_maskz_scalef_pd(__mmask8 k, __m128d a, __m128d b);\n`"},{"name":"CPUID Flags","value":"AVX512VL AVX512F"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}