{"title":"CVTTPS2DQ â€” Convert with Truncation Packed Single-Precision Floating-Point Values to Packed Signed Doubleword Integer Values","fields":[{"name":"Instruction Modes","value":"`CVTTPS2DQ xmm1, xmm2/m128`\n`VCVTTPS2DQ xmm1, xmm2/m128`\n`VCVTTPS2DQ ymm1, ymm2/m256`\n`VCVTTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst`\n`VCVTTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst`\n`VCVTTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst {sae}`"},{"name":"Description","value":"Converts four, eight or sixteen packed single-precision floating-point values in the source operand to four, eight or sixteen signed doubleword integers in the destination operand."},{"name":"\u200b","value":"When a conversion is inexact, a truncated (round toward zero) value is returned. If a converted result is larger than the maximum signed doubleword integer, the floating-point invalid exception is raised, and if this exception is masked, the indefinite integer value (80000000H) is returned."},{"name":"\u200b","value":"EVEX encoded versions: The source operand is a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32-bit memory location. The destination operand is a ZMM/YMM/XMM register conditionally updated with writemask k1."},{"name":"\u200b","value":"VEX.256 encoded version: The source operand is a YMM register or 256- bit memory location. The destination operand is a YMM register. The upper bits (MAXVL-1:256) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"VEX.128 encoded version: The source operand is an XMM register or 128- bit memory location. The destination operand is a XMM register. The upper bits (MAXVL-1:128) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"128-bit Legacy SSE version: The source operand is an XMM register or 128- bit memory location. The destination operand is an XMM register. The upper bits (MAXVL-1:128) of the corresponding ZMM register destination are unmodified."},{"name":"\u200b","value":"Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instructions will #UD."},{"name":"C/C++ Intriniscs","value":"`VCVTTPS2DQ __m512i _mm512_cvttps_epi32( __m512 a);\n`"},{"name":"\u200b","value":"`VCVTTPS2DQ __m512i _mm512_mask_cvttps_epi32( __m512i s, __mmask16 k, __m512 a);\n`"},{"name":"\u200b","value":"`VCVTTPS2DQ __m512i _mm512_maskz_cvttps_epi32( __mmask16 k, __m512 a);\n`"},{"name":"\u200b","value":"`VCVTTPS2DQ __m512i _mm512_cvtt_roundps_epi32( __m512 a, int sae);\n`"},{"name":"\u200b","value":"`VCVTTPS2DQ __m512i _mm512_mask_cvtt_roundps_epi32( __m512i s, __mmask16 k, __m512 a, int sae);\n`"},{"name":"\u200b","value":"`VCVTTPS2DQ __m512i _mm512_maskz_cvtt_roundps_epi32( __mmask16 k, __m512 a, int sae);\n`"},{"name":"\u200b","value":"`VCVTTPS2DQ __m256i _mm256_mask_cvttps_epi32( __m256i s, __mmask8 k, __m256 a);\n`"},{"name":"\u200b","value":"`VCVTTPS2DQ __m256i _mm256_maskz_cvttps_epi32( __mmask8 k, __m256 a);\n`"},{"name":"\u200b","value":"`VCVTTPS2DQ __m128i _mm_mask_cvttps_epi32( __m128i s, __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VCVTTPS2DQ __m128i _mm_maskz_cvttps_epi32( __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VCVTTPS2DQ __m256i _mm256_cvttps_epi32 (__m256 a)\n`"},{"name":"\u200b","value":"`CVTTPS2DQ __m128i _mm_cvttps_epi32 (__m128 a)\n`"},{"name":"CPUID Flags","value":"SSE2"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}