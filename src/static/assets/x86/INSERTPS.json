{"title":"INSERTPS â€” Insert Scalar Single-Precision Floating-Point Value","fields":[{"name":"Instruction Modes","value":"`ib INSERTPS xmm1, xmm2/m32, imm8`\n`ib VINSERTPS xmm1, xmm2, xmm3/m32, imm8`\n`ib VINSERTPS xmm1, xmm2, xmm3/m32, imm8`"},{"name":"Description","value":"(register source form)"},{"name":"\u200b","value":"Copy a single-precision scalar floating-point element into a 128-bit vector register. The immediate operand has three fields, where the ZMask bits specify which elements of the destination will be set to zero, the Count_D bits specify which element of the destination will be overwritten with the scalar value, and for vector register sources the Count_S bits specify which element of the source will be copied. When the scalar source is a memory operand the Count_S bits are ignored."},{"name":"\u200b","value":"(memory source form)"},{"name":"\u200b","value":"Load a floating-point element from a 32-bit memory location and destination operand it into the first source at the location indicated by the Count_D bits of the immediate operand. Store in the destination and zero out destination elements based on the ZMask bits of the immediate operand."},{"name":"\u200b","value":"128-bit Legacy SSE version: The first source register is an XMM register. The second source operand is either an XMM register or a 32-bit memory location. The destination is not distinct from the first source XMM register and the upper bits (MAXVL-1:128) of the corresponding register destination are unmodified."},{"name":"\u200b","value":"VEX.128 and EVEX encoded version: The destination and first source register is an XMM register. The second source operand is either an XMM register or a 32-bit memory location. The upper bits (MAXVL-1:128) of the corresponding register destination are zeroed."},{"name":"\u200b","value":"If VINSERTPS is encoded with VEX.L= 1, an attempt to execute the instruction encoded with VEX.L= 1 will cause an #UD exception."},{"name":"C/C++ Intriniscs","value":"`VINSERTPS __m128 _mm_insert_ps(__m128 dst, __m128 src, const int nidx);\n`"},{"name":"\u200b","value":"`INSETRTPS __m128 _mm_insert_ps(__m128 dst, __m128 src, const int nidx);\n`"},{"name":"CPUID Flags","value":"SSE4_1"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}