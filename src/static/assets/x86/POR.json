{"title":"POR â€” Bitwise Logical OR","fields":[{"name":"Instruction Modes","value":"`POR mm, mm/m64`\n`POR xmm1, xmm2/m128`\n`VPOR xmm1, xmm2, xmm3/m128`\n`VPOR ymm1, ymm2, ymm3/m256`\n`VPORD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`VPORD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VPORD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst`\n`VPORQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VPORQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VPORQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst`"},{"name":"Description","value":"Performs a bitwise logical OR operation on the source operand (second operand) and the destination operand (first operand) and stores the result in the destination operand. Each bit of the result is set to 1 if either or both of the corresponding bits of the first and second operands are 1; otherwise, it is set to 0."},{"name":"\u200b","value":"In 64-bit mode and not encoded with VEX/EVEX, using a REX prefix in the form of REX.R permits this instruction to access additional registers (XMM8-XMM15)."},{"name":"\u200b","value":"Legacy SSE version: The source operand can be an MMX technology register or a 64-bit memory location. The destination operand is an MMX technology register."},{"name":"\u200b","value":"128-bit Legacy SSE version: The second source operand is an XMM register or a 128-bit memory location. The first source and destination operands can be XMM registers. Bits (MAXVL-1:128) of the corresponding YMM destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 encoded version: The second source operand is an XMM register or a 128-bit memory location. The first source and destination operands can be XMM registers. Bits (MAXVL-1:128) of the destination YMM register are zeroed."},{"name":"\u200b","value":"VEX.256 encoded version: The second source operand is an YMM register or a 256-bit memory location. The first source and destination operands can be YMM registers."},{"name":"\u200b","value":"EVEX encoded version: The first source operand is a ZMM/YMM/XMM register. The second source operand can be a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32/64-bit memory location. The destination operand is a ZMM/YMM/XMM register conditionally updated with writemask k1 at 32/64-bit granularity."},{"name":"C/C++ Intriniscs","value":"`VPORD __m512i _mm512_or_epi32(__m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPORD __m512i _mm512_mask_or_epi32(__m512i s, __mmask16 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPORD __m512i _mm512_maskz_or_epi32( __mmask16 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPORD __m256i _mm256_or_epi32(__m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPORD __m256i _mm256_mask_or_epi32(__m256i s, __mmask8 k, __m256i a, __m256i b,);\n`"},{"name":"\u200b","value":"`VPORD __m256i _mm256_maskz_or_epi32( __mmask8 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPORD __m128i _mm_or_epi32(__m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPORD __m128i _mm_mask_or_epi32(__m128i s, __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPORD __m128i _mm_maskz_or_epi32( __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPORQ __m512i _mm512_or_epi64(__m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPORQ __m512i _mm512_mask_or_epi64(__m512i s, __mmask8 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPORQ __m512i _mm512_maskz_or_epi64(__mmask8 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPORQ __m256i _mm256_or_epi64(__m256i a, int imm);\n`"},{"name":"\u200b","value":"`VPORQ __m256i _mm256_mask_or_epi64(__m256i s, __mmask8 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPORQ __m256i _mm256_maskz_or_epi64( __mmask8 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPORQ __m128i _mm_or_epi64(__m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPORQ __m128i _mm_mask_or_epi64(__m128i s, __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPORQ __m128i _mm_maskz_or_epi64( __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`POR __m64 _mm_or_si64(__m64 m1, __m64 m2)\n`"},{"name":"\u200b","value":"`(V)POR: __m128i _mm_or_si128(__m128i m1, __m128i m2)\n`"},{"name":"\u200b","value":"`VPOR: __m256i _mm256_or_si256 ( __m256i a, __m256i b)\n`"},{"name":"CPUID Flags","value":"MMX"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}