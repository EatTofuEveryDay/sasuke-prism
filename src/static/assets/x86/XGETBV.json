{"title":"XGETBV — Get Value of Extended Control Register","fields":[{"name":"Instruction Modes","value":"`XGETBV`"},{"name":"Description","value":"Reads the contents of the extended control register (XCR) specified in the ECX register into registers EDX:EAX. (On processors that support the Intel 64 architecture, the high-order 32 bits of RCX are ignored.) The EDX register is loaded with the high-order 32 bits of the XCR and the EAX register is loaded with the low-order 32 bits. (On processors that support the Intel 64 architecture, the high-order 32 bits of each of RAX and RDX are cleared.) If fewer than 64 bits are implemented in the XCR being read, the values returned to EDX:EAX in unimplemented bit locations are undefined."},{"name":"\u200b","value":"XCR0 is supported on any processor that supports the XGETBV instruction. If CPUID.(EAX=0DH,ECX=1):EAX.XG1[bit 2] = 1, executing XGETBV with ECX = 1 returns in EDX:EAX the logicalAND of XCR0 and the current value of the XINUSE state-component bitmap. This allows software to discover the state of the init optimization used by XSAVEOPT and XSAVES. See Chapter 13, “Managing State Using the XSAVE Feature Set‚” in Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 1."},{"name":"\u200b","value":"Use of any other value for ECX results in a general-protection (#GP) exception."},{"name":"C/C++ Intriniscs","value":"`XGETBV: unsigned __int64 _xgetbv( unsigned int);\n`"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}