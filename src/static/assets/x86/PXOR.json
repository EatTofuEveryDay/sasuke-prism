{"title":"PXOR â€” Logical Exclusive OR","fields":[{"name":"Instruction Modes","value":"`PXOR mm, mm/m64`\n`PXOR xmm1, xmm2/m128`\n`VPXOR xmm1, xmm2, xmm3/m128`\n`VPXOR ymm1, ymm2, ymm3/m256`\n`VPXORD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`VPXORD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VPXORD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst`\n`VPXORQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VPXORQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VPXORQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst`"},{"name":"Description","value":"Performs a bitwise logical exclusive-OR (XOR) operation on the source operand (second operand) and the destination operand (first operand) and stores the result in the destination operand. Each bit of the result is 1 if the corresponding bits of the two operands are different; each bit is 0 if the corresponding bits of the operands are the same."},{"name":"\u200b","value":"In 64-bit mode and not encoded with VEX/EVEX, using a REX prefix in the form of REX.R permits this instruction to access additional registers (XMM8-XMM15)."},{"name":"\u200b","value":"Legacy SSE instructions 64-bit operand: The source operand can be an MMX technology register or a 64-bit memory location. The destination operand is an MMX technology register."},{"name":"\u200b","value":"128-bit Legacy SSE version: The second source operand is an XMM register or a 128-bit memory location. The first source operand and destination operands are XMM registers. Bits (MAXVL-1:128) of the corresponding YMM destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 encoded version: The second source operand is an XMM register or a 128-bit memory location. The first source operand and destination operands are XMM registers. Bits (MAXVL-1:128) of the destination YMM register are zeroed."},{"name":"\u200b","value":"VEX.256 encoded version: The first source operand is a YMM register. The second source operand is a YMM register or a 256-bit memory location. The destination operand is a YMM register. The upper bits (MAXVL-1:256) of the corresponding register destination are zeroed."},{"name":"\u200b","value":"EVEX encoded versions: The first source operand is a ZMM/YMM/XMM register. The second source operand can be a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32/64-bit memory location. The destination operand is a ZMM/YMM/XMM register conditionally updated with writemask k1."},{"name":"C/C++ Intrinsics","value":"`VPXORD __m512i _mm512_xor_epi32(__m512i a, __m512i b)\n`"},{"name":"\u200b","value":"`VPXORD __m512i _mm512_mask_xor_epi32(__m512i s, __mmask16 m, __m512i a, __m512i b)\n`"},{"name":"\u200b","value":"`VPXORD __m512i _mm512_maskz_xor_epi32( __mmask16 m, __m512i a, __m512i b)\n`"},{"name":"\u200b","value":"`VPXORD __m256i _mm256_xor_epi32(__m256i a, __m256i b)\n`"},{"name":"\u200b","value":"`VPXORD __m256i _mm256_mask_xor_epi32(__m256i s, __mmask8 m, __m256i a, __m256i b)\n`"},{"name":"\u200b","value":"`VPXORD __m256i _mm256_maskz_xor_epi32( __mmask8 m, __m256i a, __m256i b)\n`"},{"name":"\u200b","value":"`VPXORD __m128i _mm_xor_epi32(__m128i a, __m128i b)\n`"},{"name":"\u200b","value":"`VPXORD __m128i _mm_mask_xor_epi32(__m128i s, __mmask8 m, __m128i a, __m128i b)\n`"},{"name":"\u200b","value":"`VPXORD __m128i _mm_maskz_xor_epi32( __mmask16 m, __m128i a, __m128i b)\n`"},{"name":"\u200b","value":"`VPXORQ __m512i _mm512_xor_epi64( __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPXORQ __m512i _mm512_mask_xor_epi64(__m512i s, __mmask8 m, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPXORQ __m512i _mm512_maskz_xor_epi64(__mmask8 m, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPXORQ __m256i _mm256_xor_epi64( __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPXORQ __m256i _mm256_mask_xor_epi64(__m256i s, __mmask8 m, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPXORQ __m256i _mm256_maskz_xor_epi64(__mmask8 m, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"(6 more)"},{"name":"CPUID Flags","value":"MMX"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}