{"title":"PMINSD/PMINSQ â€” Minimum of Packed Signed Integers","fields":[{"name":"Instruction Modes","value":"`PMINSD xmm1, xmm2/m128`\n`VPMINSD xmm1, xmm2, xmm3/m128`\n`VPMINSD ymm1, ymm2, ymm3/m256`\n`VPMINSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`VPMINSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VPMINSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst`\n`VPMINSQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VPMINSQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VPMINSQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst`"},{"name":"Description","value":"Performs a SIMD compare of the packed signed dword or qword integers in the second source operand and the first source operand and returns the minimum value for each pair of integers to the destination operand."},{"name":"\u200b","value":"128-bit Legacy SSE version: The first source and destination operands are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the corresponding destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 encoded version: The first source and destination operands are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the corresponding destination register are zeroed."},{"name":"\u200b","value":"VEX.256 encoded version: The second source operand can be an YMM register or a 256-bit memory location. The first source and destination operands are YMM registers. Bits (MAXVL-1:256) of the corresponding destination register are zeroed."},{"name":"\u200b","value":"EVEX encoded versions: The first source operand is a ZMM/YMM/XMM register; The second source operand is a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32/64-bit memory location. The destination operand is conditionally updated based on writemask k1."},{"name":"C/C++ Intriniscs","value":"`VPMINSD __m512i _mm512_min_epi32( __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMINSD __m512i _mm512_mask_min_epi32(__m512i s, __mmask16 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMINSD __m512i _mm512_maskz_min_epi32( __mmask16 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMINSQ __m512i _mm512_min_epi64( __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMINSQ __m512i _mm512_mask_min_epi64(__m512i s, __mmask8 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMINSQ __m512i _mm512_maskz_min_epi64( __mmask8 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMINSD __m256i _mm256_mask_min_epi32(__m256i s, __mmask16 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMINSD __m256i _mm256_maskz_min_epi32( __mmask16 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMINSQ __m256i _mm256_mask_min_epi64(__m256i s, __mmask8 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMINSQ __m256i _mm256_maskz_min_epi64( __mmask8 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMINSD __m128i _mm_mask_min_epi32(__m128i s, __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPMINSD __m128i _mm_maskz_min_epi32( __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPMINSQ __m128i _mm_mask_min_epi64(__m128i s, __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPMINSQ __m128i _mm_maskz_min_epu64( __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`(V)PMINSD __m128i _mm_min_epi32 ( __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPMINSD __m256i _mm256_min_epi32 (__m256i a, __m256i b);\n`"},{"name":"CPUID Flags","value":"SSE4_1"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}