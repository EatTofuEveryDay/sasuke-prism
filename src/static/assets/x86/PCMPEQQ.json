{"title":"PCMPEQQ â€” Compare Packed Qword Data for Equal","fields":[{"name":"Instruction Modes","value":"`PCMPEQQ xmm1, xmm2/m128`\n`VPCMPEQQ xmm1, xmm2, xmm3/m128`\n`VPCMPEQQ ymm1, ymm2, ymm3 /m256`\n`VPCMPEQQ k1 {k2}, xmm2, xmm3/m128/m64bcst`\n`VPCMPEQQ k1 {k2}, ymm2, ymm3/m256/m64bcst`\n`VPCMPEQQ k1 {k2}, zmm2, zmm3/m512/m64bcst`"},{"name":"Description","value":"Performs an SIMD compare for equality of the packed quadwords in the destination operand (first operand) and the source operand (second operand). If a pair of data elements is equal, the corresponding data element in the destination is set to all 1s; otherwise, it is set to 0s."},{"name":"\u200b","value":"128-bit Legacy SSE version: The second source operand can be an XMM register or a 128-bit memory location. The first source and destination operands are XMM registers. Bits (MAXVL-1:128) of the corresponding YMM destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 encoded version: The second source operand can be an XMM register or a 128-bit memory location. The first source and destination operands are XMM registers. Bits (MAXVL-1:128) of the corresponding YMM register are zeroed."},{"name":"\u200b","value":"VEX.256 encoded version: The first source operand is a YMM register. The second source operand is a YMM register or a 256-bit memory location. The destination operand is a YMM register."},{"name":"\u200b","value":"EVEX encoded VPCMPEQQ: The first source operand (second operand) is a ZMM/YMM/XMM register. The second source operand can be a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 64-bit memory location. The destination operand (first operand) is a mask register updated according to the writemask k2."},{"name":"C/C++ Intrinsics","value":"`VPCMPEQQ __mmask8 _mm512_cmpeq_epi64_mask( __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPCMPEQQ __mmask8 _mm512_mask_cmpeq_epi64_mask(__mmask8 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPCMPEQQ __mmask8 _mm256_cmpeq_epi64_mask( __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPCMPEQQ __mmask8 _mm256_mask_cmpeq_epi64_mask(__mmask8 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPCMPEQQ __mmask8 _mm_cmpeq_epi64_mask( __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPCMPEQQ __mmask8 _mm_mask_cmpeq_epi64_mask(__mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`(V)PCMPEQQ: __m128i _mm_cmpeq_epi64(__m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPCMPEQQ: __m256i _mm256_cmpeq_epi64( __m256i a, __m256i b);\n`"},{"name":"CPUID Flags","value":"SSE4_1"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}