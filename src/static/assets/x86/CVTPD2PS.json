{"title":"CVTPD2PS â€” Convert Packed Double-Precision Floating-Point Values to Packed Single-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`CVTPD2PS xmm1, xmm2/m128`\n`VCVTPD2PS xmm1, xmm2/m128`\n`VCVTPD2PS xmm1, ymm2/m256`\n`VCVTPD2PS xmm1 {k1}{z}, xmm2/m128/m64bcst`\n`VCVTPD2PS xmm1 {k1}{z}, ymm2/m256/m64bcst`\n`VCVTPD2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}`"},{"name":"Description","value":"Converts two, four or eight packed double-precision floating-point values in the source operand (second operand) to two, four or eight packed single-precision floating-point values in the destination operand (first operand)."},{"name":"\u200b","value":"When a conversion is inexact, the value returned is rounded according to the rounding control bits in the MXCSR register or the embedded rounding control bits."},{"name":"\u200b","value":"EVEX encoded versions: The source operand is a ZMM/YMM/XMM register, a 512/256/128-bit memory location, or a 512/256/128-bit vector broadcasted from a 64-bit memory location. The destination operand is a YMM/XMM/XMM (low 64-bits) register conditionally updated with writemask k1. The upper bits (MAXVL-1:256/128/64) of the corresponding destination are zeroed."},{"name":"\u200b","value":"VEX.256 encoded version: The source operand is a YMM register or 256- bit memory location. The destination operand is an XMM register. The upper bits (MAXVL-1:128) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"VEX.128 encoded version: The source operand is an XMM register or 128- bit memory location. The destination operand is a XMM register. The upper bits (MAXVL-1:64) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"128-bit Legacy SSE version: The source operand is an XMM register or 128- bit memory location. The destination operand is an XMM register. Bits[127:64] of the destination XMM register are zeroed. However, the upper Bits (MAXVL-1:128) of the corresponding ZMM register destination are unmodified."},{"name":"\u200b","value":"VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instructions will #UD."},{"name":"C/C++ Intrinsics","value":"`VCVTPD2PS __m256 _mm512_cvtpd_ps( __m512d a);\n`"},{"name":"\u200b","value":"`VCVTPD2PS __m256 _mm512_mask_cvtpd_ps( __m256 s, __mmask8 k, __m512d a);\n`"},{"name":"\u200b","value":"`VCVTPD2PS __m256 _mm512_maskz_cvtpd_ps( __mmask8 k, __m512d a);\n`"},{"name":"\u200b","value":"`VCVTPD2PS __m256 _mm512_cvt_roundpd_ps( __m512d a, int r);\n`"},{"name":"\u200b","value":"`VCVTPD2PS __m256 _mm512_mask_cvt_roundpd_ps( __m256 s, __mmask8 k, __m512d a, int r);\n`"},{"name":"\u200b","value":"`VCVTPD2PS __m256 _mm512_maskz_cvt_roundpd_ps( __mmask8 k, __m512d a, int r);\n`"},{"name":"\u200b","value":"`VCVTPD2PS __m128 _mm256_mask_cvtpd_ps( __m128 s, __mmask8 k, __m256d a);\n`"},{"name":"\u200b","value":"`VCVTPD2PS __m128 _mm256_maskz_cvtpd_ps( __mmask8 k, __m256d a);\n`"},{"name":"\u200b","value":"`VCVTPD2PS __m128 _mm_mask_cvtpd_ps( __m128 s, __mmask8 k, __m128d a);\n`"},{"name":"\u200b","value":"`VCVTPD2PS __m128 _mm_maskz_cvtpd_ps( __mmask8 k, __m128d a);\n`"},{"name":"\u200b","value":"`VCVTPD2PS __m128 _mm256_cvtpd_ps (__m256d a)\n`"},{"name":"\u200b","value":"`CVTPD2PS __m128 _mm_cvtpd_ps (__m128d a)\n`"},{"name":"CPUID Flags","value":"SSE2"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}