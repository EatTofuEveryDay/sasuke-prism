{"title":"MOVSD â€” Move or Merge Scalar Double-Precision Floating-Point Value","fields":[{"name":"Instruction Modes","value":"`MOVSD xmm1, xmm2`\n`MOVSD xmm1, m64`\n`MOVSD xmm1/m64, xmm2`\n`VMOVSD xmm1, xmm2, xmm3`\n`VMOVSD xmm1, m64`\n`VMOVSD xmm1, xmm2, xmm3`\n`VMOVSD m64, xmm1`\n`VMOVSD xmm1 {k1}{z}, xmm2, xmm3`\n`VMOVSD xmm1 {k1}{z}, m64`\n`VMOVSD xmm1 {k1}{z}, xmm2, xmm3`\n`VMOVSD m64 {k1}, xmm1`"},{"name":"Description","value":"Moves a scalar double-precision floating-point value from the source operand (second operand) to the destination operand (first operand). The source and destination operands can be XMM registers or 64-bit memory locations. This instruction can be used to move a double-precision floating-point value to and from the low quadword of an XMM register and a 64-bit memory location, or to move a double-precision floating-point value between the low quadwords of two XMM registers. The instruction cannot be used to transfer data between memory locations."},{"name":"\u200b","value":"Legacy version: When the source and destination operands are XMM registers, bits MAXVL:64 of the destination operand remains unchanged. When the source operand is a memory location and destination operand is an XMM registers, the quadword at bits 127:64 of the destination operand is cleared to all 0s, bits MAXVL:128 of the destination operand remains unchanged."},{"name":"\u200b","value":"VEX and EVEX encoded register-register syntax: Moves a scalar double-precision floating-point value from the second source operand (the third operand) to the low quadword element of the destination operand (the first operand). Bits 127:64 of the destination operand are copied from the first source operand (the second operand). Bits (MAXVL-1:128) of the corresponding destination register are zeroed."},{"name":"\u200b","value":"VEX and EVEX encoded memory store syntax: When the source operand is a memory location and destination operand is an XMM registers, bits MAXVL:64 of the destination operand is cleared to all 0s."},{"name":"\u200b","value":"EVEX encoded versions: The low quadword of the destination is updated according to the writemask."},{"name":"\u200b","value":"Note: For VMOVSD (memory store and load forms), VEX.vvvv and EVEX.vvvv are reserved and must be 1111b, otherwise instruction will #UD."},{"name":"C/C++ Intrinsics","value":"`VMOVSD __m128d _mm_mask_load_sd(__m128d s, __mmask8 k, double * p);\n`"},{"name":"\u200b","value":"`VMOVSD __m128d _mm_maskz_load_sd( __mmask8 k, double * p);\n`"},{"name":"\u200b","value":"`VMOVSD __m128d _mm_mask_move_sd(__m128d sh, __mmask8 k, __m128d sl, __m128d a);\n`"},{"name":"\u200b","value":"`VMOVSD __m128d _mm_maskz_move_sd( __mmask8 k, __m128d s, __m128d a);\n`"},{"name":"\u200b","value":"`VMOVSD void _mm_mask_store_sd(double * p, __mmask8 k, __m128d s);\n`"},{"name":"\u200b","value":"`MOVSD __m128d _mm_load_sd (double *p)\n`"},{"name":"\u200b","value":"`MOVSD void _mm_store_sd (double *p, __m128d a)\n`"},{"name":"\u200b","value":"`MOVSD __m128d _mm_move_sd ( __m128d a, __m128d b)\n`"},{"name":"CPUID Flags","value":"SSE2"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}