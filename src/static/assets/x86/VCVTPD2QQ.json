{"title":"VCVTPD2QQ â€” Convert Packed Double-Precision Floating-Point Values to Packed Quadword Integers","fields":[{"name":"Instruction Modes","value":"`VCVTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst`\n`VCVTPD2QQ ymm1 {k1}{z}, ymm2/m256/m64bcst`\n`VCVTPD2QQ zmm1 {k1}{z}, zmm2/m512/m64bcst{er}`"},{"name":"Description","value":"Converts packed double-precision floating-point values in the source operand (second operand) to packed quadword integers in the destination operand (first operand)."},{"name":"\u200b","value":"EVEX encoded versions: The source operand is a ZMM/YMM/XMM register or a 512/256/128-bit memory location. The destination operation is a ZMM/YMM/XMM register conditionally updated with writemask k1."},{"name":"\u200b","value":"When a conversion is inexact, the value returned is rounded according to the rounding control bits in the MXCSR register or the embedded rounding control bits. If a converted result cannot be represented in the destination format, the floating-point invalid exception is raised, and if this exception is masked, the indefinite integer value (2w-1, where w represents the number of bits in the destination format) is returned."},{"name":"\u200b","value":"EVEX.vvvv is reserved and must be 1111b otherwise instructions will #UD."},{"name":"C/C++ Intriniscs","value":"`VCVTPD2QQ __m512i _mm512_cvtpd_epi64( __m512d a);\n`"},{"name":"\u200b","value":"`VCVTPD2QQ __m512i _mm512_mask_cvtpd_epi64( __m512i s, __mmask8 k, __m512d a);\n`"},{"name":"\u200b","value":"`VCVTPD2QQ __m512i _mm512_maskz_cvtpd_epi64( __mmask8 k, __m512d a);\n`"},{"name":"\u200b","value":"`VCVTPD2QQ __m512i _mm512_cvt_roundpd_epi64( __m512d a, int r);\n`"},{"name":"\u200b","value":"`VCVTPD2QQ __m512i _mm512_mask_cvt_roundpd_epi64( __m512i s, __mmask8 k, __m512d a, int r);\n`"},{"name":"\u200b","value":"`VCVTPD2QQ __m512i _mm512_maskz_cvt_roundpd_epi64( __mmask8 k, __m512d a, int r);\n`"},{"name":"\u200b","value":"`VCVTPD2QQ __m256i _mm256_mask_cvtpd_epi64( __m256i s, __mmask8 k, __m256d a);\n`"},{"name":"\u200b","value":"`VCVTPD2QQ __m256i _mm256_maskz_cvtpd_epi64( __mmask8 k, __m256d a);\n`"},{"name":"\u200b","value":"`VCVTPD2QQ __m128i _mm_mask_cvtpd_epi64( __m128i s, __mmask8 k, __m128d a);\n`"},{"name":"\u200b","value":"`VCVTPD2QQ __m128i _mm_maskz_cvtpd_epi64( __mmask8 k, __m128d a);\n`"},{"name":"\u200b","value":"`VCVTPD2QQ __m256i _mm256_cvtpd_epi64 (__m256d src)\n`"},{"name":"\u200b","value":"`VCVTPD2QQ __m128i _mm_cvtpd_epi64 (__m128d src)\n`"},{"name":"CPUID Flags","value":"AVX512VL AVX512DQ"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}