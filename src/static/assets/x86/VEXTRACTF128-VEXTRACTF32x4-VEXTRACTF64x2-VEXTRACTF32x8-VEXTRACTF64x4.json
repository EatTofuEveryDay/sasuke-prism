{"title":"VEXTRACTF128/VEXTRACTF32x4/VEXTRACTF64x2/VEXTRACTF32x8/VEXTRACTF64x4 â€” Extra ct Packed Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`ib VEXTRACTF128 xmm1/m128, ymm2, imm8`\n`ib VEXTRACTF32X4 xmm1/m128 {k1}{z}, ymm2, imm8`\n`ib VEXTRACTF32x4 xmm1/m128 {k1}{z}, zmm2, imm8`\n`ib VEXTRACTF64X2 xmm1/m128 {k1}{z}, ymm2, imm8`\n`ib VEXTRACTF64X2 xmm1/m128 {k1}{z}, zmm2, imm8`\n`ib VEXTRACTF32X8 ymm1/m256 {k1}{z}, zmm2, imm8`\n`ib VEXTRACTF64x4 ymm1/m256 {k1}{z}, zmm2, imm8`"},{"name":"Description","value":"VEXTRACTF128/VEXTRACTF32x4 and VEXTRACTF64x2 extract 128-bits of single-precision floating-point values from the source operand (the second operand) and store to the low 128-bit of the destination operand (the first operand). The 128-bit data extraction occurs at an 128-bit granular offset specified by imm8[0] (256-bit) or imm8[1:0] as the multiply factor. The destination may be either a vector register or an 128-bit memory location."},{"name":"\u200b","value":"VEXTRACTF32x4: The low 128-bit of the destination operand is updated at 32-bit granularity according to the writemask."},{"name":"\u200b","value":"VEXTRACTF32x8 and VEXTRACTF64x4 extract 256-bits of double-precision floating-point values from the source operand (second operand) and store to the low 256-bit of the destination operand (the first operand). The 256-bit data extraction occurs at an 256-bit granular offset specified by imm8[0] (256-bit) or imm8[0] as the multiply factor The destination may be either a vector register or a 256-bit memory location."},{"name":"\u200b","value":"VEXTRACTF64x4: The low 256-bit of the destination operand is updated at 64-bit granularity according to the writemask."},{"name":"\u200b","value":"VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instructions will #UD."},{"name":"\u200b","value":"The high 6 bits of the immediate are ignored."},{"name":"\u200b","value":"If VEXTRACTF128 is encoded with VEX.L= 0, an attempt to execute the instruction encoded with VEX.L= 0 will cause an #UD exception."},{"name":"C/C++ Intriniscs","value":"`VEXTRACTF32x4 __m128 _mm512_extractf32x4_ps(__m512 a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTF32x4 __m128 _mm512_mask_extractf32x4_ps(__m128 s, __mmask8 k, __m512 a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTF32x4 __m128 _mm512_maskz_extractf32x4_ps( __mmask8 k, __m512 a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTF32x4 __m128 _mm256_extractf32x4_ps(__m256 a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTF32x4 __m128 _mm256_mask_extractf32x4_ps(__m128 s, __mmask8 k, __m256 a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTF32x4 __m128 _mm256_maskz_extractf32x4_ps( __mmask8 k, __m256 a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTF32x8 __m256 _mm512_extractf32x8_ps(__m512 a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTF32x8 __m256 _mm512_mask_extractf32x8_ps(__m256 s, __mmask8 k, __m512 a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTF32x8 __m256 _mm512_maskz_extractf32x8_ps( __mmask8 k, __m512 a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTF64x2 __m128d _mm512_extractf64x2_pd(__m512d a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTF64x2 __m128d _mm512_mask_extractf64x2_pd(__m128d s, __mmask8 k, __m512d a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTF64x2 __m128d _mm512_maskz_extractf64x2_pd( __mmask8 k, __m512d a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTF64x2 __m128d _mm256_extractf64x2_pd(__m256d a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTF64x2 __m128d _mm256_mask_extractf64x2_pd(__m128d s, __mmask8 k, __m256d a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTF64x2 __m128d _mm256_maskz_extractf64x2_pd( __mmask8 k, __m256d a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTF64x4 __m256d _mm512_extractf64x4_pd( __m512d a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTF64x4 __m256d _mm512_mask_extractf64x4_pd(__m256d s, __mmask8 k, __m512d a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTF64x4 __m256d _mm512_maskz_extractf64x4_pd( __mmask8 k, __m512d a, const int nidx);\n`"},{"name":"\u200b","value":"`VEXTRACTF128 __m128 _mm256_extractf128_ps (__m256 a, int offset);\n`"},{"name":"\u200b","value":"`VEXTRACTF128 __m128d _mm256_extractf128_pd (__m256d a, int offset);\n`"},{"name":"\u200b","value":"`VEXTRACTF128 __m128i_mm256_extractf128_si256(__m256i a, int offset);\n`"},{"name":"CPUID Flags","value":"AVX"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}