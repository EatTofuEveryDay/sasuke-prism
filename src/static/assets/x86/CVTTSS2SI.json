{"title":"CVTTSS2SI â€” Convert with Truncation Scalar Single-Precision Floating-Point Value to Integer","fields":[{"name":"Instruction Modes","value":"`CVTTSS2SI r32, xmm1/m32`\n`CVTTSS2SI r64, xmm1/m32`\n`1 VCVTTSS2SI r32, xmm1/m32`\n`1 VCVTTSS2SI r64, xmm1/m32`\n`VCVTTSS2SI r32, xmm1/m32{sae}`\n`VCVTTSS2SI r64, xmm1/m32{sae}`"},{"name":"Description","value":"Converts a single-precision floating-point value in the source operand (the second operand) to a signed double-word integer (or signed quadword integer if operand size is 64 bits) in the destination operand (the first operand). The source operand can be an XMM register or a 32-bit memory location. The destination operand is a general purpose register. When the source operand is an XMM register, the single-precision floating-point value is contained in the low doubleword of the register."},{"name":"\u200b","value":"When a conversion is inexact, a truncated (round toward zero) result is returned. If a converted result is larger than the maximum signed doubleword integer, the floating-point invalid exception is raised. If this exception is masked, the indefinite integer value (80000000H or 80000000_00000000H if operand size is 64 bits) is returned."},{"name":"\u200b","value":"Legacy SSE instructions: In 64-bit mode, Use of the REX.W prefix promotes the instruction to 64-bit operation. See the summary chart at the beginning of this section for encoding data and limits."},{"name":"\u200b","value":"VEX.W1 and EVEX.W1 versions: promotes the instruction to produce 64-bit data in 64-bit mode."},{"name":"\u200b","value":"Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b, otherwise instructions will #UD."},{"name":"\u200b","value":"Software should ensure VCVTTSS2SI is encoded with VEX.L=0. Encoding VCVTTSS2SI with VEX.L=1 may encounter unpredictable behavior across different processor generations."},{"name":"C/C++ Intriniscs","value":"`VCVTTSS2SI int _mm_cvttss_i32( __m128 a);\n`"},{"name":"\u200b","value":"`VCVTTSS2SI int _mm_cvtt_roundss_i32( __m128 a, int sae);\n`"},{"name":"\u200b","value":"`VCVTTSS2SI __int64 _mm_cvttss_i64( __m128 a);\n`"},{"name":"\u200b","value":"`VCVTTSS2SI __int64 _mm_cvtt_roundss_i64( __m128 a, int sae);\n`"},{"name":"\u200b","value":"`CVTTSS2SI int _mm_cvttss_si32( __m128 a);\n`"},{"name":"\u200b","value":"`CVTTSS2SI __int64 _mm_cvttss_si64( __m128 a);\n`"},{"name":"CPUID Flags","value":"SSE"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}