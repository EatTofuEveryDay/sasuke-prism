{"title":"VCVTPS2PH â€” Convert Single-Precision FP value to 16-bit FP value","fields":[{"name":"Instruction Modes","value":"`ib VCVTPS2PH xmm1/m64, xmm2, imm8`\n`ib VCVTPS2PH xmm1/m128, ymm2, imm8`\n`ib VCVTPS2PH xmm1/m64 {k1}{z}, xmm2, imm8`\n`ib VCVTPS2PH xmm1/m128 {k1}{z}, ymm2, imm8`\n`ib VCVTPS2PH ymm1/m256 {k1}{z}, zmm2{sae}, imm8`"},{"name":"Description","value":"Convert packed single-precision floating values in the source operand to half-precision (16-bit) floating-point values and store to the destination operand. The rounding mode is specified using the immediate field (imm8)."},{"name":"\u200b","value":"Underflow results (i.e., tiny results) are converted to denormals. MXCSR.FTZ is ignored. If a source element is denormal relative to the input format with DM masked and at least one of PM or UM unmasked; a SIMD exception will be raised with DE, UE and PE set."},{"name":"C/C++ Intrinsics","value":"`VCVTPS2PH __m256i _mm512_cvtps_ph(__m512 a);\n`"},{"name":"\u200b","value":"`VCVTPS2PH __m256i _mm512_mask_cvtps_ph(__m256i s, __mmask16 k,__m512 a);\n`"},{"name":"\u200b","value":"`VCVTPS2PH __m256i _mm512_maskz_cvtps_ph(__mmask16 k,__m512 a);\n`"},{"name":"\u200b","value":"`VCVTPS2PH __m256i _mm512_cvt_roundps_ph(__m512 a, const int imm);\n`"},{"name":"\u200b","value":"`VCVTPS2PH __m256i _mm512_mask_cvt_roundps_ph(__m256i s, __mmask16 k,__m512 a, const int imm);\n`"},{"name":"\u200b","value":"`VCVTPS2PH __m256i _mm512_maskz_cvt_roundps_ph(__mmask16 k,__m512 a, const int imm);\n`"},{"name":"\u200b","value":"`VCVTPS2PH __m128i _mm256_mask_cvtps_ph(__m128i s, __mmask8 k,__m256 a);\n`"},{"name":"\u200b","value":"`VCVTPS2PH __m128i _mm256_maskz_cvtps_ph(__mmask8 k,__m256 a);\n`"},{"name":"\u200b","value":"`VCVTPS2PH __m128i _mm_mask_cvtps_ph(__m128i s, __mmask8 k,__m128 a);\n`"},{"name":"\u200b","value":"`VCVTPS2PH __m128i _mm_maskz_cvtps_ph(__mmask8 k,__m128 a);\n`"},{"name":"\u200b","value":"`VCVTPS2PH __m128i _mm_cvtps_ph ( __m128 m1, const int imm);\n`"},{"name":"\u200b","value":"`VCVTPS2PH __m128i _mm256_cvtps_ph(__m256 m1, const int imm);\n`"},{"name":"CPUID Flags","value":"F16C"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}