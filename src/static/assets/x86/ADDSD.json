{"title":"ADDSD â€” Add Scalar Double-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`ADDSD xmm1, xmm2/m64`\n`VADDSD xmm1, xmm2, xmm3/m64`\n`VADDSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}`"},{"name":"Description","value":"Adds the low double-precision floating-point values from the second source operand and the first source operand and stores the double-precision floating-point result in the destination operand."},{"name":"\u200b","value":"The second source operand can be an XMM register or a 64-bit memory location. The first source and destination operands are XMM registers."},{"name":"\u200b","value":"128-bit Legacy SSE version: The first source and destination operands are the same. Bits (MAXVL-1:64) of the corresponding destination register remain unchanged."},{"name":"\u200b","value":"EVEX and VEX.128 encoded version: The first source operand is encoded by EVEX.vvvv/VEX.vvvv. Bits (127:64) of the XMM register destination are copied from corresponding bits in the first source operand. Bits (MAXVL-1:128) of the destination register are zeroed."},{"name":"\u200b","value":"EVEX version: The low quadword element of the destination is updated according to the writemask."},{"name":"\u200b","value":"Software should ensure VADDSD is encoded with VEX.L=0. Encoding VADDSD with VEX.L=1 may encounter unpredictable behavior across different processor generations."},{"name":"C/C++ Intriniscs","value":"`VADDSD __m128d _mm_mask_add_sd (__m128d s, __mmask8 k, __m128d a, __m128d b);\n`"},{"name":"\u200b","value":"`VADDSD __m128d _mm_maskz_add_sd (__mmask8 k, __m128d a, __m128d b);\n`"},{"name":"\u200b","value":"`VADDSD __m128d _mm_add_round_sd (__m128d a, __m128d b, int);\n`"},{"name":"\u200b","value":"`VADDSD __m128d _mm_mask_add_round_sd (__m128d s, __mmask8 k, __m128d a, __m128d b, int);\n`"},{"name":"\u200b","value":"`VADDSD __m128d _mm_maskz_add_round_sd (__mmask8 k, __m128d a, __m128d b, int);\n`"},{"name":"\u200b","value":"`ADDSD __m128d _mm_add_sd (__m128d a, __m128d b);\n`"},{"name":"CPUID Flags","value":"SSE2"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}