{"title":"VFMADD132PD/VFMADD213PD/VFMADD231PD â€” Fused Multiply-Add of Packed Double- Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`VFMADD132PD xmm1, xmm2, xmm3/m128`\n`VFMADD213PD xmm1, xmm2, xmm3/m128`\n`VFMADD231PD xmm1, xmm2, xmm3/m128`\n`VFMADD132PD ymm1, ymm2, ymm3/m256`\n`VFMADD213PD ymm1, ymm2, ymm3/m256`\n`VFMADD231PD ymm1, ymm2, ymm3/m256`\n`VFMADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VFMADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VFMADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VFMADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VFMADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VFMADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VFMADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}`\n`VFMADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}`\n`VFMADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}`"},{"name":"Description","value":"Performs a set of SIMD multiply-add computation on packed double-precision floating-point values using three source operands and writes the multiply-add results in the destination operand. The destination operand is also the first source operand. The second operand must be a SIMD register. The third source operand can be a SIMD register or a memory location."},{"name":"\u200b","value":"VFMADD132PD: Multiplies the two, four or eight packed double-precision floating-point values from the first source operand to the two, four or eight packed double-precision floating-point values in the third source operand, adds the infinite precision intermediate result to the two, four or eight packed double-precision floating-point values in the second source operand, performs rounding and stores the resulting two, four or eight packed double-precision floating-point values to the destination operand (first source operand)."},{"name":"\u200b","value":"VFMADD213PD: Multiplies the two, four or eight packed double-precision floating-point values from the second source operand to the two, four or eight packed double-precision floating-point values in the first source operand, adds the infinite precision intermediate result to the two, four or eight packed double-precision floating-point values in the third source operand, performs rounding and stores the resulting two, four or eight packed double-precision floating-point values to the destination operand (first source operand)."},{"name":"\u200b","value":"VFMADD231PD: Multiplies the two, four or eight packed double-precision floating-point values from the second source to the two, four or eight packed double-precision floating-point values in the third source operand, adds the infinite precision intermediate result to the two, four or eight packed double-precision floating-point values in the first source operand, performs rounding and stores the resulting two, four or eight packed double-precision floating-point values to the destination operand (first source operand)."},{"name":"\u200b","value":"EVEX encoded versions: The destination operand (also first source operand) is a ZMM register and encoded in reg_field. The second source operand is a ZMM register and encoded in EVEX.vvvv. The third source operand is a ZMM register, a 512-bit memory location, or a 512-bit vector broadcasted from a 64-bit memory location. The destination operand is conditionally updated with write mask k1."},{"name":"\u200b","value":"VEX.256 encoded version: The destination operand (also first source operand) is a YMM register and encoded in reg_field. The second source operand is a YMM register and encoded in VEX.vvvv. The third source operand is a YMM register or a 256-bit memory location and encoded in rm_field."},{"name":"\u200b","value":"VEX.128 encoded version: The destination operand (also first source operand) is a XMM register and encoded in reg_field. The second source operand is a XMM register and encoded in VEX.vvvv. The third source operand is a XMM register or a 128-bit memory location and encoded in rm_field. The upper 128 bits of the YMM destination register are zeroed."},{"name":"C/C++ Intriniscs","value":"`VFMADDxxxPD __m512d _mm512_fmadd_pd(__m512d a, __m512d b, __m512d c);\n`"},{"name":"\u200b","value":"`VFMADDxxxPD __m512d _mm512_fmadd_round_pd(__m512d a, __m512d b, __m512d c, int r);\n`"},{"name":"\u200b","value":"`VFMADDxxxPD __m512d _mm512_mask_fmadd_pd(__m512d a, __mmask8 k, __m512d b, __m512d c);\n`"},{"name":"\u200b","value":"`VFMADDxxxPD __m512d _mm512_maskz_fmadd_pd(__mmask8 k, __m512d a, __m512d b, __m512d c);\n`"},{"name":"\u200b","value":"`VFMADDxxxPD __m512d _mm512_mask3_fmadd_pd(__m512d a, __m512d b, __m512d c, __mmask8 k);\n`"},{"name":"\u200b","value":"`VFMADDxxxPD __m512d _mm512_mask_fmadd_round_pd(__m512d a, __mmask8 k, __m512d b, __m512d c, int r);\n`"},{"name":"\u200b","value":"`VFMADDxxxPD __m512d _mm512_maskz_fmadd_round_pd(__mmask8 k, __m512d a, __m512d b, __m512d c, int r);\n`"},{"name":"\u200b","value":"`VFMADDxxxPD __m512d _mm512_mask3_fmadd_round_pd(__m512d a, __m512d b, __m512d c, __mmask8 k, int r);\n`"},{"name":"\u200b","value":"`VFMADDxxxPD __m256d _mm256_mask_fmadd_pd(__m256d a, __mmask8 k, __m256d b, __m256d c);\n`"},{"name":"\u200b","value":"`VFMADDxxxPD __m256d _mm256_maskz_fmadd_pd(__mmask8 k, __m256d a, __m256d b, __m256d c);\n`"},{"name":"\u200b","value":"`VFMADDxxxPD __m256d _mm256_mask3_fmadd_pd(__m256d a, __m256d b, __m256d c, __mmask8 k);\n`"},{"name":"\u200b","value":"`VFMADDxxxPD __m128d _mm_mask_fmadd_pd(__m128d a, __mmask8 k, __m128d b, __m128d c);\n`"},{"name":"\u200b","value":"`VFMADDxxxPD __m128d _mm_maskz_fmadd_pd(__mmask8 k, __m128d a, __m128d b, __m128d c);\n`"},{"name":"\u200b","value":"`VFMADDxxxPD __m128d _mm_mask3_fmadd_pd(__m128d a, __m128d b, __m128d c, __mmask8 k);\n`"},{"name":"\u200b","value":"`VFMADDxxxPD __m128d _mm_fmadd_pd (__m128d a, __m128d b, __m128d c);\n`"},{"name":"\u200b","value":"`VFMADDxxxPD __m256d _mm256_fmadd_pd (__m256d a, __m256d b, __m256d c);\n`"},{"name":"CPUID Flags","value":"FMA"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}