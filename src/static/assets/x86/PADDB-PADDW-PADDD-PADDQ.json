{"title":"PADDB/PADDW/PADDD/PADDQ — Add Packed Integers","fields":[{"name":"Instruction Modes","value":"`PADDB mm, mm/m64`\n`PADDW mm, mm/m64`\n`PADDD mm, mm/m64`\n`PADDQ mm, mm/m64`\n`PADDB xmm1, xmm2/m128`\n`PADDW xmm1, xmm2/m128`\n`PADDD xmm1, xmm2/m128`\n`PADDQ xmm1, xmm2/m128`\n`VPADDB xmm1, xmm2, xmm3/m128`\n`VPADDW xmm1, xmm2, xmm3/m128`\n`VPADDD xmm1, xmm2, xmm3/m128`\n`VPADDQ xmm1, xmm2, xmm3/m128`\n`VPADDB ymm1, ymm2, ymm3/m256`\n`VPADDW ymm1, ymm2, ymm3/m256`\n`VPADDD ymm1, ymm2, ymm3/m256`\n`VPADDQ ymm1, ymm2, ymm3/m256`\n`VPADDB xmm1 {k1}{z}, xmm2, xmm3/m128`\n`VPADDW xmm1 {k1}{z}, xmm2, xmm3/m128`\n`VPADDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`VPADDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VPADDB ymm1 {k1}{z}, ymm2, ymm3/m256`\n`VPADDW ymm1 {k1}{z}, ymm2, ymm3/m256`\n`VPADDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VPADDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VPADDB zmm1 {k1}{z}, zmm2, zmm3/m512`\n`VPADDW zmm1 {k1}{z}, zmm2, zmm3/m512`\n`VPADDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst`\n`VPADDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst`\n`NOTES: 1. See note in Section 2.4, “AVX and SSE Instruction Exception Specification” in the Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 2A and Section 22.25.3, “Exception Conditions of Legacy SIMD Instructions Operating on MMX Registers” in the Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 3A.`"},{"name":"Description","value":"Performs a SIMD add of the packed integers from the source operand (second operand) and the destination operand (first operand), and stores the packed integer results in the destination operand. See Figure 9-4 in the Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 1, for an illustration of a SIMD operation. Overflow is handled with wraparound, as described in the following paragraphs."},{"name":"\u200b","value":"The PADDB and VPADDB instructions add packed byte integers from the first source operand and second source operand and store the packed integer results in the destination operand. When an individual result is too large to be represented in 8 bits (overflow), the result is wrapped around and the low 8 bits are written to the destination operand (that is, the carry is ignored)."},{"name":"\u200b","value":"The PADDW and VPADDW instructions add packed word integers from the first source operand and second source operand and store the packed integer results in the destination operand. When an individual result is too large to be represented in 16 bits (overflow), the result is wrapped around and the low 16 bits are written to the destination operand (that is, the carry is ignored)."},{"name":"\u200b","value":"The PADDD and VPADDD instructions add packed doubleword integers from the first source operand and second source operand and store the packed integer results in the destination operand. When an individual result is too large to be represented in 32 bits (overflow), the result is wrapped around and the low 32 bits are written to the destination operand (that is, the carry is ignored)."},{"name":"\u200b","value":"The PADDQ and VPADDQ instructions add packed quadword integers from the first source operand and second source operand and store the packed integer results in the destination operand. When a quadword result is too"},{"name":"\u200b","value":"large to be represented in 64 bits (overflow), the result is wrapped around and the low 64 bits are written to the destination operand (that is, the carry is ignored)."},{"name":"\u200b","value":"Note that the (V)PADDB, (V)PADDW, (V)PADDD and (V)PADDQ instructions can operate on either unsigned or signed (two's complement notation) packed integers; however, it does not set bits in the EFLAGS register to indicate overflow and/or a carry. To prevent undetected overflow conditions, software must control the ranges of values operated on."},{"name":"\u200b","value":"EVEX encoded VPADDD/Q: The first source operand is a ZMM/YMM/XMM register. The second source operand is a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32/64-bit memory location. The destination operand is a ZMM/YMM/XMM register updated according to the writemask."},{"name":"\u200b","value":"EVEX encoded VPADDB/W: The first source operand is a ZMM/YMM/XMM register. The second source operand is a ZMM/YMM/XMM register, a 512/256/128-bit memory location. The destination operand is a ZMM/YMM/XMM register updated according to the writemask."},{"name":"\u200b","value":"VEX.256 encoded version: The first source operand is a YMM register. The second source operand is a YMM register or a 256-bit memory location. The destination operand is a YMM register. the upper bits (MAXVL-1:256) of the destination are cleared."},{"name":"\u200b","value":"VEX.128 encoded version: The first source operand is an XMM register. The second source operand is an XMM register or 128-bit memory location. The destination operand is an XMM register. The upper bits (MAXVL-1:128) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"128-bit Legacy SSE version: The first source operand is an XMM register. The second operand can be an XMM register or an 128-bit memory location. The destination is not distinct from the first source XMM register and the upper bits (MAXVL-1:128) of the corresponding ZMM register destination are unmodified."},{"name":"CPUID Flags","value":"MMX"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}