{"title":"BNDMK â€” Make Bounds","fields":[{"name":"Instruction Modes","value":"`BNDMK bnd, m32`\n`BNDMK bnd, m64`"},{"name":"Description","value":"Makes bounds from the second operand and stores the lower and upper bounds in the bound register bnd. The second operand must be a memory operand. The content of the base register from the memory operand is stored in the lower bound bnd.LB. The 1's complement of the effective address of m32/m64 is stored in the upper bound b.UB. Computation of m32/m64 has identical behavior to LEA."},{"name":"\u200b","value":"This instruction does not cause any memory access, and does not read or write any flags."},{"name":"\u200b","value":"If the instruction did not specify base register, the lower bound will be zero. The reg-reg form of this instruction retains legacy behavior (NOP)."},{"name":"\u200b","value":"The instruction causes an invalid-opcode exception (#UD) if executed in 64-bit mode with RIP-relative addressing."},{"name":"C/C++ Intrinsics","value":"`BNDMKvoid * _bnd_set_ptr_bounds(const void * q, size_t size);\n`"},{"name":"CPUID Flags","value":"MPX"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}