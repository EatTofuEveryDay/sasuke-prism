{"title":"CVTPI2PS â€” Convert Packed Dword Integers to Packed Single-Precision FP Values","fields":[{"name":"Instruction Modes","value":"`CVTPI2PS xmm, mm/m64`"},{"name":"Description","value":"Converts two packed signed doubleword integers in the source operand (second operand) to two packed single-precision floating-point values in the destination operand (first operand)."},{"name":"\u200b","value":"The source operand can be an MMX technology register or a 64-bit memory location. The destination operand is an XMM register. The results are stored in the low quadword of the destination operand, and the high quadword remains unchanged. When a conversion is inexact, the value returned is rounded according to the rounding control bits in the MXCSR register."},{"name":"\u200b","value":"This instruction causes a transition from x87 FPU to MMX technology operation (that is, the x87 FPU top-of-stack pointer is set to 0 and the x87 FPU tag word is set to all 0s [valid]). If this instruction is executed while an x87 FPU floating-point exception is pending, the exception is handled before the CVTPI2PS instruction is executed."},{"name":"\u200b","value":"In 64-bit mode, use of the REX.R prefix permits this instruction to access additional registers (XMM8-XMM15)."},{"name":"C/C++ Intrinsics","value":"`CVTPI2PS: __m128 _mm_cvtpi32_ps(__m128 a, __m64 b)\n`"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}