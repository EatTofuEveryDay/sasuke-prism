{"title":"VCVTTPS2UQQ — Convert with Truncation Packed Single Precision Floating-Point Values to Packed Unsigned Quadword Integer Values","fields":[{"name":"Instruction Modes","value":"`VCVTTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst`\n`VCVTTPS2UQQ ymm1 {k1}{z}, xmm2/m128/m32bcst`\n`VCVTTPS2UQQ zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}`"},{"name":"Description","value":"Converts with truncation up to eight packed single-precision floating-point values in the source operand to unsigned quadword integers in the destination operand."},{"name":"\u200b","value":"When a conversion is inexact, the value returned is rounded according to the rounding control bits in the MXCSR register. If a converted result cannot be represented in the destination format, the floating-point invalid exception is raised, and if this exception is masked, the integer value 2w – 1 is returned, where w represents the number of bits in the destination format."},{"name":"\u200b","value":"EVEX encoded versions: The source operand is a YMM/XMM/XMM (low 64 bits) register or a 256/128/64-bit memory location. The destination operation is a vector register conditionally updated with writemask k1."},{"name":"\u200b","value":"Note: EVEX.vvvv is reserved and must be 1111b otherwise instructions will #UD."},{"name":"C/C++ Intriniscs","value":"`VCVTTPS2UQQ _mm&lt;size&gt;[_mask[z]]_cvtt[_round]ps_epu64 VCVTTPS2UQQ __m512i _mm512_cvttps_epu64( __m256 a);\n`"},{"name":"\u200b","value":"`VCVTTPS2UQQ __m512i _mm512_mask_cvttps_epu64( __m512i s, __mmask16 k, __m256 a);\n`"},{"name":"\u200b","value":"`VCVTTPS2UQQ __m512i _mm512_maskz_cvttps_epu64( __mmask16 k, __m256 a);\n`"},{"name":"\u200b","value":"`VCVTTPS2UQQ __m512i _mm512_cvtt_roundps_epu64( __m256 a, int sae);\n`"},{"name":"\u200b","value":"`VCVTTPS2UQQ __m512i _mm512_mask_cvtt_roundps_epu64( __m512i s, __mmask16 k, __m256 a, int sae);\n`"},{"name":"\u200b","value":"`VCVTTPS2UQQ __m512i _mm512_maskz_cvtt_roundps_epu64( __mmask16 k, __m256 a, int sae);\n`"},{"name":"\u200b","value":"`VCVTTPS2UQQ __m256i _mm256_mask_cvttps_epu64( __m256i s, __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VCVTTPS2UQQ __m256i _mm256_maskz_cvttps_epu64( __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VCVTTPS2UQQ __m128i _mm_mask_cvttps_epu64( __m128i s, __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VCVTTPS2UQQ __m128i _mm_maskz_cvttps_epu64( __mmask8 k, __m128 a);\n`"},{"name":"CPUID Flags","value":"AVX512VL AVX512DQ"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}