{"title":"VBROADCAST â€” Load with Broadcast Floating-Point Data","fields":[{"name":"Instruction Modes","value":"`VBROADCASTSS xmm1, m32`\n`VBROADCASTSS ymm1, m32`\n`VBROADCASTSD ymm1, m64`\n`VBROADCASTF128 ymm1, m128`\n`VBROADCASTSS xmm1, xmm2`\n`VBROADCASTSS ymm1, xmm2`\n`VBROADCASTSD ymm1, xmm2`\n`VBROADCASTSD ymm1 {k1}{z}, xmm2/m64`\n`VBROADCASTSD zmm1 {k1}{z}, xmm2/m64`\n`VBROADCASTF32X2 ymm1 {k1}{z}, xmm2/m64`\n`VBROADCASTF32X2 zmm1 {k1}{z}, xmm2/m64`\n`VBROADCASTSS xmm1 {k1}{z}, xmm2/m32`\n`VBROADCASTSS ymm1 {k1}{z}, xmm2/m32`\n`VBROADCASTSS zmm1 {k1}{z}, xmm2/m32`\n`VBROADCASTF32X4 ymm1 {k1}{z}, m128`\n`VBROADCASTF32X4 zmm1 {k1}{z}, m128`\n`VBROADCASTF64X2 ymm1 {k1}{z}, m128`\n`VBROADCASTF64X2 zmm1 {k1}{z}, m128`\n`VBROADCASTF32X8 zmm1 {k1}{z}, m256`\n`VBROADCASTF64X4 zmm1 {k1}{z}, m256`"},{"name":"Description","value":"VBROADCASTSD/VBROADCASTSS/VBROADCASTF128 load floating-point values as one tuple from the source operand (second operand) in memory and broadcast to all elements of the destination operand (first operand)."},{"name":"\u200b","value":"VEX256-encoded versions: The destination operand is a YMM register. The source operand is either a 32-bit, 64-bit, or 128-bit memory location. Register source encodings are reserved and will #UD. Bits (MAXVL-1:256) of the destination register are zeroed."},{"name":"\u200b","value":"EVEX-encoded versions: The destination operand is a ZMM/YMM/XMM register and updated according to the writemask k1. The source operand is either a 32-bit, 64-bit memory location or the low doubleword/quadword element of an XMM register."},{"name":"\u200b","value":"VBROADCASTF32X2/VBROADCASTF32X4/VBROADCASTF64X2/VBROADCASTF32X8/VBROADCASTF64X4 load floating-point values as tuples from the source operand (the second operand) in memory or register and broadcast to all elements of the destination operand (the first operand). The destination operand is a YMM/ZMM register updated according to the writemask k1. The source operand is either a register or 64-bit/128-bit/256-bit memory location."},{"name":"\u200b","value":"VBROADCASTSD and VBROADCASTF128,F32x4 and F64x2 are only supported as 256-bit and 512-bit wide versions and up. VBROADCASTSS is supported in 128-bit, 256-bit and 512-bit wide versions. F32x8 and F64x4 are only supported as 512-bit wide versions."},{"name":"\u200b","value":"VBROADCASTF32X2/VBROADCASTF32X4/VBROADCASTF32X8 have 32-bit granularity. VBROADCASTF64X2 and VBROADCASTF64X4 have 64-bit granularity."},{"name":"\u200b","value":"Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instructions will #UD."},{"name":"\u200b","value":"If VBROADCASTSD or VBROADCASTF128 is encoded with VEX.L= 0, an attempt to execute the instruction encoded with VEX.L= 0 will cause an #UD exception."},{"name":"C/C++ Intriniscs","value":"`VBROADCASTF32x2 __m512 _mm512_broadcast_f32x2( __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTF32x2 __m512 _mm512_mask_broadcast_f32x2(__m512 s, __mmask16 k, __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTF32x2 __m512 _mm512_maskz_broadcast_f32x2( __mmask16 k, __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTF32x2 __m256 _mm256_broadcast_f32x2( __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTF32x2 __m256 _mm256_mask_broadcast_f32x2(__m256 s, __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTF32x2 __m256 _mm256_maskz_broadcast_f32x2( __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTF32x4 __m512 _mm512_broadcast_f32x4( __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTF32x4 __m512 _mm512_mask_broadcast_f32x4(__m512 s, __mmask16 k, __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTF32x4 __m512 _mm512_maskz_broadcast_f32x4( __mmask16 k, __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTF32x4 __m256 _mm256_broadcast_f32x4( __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTF32x4 __m256 _mm256_mask_broadcast_f32x4(__m256 s, __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTF32x4 __m256 _mm256_maskz_broadcast_f32x4( __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTF32x8 __m512 _mm512_broadcast_f32x8( __m256 a);\n`"},{"name":"\u200b","value":"`VBROADCASTF32x8 __m512 _mm512_mask_broadcast_f32x8(__m512 s, __mmask16 k, __m256 a);\n`"},{"name":"\u200b","value":"`VBROADCASTF32x8 __m512 _mm512_maskz_broadcast_f32x8( __mmask16 k, __m256 a);\n`"},{"name":"\u200b","value":"`VBROADCASTF64x2 __m512d _mm512_broadcast_f64x2( __m128d a);\n`"},{"name":"\u200b","value":"`VBROADCASTF64x2 __m512d _mm512_mask_broadcast_f64x2(__m512d s, __mmask8 k, __m128d a);\n`"},{"name":"\u200b","value":"`VBROADCASTF64x2 __m512d _mm512_maskz_broadcast_f64x2( __mmask8 k, __m128d a);\n`"},{"name":"\u200b","value":"`VBROADCASTF64x2 __m256d _mm256_broadcast_f64x2( __m128d a);\n`"},{"name":"\u200b","value":"`VBROADCASTF64x2 __m256d _mm256_mask_broadcast_f64x2(__m256d s, __mmask8 k, __m128d a);\n`"},{"name":"\u200b","value":"`VBROADCASTF64x2 __m256d _mm256_maskz_broadcast_f64x2( __mmask8 k, __m128d a);\n`"},{"name":"\u200b","value":"`VBROADCASTF64x4 __m512d _mm512_broadcast_f64x4( __m256d a);\n`"},{"name":"\u200b","value":"`VBROADCASTF64x4 __m512d _mm512_mask_broadcast_f64x4(__m512d s, __mmask8 k, __m256d a);\n`"},{"name":"\u200b","value":"`VBROADCASTF64x4 __m512d _mm512_maskz_broadcast_f64x4( __mmask8 k, __m256d a);\n`"},{"name":"\u200b","value":"`VBROADCASTSD __m512d _mm512_broadcastsd_pd( __m128d a);\n`"},{"name":"\u200b","value":"`VBROADCASTSD __m512d _mm512_mask_broadcastsd_pd(__m512d s, __mmask8 k, __m128d a);\n`"},{"name":"\u200b","value":"`VBROADCASTSD __m512d _mm512_maskz_broadcastsd_pd(__mmask8 k, __m128d a);\n`"},{"name":"\u200b","value":"`VBROADCASTSD __m256d _mm256_broadcastsd_pd(__m128d a);\n`"},{"name":"\u200b","value":"`VBROADCASTSD __m256d _mm256_mask_broadcastsd_pd(__m256d s, __mmask8 k, __m128d a);\n`"},{"name":"\u200b","value":"`VBROADCASTSD __m256d _mm256_maskz_broadcastsd_pd( __mmask8 k, __m128d a);\n`"},{"name":"\u200b","value":"`VBROADCASTSD __m256d _mm256_broadcast_sd(double *a);\n`"},{"name":"\u200b","value":"`VBROADCASTSS __m512 _mm512_broadcastss_ps( __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTSS __m512 _mm512_mask_broadcastss_ps(__m512 s, __mmask16 k, __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTSS __m512 _mm512_maskz_broadcastss_ps( __mmask16 k, __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTSS __m256 _mm256_broadcastss_ps(__m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTSS __m256 _mm256_mask_broadcastss_ps(__m256 s, __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTSS __m256 _mm256_maskz_broadcastss_ps( __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTSS __m128 _mm_broadcastss_ps(__m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTSS __m128 _mm_mask_broadcastss_ps(__m128 s, __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTSS __m128 _mm_maskz_broadcastss_ps( __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VBROADCASTSS __m128 _mm_broadcast_ss(float *a);\n`"},{"name":"\u200b","value":"`VBROADCASTSS __m256 _mm256_broadcast_ss(float *a);\n`"},{"name":"\u200b","value":"`VBROADCASTF128 __m256 _mm256_broadcast_ps(__m128 * a);\n`"},{"name":"\u200b","value":"`VBROADCASTF128 __m256d _mm256_broadcast_pd(__m128d * a);\n`"},{"name":"CPUID Flags","value":"AVX"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}