{"title":"FPREM — Partial Remainder","fields":[{"name":"Instruction Modes","value":"`FPREM`"},{"name":"Description","value":"Computes the remainder obtained from dividing the value in the ST(0) register (the dividend) by the value in the ST(1) register (the divisor or modulus), and stores the result in ST(0). The remainder represents the following value:"},{"name":"\u200b","value":"Remainder ← ST(0) − (Q ∗ ST(1))"},{"name":"\u200b","value":"Here, Q is an integer value that is obtained by truncating the floating-point number quotient of [ST(0) / ST(1)] toward zero. The sign of the remainder is the same as the sign of the dividend. The magnitude of the remainder is less than that of the modulus, unless a partial remainder was computed (as described below)."},{"name":"\u200b","value":"This instruction produces an exact result; the inexact-result exception does not occur and the rounding control has no effect. The following table shows the results obtained when computing the remainder of various classes of numbers, assuming that underflow does not occur."}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}