{"title":"VPERMILPD â€” Permute In-Lane of Pairs of Double-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`VPERMILPD xmm1, xmm2, xmm3/m128`\n`VPERMILPD ymm1, ymm2, ymm3/m256`\n`VPERMILPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VPERMILPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VPERMILPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst`\n`ib VPERMILPD xmm1, xmm2/m128, imm8`\n`ib VPERMILPD ymm1, ymm2/m256, imm8`\n`ib VPERMILPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8`\n`ib VPERMILPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8`\n`ib VPERMILPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8`"},{"name":"Description","value":"(variable control version)"},{"name":"\u200b","value":"Permute pairs of double-precision floating-point values in the first source operand (second operand), each using a 1-bit control field residing in the corresponding quadword element of the second source operand (third operand). Permuted results are stored in the destination operand (first operand)."},{"name":"\u200b","value":"The control bits are located at bit 0 of each quadword element (see Figure 5-24). Each control determines which of the source element in an input pair is selected for the destination element. Each pair of source elements must lie in the same 128-bit region as the destination."},{"name":"\u200b","value":"EVEX version: The second source operand (third operand) is a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 64-bit memory location. Permuted results are written to the destination under the writemask."},{"name":"C/C++ Intriniscs","value":"`VPERMILPD __m512d _mm512_permute_pd( __m512d a, int imm);\n`"},{"name":"\u200b","value":"`VPERMILPD __m512d _mm512_mask_permute_pd(__m512d s, __mmask8 k, __m512d a, int imm);\n`"},{"name":"\u200b","value":"`VPERMILPD __m512d _mm512_maskz_permute_pd( __mmask8 k, __m512d a, int imm);\n`"},{"name":"\u200b","value":"`VPERMILPD __m256d _mm256_mask_permute_pd(__m256d s, __mmask8 k, __m256d a, int imm);\n`"},{"name":"\u200b","value":"`VPERMILPD __m256d _mm256_maskz_permute_pd( __mmask8 k, __m256d a, int imm);\n`"},{"name":"\u200b","value":"`VPERMILPD __m128d _mm_mask_permute_pd(__m128d s, __mmask8 k, __m128d a, int imm);\n`"},{"name":"\u200b","value":"`VPERMILPD __m128d _mm_maskz_permute_pd( __mmask8 k, __m128d a, int imm);\n`"},{"name":"\u200b","value":"`VPERMILPD __m512d _mm512_permutevar_pd( __m512i i, __m512d a);\n`"},{"name":"\u200b","value":"`VPERMILPD __m512d _mm512_mask_permutevar_pd(__m512d s, __mmask8 k, __m512i i, __m512d a);\n`"},{"name":"\u200b","value":"`VPERMILPD __m512d _mm512_maskz_permutevar_pd( __mmask8 k, __m512i i, __m512d a);\n`"},{"name":"\u200b","value":"`VPERMILPD __m256d _mm256_mask_permutevar_pd(__m256d s, __mmask8 k, __m256d i, __m256d a);\n`"},{"name":"\u200b","value":"`VPERMILPD __m256d _mm256_maskz_permutevar_pd( __mmask8 k, __m256d i, __m256d a);\n`"},{"name":"\u200b","value":"`VPERMILPD __m128d _mm_mask_permutevar_pd(__m128d s, __mmask8 k, __m128d i, __m128d a);\n`"},{"name":"\u200b","value":"`VPERMILPD __m128d _mm_maskz_permutevar_pd( __mmask8 k, __m128d i, __m128d a);\n`"},{"name":"\u200b","value":"`VPERMILPD __m128d _mm_permute_pd (__m128d a, int control)\n`"},{"name":"\u200b","value":"`VPERMILPD __m256d _mm256_permute_pd (__m256d a, int control)\n`"},{"name":"\u200b","value":"`VPERMILPD __m128d _mm_permutevar_pd (__m128d a, __m128i control);\n`"},{"name":"\u200b","value":"`VPERMILPD __m256d _mm256_permutevar_pd (__m256d a, __m256i control);\n`"},{"name":"CPUID Flags","value":"AVX"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}