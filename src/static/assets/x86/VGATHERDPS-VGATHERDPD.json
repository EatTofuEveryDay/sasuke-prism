{"title":"VGATHERDPS/VGATHERDPD — Gather Packed Single, Packed Double with Signed Dword","fields":[{"name":"Instruction Modes","value":"`VGATHERDPS xmm1 {k1}, vm32x`\n`VGATHERDPS ymm1 {k1}, vm32y`\n`VGATHERDPS zmm1 {k1}, vm32z`\n`VGATHERDPD xmm1 {k1}, vm32x`\n`VGATHERDPD ymm1 {k1}, vm32x`\n`VGATHERDPD zmm1 {k1}, vm32y`"},{"name":"Description","value":"A set of single-precision/double-precision faulting-point memory locations pointed by base address BASE_ADDR and index vector V_INDEX with scale SCALE are gathered. The result is written into a vector register. The elements are specified via the VSIB (i.e., the index register is a vector register, holding packed indices). Elements will only be loaded if their corresponding mask bit is one. If an element’s mask bit is not set, the corresponding element of the destination register is left unchanged. The entire mask register will be set to zero by this instruction unless it triggers an exception."},{"name":"\u200b","value":"This instruction can be suspended by an exception if at least one element is already gathered (i.e., if the exception is triggered by an element other than the right most one with its mask bit set). When this happens, the destination register and the mask register (k1) are partially updated; those elements that have been gathered are placed into the destination register and have their mask bits set to zero. If any traps or interrupts are pending from already gathered elements, they will be delivered in lieu of the exception; in this case, EFLAG.RF is set to one so an instruction breakpoint is not re-triggered when the instruction is continued."},{"name":"\u200b","value":"If the data element size is less than the index element size, the higher part of the destination register and the mask register do not correspond to any elements being gathered. This instruction sets those higher parts to zero. It may update these unused elements to one or both of those registers even if the instruction triggers an exception, and even if the instruction triggers the exception before gathering any elements."},{"name":"\u200b","value":"Note that:"},{"name":"C/C++ Intriniscs","value":"`VGATHERDPD __m512d _mm512_i32gather_pd( __m256i vdx, void * base, int scale);\n`"},{"name":"\u200b","value":"`VGATHERDPD __m512d _mm512_mask_i32gather_pd(__m512d s, __mmask8 k, __m256i vdx, void * base, int scale);\n`"},{"name":"\u200b","value":"`VGATHERDPD __m256d _mm256_mmask_i32gather_pd(__m256d s, __mmask8 k, __m128i vdx, void * base, int scale);\n`"},{"name":"\u200b","value":"`VGATHERDPD __m128d _mm_mmask_i32gather_pd(__m128d s, __mmask8 k, __m128i vdx, void * base, int scale);\n`"},{"name":"\u200b","value":"`VGATHERDPS __m512 _mm512_i32gather_ps( __m512i vdx, void * base, int scale);\n`"},{"name":"\u200b","value":"`VGATHERDPS __m512 _mm512_mask_i32gather_ps(__m512 s, __mmask16 k, __m512i vdx, void * base, int scale);\n`"},{"name":"\u200b","value":"`VGATHERDPS __m256 _mm256_mmask_i32gather_ps(__m256 s, __mmask8 k, __m256i vdx, void * base, int scale);\n`"},{"name":"\u200b","value":"`GATHERDPS __m128 _mm_mmask_i32gather_ps(__m128 s, __mmask8 k, __m128i vdx, void * base, int scale);\n`"},{"name":"CPUID Flags","value":"AVX512VL AVX512F"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}