{"title":"VREDUCESD — Perform a Reduction Transformation on a Scalar Float64 Value","fields":[{"name":"Instruction Modes","value":"`imm8/r`"},{"name":"Description","value":"Perform a reduction transformation of the binary encoded double-precision FP value in the low qword element of the second source operand (the third operand) and store the reduced result in binary FP format to the low qword element of the destination operand (the first operand) under the writemask k1. Bits 127:64 of the destination operand are copied from respective qword elements of the first source operand (the second operand)."},{"name":"\u200b","value":"The reduction transformation subtracts the integer part and the leading M fractional bits from the binary FP source value, where M is a unsigned integer specified by imm8[7:4], see Figure 5-28. Specifically, the reduction transformation can be expressed as:"},{"name":"\u200b","value":"dest = src – (ROUND(2M*src))*2-M;"},{"name":"\u200b","value":"where “Round()” treats “src”, “2M”, and their product as binary FP numbers with normalized significand and biased exponents."},{"name":"\u200b","value":"The magnitude of the reduced result can be expressed by considering src= 2p*man2,"},{"name":"\u200b","value":"where ‘man2’ is the normalized significand and ‘p’ is the unbiased exponent"},{"name":"\u200b","value":"Then if RC = RNE: 0&lt;=|Reduced Result|&lt;=2p-M-1"},{"name":"\u200b","value":"Then if RC ≠ RNE: 0&lt;=|Reduced Result|&lt;2p-M"},{"name":"\u200b","value":"This instruction might end up with a precision exception set. However, in case of SPE set (i.e. Suppress Precision Exception, which is imm8[3]=1), no precision exception is reported."},{"name":"\u200b","value":"The operation is write masked."},{"name":"\u200b","value":"Handling of special case of input values are listed in Table 5-24."},{"name":"C/C++ Intriniscs","value":"`VREDUCESD __m128d _mm_mask_reduce_sd( __m128d a, __m128d b, int imm, int sae)\n`"},{"name":"\u200b","value":"`VREDUCESD __m128d _mm_mask_reduce_sd(__m128d s, __mmask16 k, __m128d a, __m128d b, int imm, int sae)\n`"},{"name":"\u200b","value":"`VREDUCESD __m128d _mm_maskz_reduce_sd(__mmask16 k, __m128d a, __m128d b, int imm, int sae)\n`"},{"name":"CPUID Flags","value":"AVX512D Q"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}