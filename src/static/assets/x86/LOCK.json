{"title":"LOCK — Assert LOCK# Signal Prefix","fields":[{"name":"Instruction Modes","value":"`LOCK`"},{"name":"Description","value":"Causes the processor’s LOCK# signal to be asserted during execution of the accompanying instruction (turns the instruction into an atomic instruction). In a multiprocessor environment, the LOCK# signal ensures that the processor has exclusive use of any shared memory while the signal is asserted."},{"name":"\u200b","value":"In most IA-32 and all Intel 64 processors, locking may occur without the LOCK# signal being asserted. See the “IA-32 Architecture Compatibility” section below for more details."},{"name":"\u200b","value":"The LOCK prefix can be prepended only to the following instructions and only to those forms of the instructions where the destination operand is a memory operand: ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCH8B, CMPXCHG16B, DEC, INC, NEG, NOT, OR, SBB, SUB, XOR, XADD, and XCHG. If the LOCK prefix is used with one of these instructions and the source operand is a memory operand, an undefined opcode exception (#UD) may be generated. An undefined opcode exception will also be generated if the LOCK prefix is used with any instruction not in the above list. The XCHG instruction always asserts the LOCK# signal regardless of the presence or absence of the LOCK prefix."},{"name":"\u200b","value":"The LOCK prefix is typically used with the BTS instruction to perform a read-modify-write operation on a memory location in shared memory environment."},{"name":"\u200b","value":"The integrity of the LOCK prefix is not affected by the alignment of the memory field. Memory locking is observed for arbitrarily misaligned fields."},{"name":"\u200b","value":"This instruction’s operation is the same in non-64-bit modes and 64-bit mode."}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}