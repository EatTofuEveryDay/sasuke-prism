{"title":"VCVTUSI2SD â€” Convert Unsigned Integer to Scalar Double-Precision Floating-Point Value","fields":[{"name":"Instruction Modes","value":"`VCVTUSI2SD xmm1, xmm2, r/m32`\n`VCVTUSI2SD xmm1, xmm2, r/m64{er}`"},{"name":"Description","value":"Converts an unsigned doubleword integer (or unsigned quadword integer if operand size is 64 bits) in the second source operand to a double-precision floating-point value in the destination operand. The result is stored in the low quadword of the destination operand. When conversion is inexact, the value returned is rounded according to the rounding control bits in the MXCSR register."},{"name":"\u200b","value":"The second source operand can be a general-purpose register or a 32/64-bit memory location. The first source and destination operands are XMM registers. Bits (127:64) of the XMM register destination are copied from corresponding bits in the first source operand. Bits (MAXVL-1:128) of the destination register are zeroed."},{"name":"\u200b","value":"EVEX.W1 version: promotes the instruction to use 64-bit input value in 64-bit mode."},{"name":"\u200b","value":"EVEX.W0 version: attempt to encode this instruction with EVEX embedded rounding is ignored."},{"name":"C/C++ Intriniscs","value":"`VCVTUSI2SD __m128d _mm_cvtu32_sd( __m128d s, unsigned a);\n`"},{"name":"\u200b","value":"`VCVTUSI2SD __m128d _mm_cvtu64_sd( __m128d s, unsigned __int64 a);\n`"},{"name":"\u200b","value":"`VCVTUSI2SD __m128d _mm_cvt_roundu64_sd( __m128d s, unsigned __int64 a, int r);\n`"},{"name":"CPUID Flags","value":"AVX512F"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}