{"title":"CVTPS2PD â€” Convert Packed Single-Precision Floating-Point Values to Packed Double-Precision Floating-Point Values","fields":[{"name":"Instruction Modes","value":"`CVTPS2PD xmm1, xmm2/m64`\n`VCVTPS2PD xmm1, xmm2/m64`\n`VCVTPS2PD ymm1, xmm2/m128`\n`VCVTPS2PD xmm1 {k1}{z}, xmm2/m64/m32bcst`\n`VCVTPS2PD ymm1 {k1}{z}, xmm2/m128/m32bcst`\n`VCVTPS2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}`"},{"name":"Description","value":"Converts two, four or eight packed single-precision floating-point values in the source operand (second operand) to two, four or eight packed double-precision floating-point values in the destination operand (first operand)."},{"name":"\u200b","value":"EVEX encoded versions: The source operand is a YMM/XMM/XMM (low 64-bits) register, a 256/128/64-bit memory location or a 256/128/64-bit vector broadcasted from a 32-bit memory location. The destination operand is a ZMM/YMM/XMM register conditionally updated with writemask k1."},{"name":"\u200b","value":"VEX.256 encoded version: The source operand is an XMM register or 128- bit memory location. The destination operand is a YMM register. Bits (MAXVL-1:256) of the corresponding destination ZMM register are zeroed."},{"name":"\u200b","value":"VEX.128 encoded version: The source operand is an XMM register or 64- bit memory location. The destination operand is a XMM register. The upper Bits (MAXVL-1:128) of the corresponding ZMM register destination are zeroed."},{"name":"\u200b","value":"128-bit Legacy SSE version: The source operand is an XMM register or 64- bit memory location. The destination operand is an XMM register. The upper Bits (MAXVL-1:128) of the corresponding ZMM register destination are unmodified."},{"name":"\u200b","value":"Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instructions will #UD."},{"name":"C/C++ Intriniscs","value":"`VCVTPS2PD __m512d _mm512_cvtps_pd( __m256 a);\n`"},{"name":"\u200b","value":"`VCVTPS2PD __m512d _mm512_mask_cvtps_pd( __m512d s, __mmask8 k, __m256 a);\n`"},{"name":"\u200b","value":"`VCVTPS2PD __m512d _mm512_maskz_cvtps_pd( __mmask8 k, __m256 a);\n`"},{"name":"\u200b","value":"`VCVTPS2PD __m512d _mm512_cvt_roundps_pd( __m256 a, int sae);\n`"},{"name":"\u200b","value":"`VCVTPS2PD __m512d _mm512_mask_cvt_roundps_pd( __m512d s, __mmask8 k, __m256 a, int sae);\n`"},{"name":"\u200b","value":"`VCVTPS2PD __m512d _mm512_maskz_cvt_roundps_pd( __mmask8 k, __m256 a, int sae);\n`"},{"name":"\u200b","value":"`VCVTPS2PD __m256d _mm256_mask_cvtps_pd( __m256d s, __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VCVTPS2PD __m256d _mm256_maskz_cvtps_pd( __mmask8 k, __m128a);\n`"},{"name":"\u200b","value":"`VCVTPS2PD __m128d _mm_mask_cvtps_pd( __m128d s, __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VCVTPS2PD __m128d _mm_maskz_cvtps_pd( __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VCVTPS2PD __m256d _mm256_cvtps_pd (__m128 a)\n`"},{"name":"\u200b","value":"`CVTPS2PD __m128d _mm_cvtps_pd (__m128 a)\n`"},{"name":"CPUID Flags","value":"SSE2"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}