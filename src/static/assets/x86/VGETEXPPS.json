{"title":"VGETEXPPS â€” Convert Exponents of Packed SP FP Values to SP FP Values","fields":[{"name":"Instruction Modes","value":"`VGETEXPPS xmm1 {k1}{z}, xmm2/m128/m32bcst`\n`VGETEXPPS ymm1 {k1}{z}, ymm2/m256/m32bcst`\n`VGETEXPPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}`"},{"name":"Description","value":"Extracts the biased exponents from the normalized SP FP representation of each dword element of the source operand (the second operand) as unbiased signed integer value, or convert the denormal representation of input data to unbiased negative integer values. Each integer value of the unbiased exponent is converted to single-precision FP value and written to the corresponding dword elements of the destination operand (the first operand) as SP FP numbers."},{"name":"\u200b","value":"The destination operand is a ZMM/YMM/XMM register and updated under the writemask. The source operand can be a ZMM/YMM/XMM register, a 512/256/128-bit memory location, or a 512/256/128-bit vector broadcasted from a 32-bit memory location."},{"name":"\u200b","value":"EVEX.vvvv is reserved and must be 1111b, otherwise instructions will #UD."},{"name":"\u200b","value":"Each GETEXP operation converts the exponent value into a FP number (permitting input value in denormal representation). Special cases of input values are listed in Table 5-15."},{"name":"\u200b","value":"The formula is:"},{"name":"\u200b","value":"GETEXP(x) = floor(log2(|x|))"},{"name":"\u200b","value":"Notation floor(x) stands for maximal integer not exceeding real number x."},{"name":"\u200b","value":"Software usage of VGETEXPxx and VGETMANTxx instructions generally involve a combination of GETEXP operation and GETMANT operation (see VGETMANTPD). Thus VGETEXPxx instruction do not require software to handle SIMD FP exceptions."},{"name":"C/C++ Intrinsics","value":"`VGETEXPPS __m512 _mm512_getexp_ps( __m512 a);\n`"},{"name":"\u200b","value":"`VGETEXPPS __m512 _mm512_mask_getexp_ps(__m512 s, __mmask16 k, __m512 a);\n`"},{"name":"\u200b","value":"`VGETEXPPS __m512 _mm512_maskz_getexp_ps( __mmask16 k, __m512 a);\n`"},{"name":"\u200b","value":"`VGETEXPPS __m512 _mm512_getexp_round_ps( __m512 a, int sae);\n`"},{"name":"\u200b","value":"`VGETEXPPS __m512 _mm512_mask_getexp_round_ps(__m512 s, __mmask16 k, __m512 a, int sae);\n`"},{"name":"\u200b","value":"`VGETEXPPS __m512 _mm512_maskz_getexp_round_ps( __mmask16 k, __m512 a, int sae);\n`"},{"name":"\u200b","value":"`VGETEXPPS __m256 _mm256_getexp_ps(__m256 a);\n`"},{"name":"\u200b","value":"`VGETEXPPS __m256 _mm256_mask_getexp_ps(__m256 s, __mmask8 k, __m256 a);\n`"},{"name":"\u200b","value":"`VGETEXPPS __m256 _mm256_maskz_getexp_ps( __mmask8 k, __m256 a);\n`"},{"name":"\u200b","value":"`VGETEXPPS __m128 _mm_getexp_ps(__m128 a);\n`"},{"name":"\u200b","value":"`VGETEXPPS __m128 _mm_mask_getexp_ps(__m128 s, __mmask8 k, __m128 a);\n`"},{"name":"\u200b","value":"`VGETEXPPS __m128 _mm_maskz_getexp_ps( __mmask8 k, __m128 a);\n`"},{"name":"CPUID Flags","value":"AVX512VL AVX512F"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}