{"title":"VGETEXPPD â€” Convert Exponents of Packed DP FP Values to DP FP Values","fields":[{"name":"Instruction Modes","value":"`VGETEXPPD xmm1 {k1}{z}, xmm2/m128/m64bcst`\n`VGETEXPPD ymm1 {k1}{z}, ymm2/m256/m64bcst`\n`VGETEXPPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}`"},{"name":"Description","value":"Extracts the biased exponents from the normalized DP FP representation of each qword data element of the source operand (the second operand) as unbiased signed integer value, or convert the denormal representation of input data to unbiased negative integer values. Each integer value of the unbiased exponent is converted to double-precision FP value and written to the corresponding qword elements of the destination operand (the first operand) as DP FP numbers."},{"name":"\u200b","value":"The destination operand is a ZMM/YMM/XMM register and updated under the writemask. The source operand can be a ZMM/YMM/XMM register, a 512/256/128-bit memory location, or a 512/256/128-bit vector broadcasted from a 64-bit memory location."},{"name":"\u200b","value":"EVEX.vvvv is reserved and must be 1111b, otherwise instructions will #UD."},{"name":"\u200b","value":"Each GETEXP operation converts the exponent value into a FP number (permitting input value in denormal representation). Special cases of input values are listed in Table 5-14."},{"name":"\u200b","value":"The formula is:"},{"name":"\u200b","value":"GETEXP(x) = floor(log2(|x|))"},{"name":"\u200b","value":"Notation floor(x) stands for the greatest integer not exceeding real number x."},{"name":"C/C++ Intriniscs","value":"`VGETEXPPD __m512d _mm512_getexp_pd(__m512d a);\n`"},{"name":"\u200b","value":"`VGETEXPPD __m512d _mm512_mask_getexp_pd(__m512d s, __mmask8 k, __m512d a);\n`"},{"name":"\u200b","value":"`VGETEXPPD __m512d _mm512_maskz_getexp_pd( __mmask8 k, __m512d a);\n`"},{"name":"\u200b","value":"`VGETEXPPD __m512d _mm512_getexp_round_pd(__m512d a, int sae);\n`"},{"name":"\u200b","value":"`VGETEXPPD __m512d _mm512_mask_getexp_round_pd(__m512d s, __mmask8 k, __m512d a, int sae);\n`"},{"name":"\u200b","value":"`VGETEXPPD __m512d _mm512_maskz_getexp_round_pd( __mmask8 k, __m512d a, int sae);\n`"},{"name":"\u200b","value":"`VGETEXPPD __m256d _mm256_getexp_pd(__m256d a);\n`"},{"name":"\u200b","value":"`VGETEXPPD __m256d _mm256_mask_getexp_pd(__m256d s, __mmask8 k, __m256d a);\n`"},{"name":"\u200b","value":"`VGETEXPPD __m256d _mm256_maskz_getexp_pd( __mmask8 k, __m256d a);\n`"},{"name":"\u200b","value":"`VGETEXPPD __m128d _mm_getexp_pd(__m128d a);\n`"},{"name":"\u200b","value":"`VGETEXPPD __m128d _mm_mask_getexp_pd(__m128d s, __mmask8 k, __m128d a);\n`"},{"name":"\u200b","value":"`VGETEXPPD __m128d _mm_maskz_getexp_pd( __mmask8 k, __m128d a);\n`"},{"name":"CPUID Flags","value":"AVX512VL AVX512F"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}