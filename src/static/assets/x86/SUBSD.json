{"title":"SUBSD â€” Subtract Scalar Double-Precision Floating-Point Value","fields":[{"name":"Instruction Modes","value":"`SUBSD xmm1, xmm2/m64`\n`VSUBSD xmm1,xmm2, xmm3/m64`\n`VSUBSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}`"},{"name":"Description","value":"Subtract the low double-precision floating-point value in the second source operand from the first source operand and stores the double-precision floating-point result in the low quadword of the destination operand."},{"name":"\u200b","value":"The second source operand can be an XMM register or a 64-bit memory location. The first source and destination operands are XMM registers."},{"name":"\u200b","value":"128-bit Legacy SSE version: The destination and first source operand are the same. Bits (MAXVL-1:64) of the corresponding destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 and EVEX encoded versions: Bits (127:64) of the XMM register destination are copied from corresponding bits in the first source operand. Bits (MAXVL-1:128) of the destination register are zeroed."},{"name":"\u200b","value":"EVEX encoded version: The low quadword element of the destination operand is updated according to the writemask."},{"name":"\u200b","value":"Software should ensure VSUBSD is encoded with VEX.L=0. Encoding VSUBSD with VEX.L=1 may encounter unpredictable behavior across different processor generations."},{"name":"C/C++ Intrinsics","value":"`VSUBSD __m128d _mm_mask_sub_sd (__m128d s, __mmask8 k, __m128d a, __m128d b);\n`"},{"name":"\u200b","value":"`VSUBSD __m128d _mm_maskz_sub_sd (__mmask8 k, __m128d a, __m128d b);\n`"},{"name":"\u200b","value":"`VSUBSD __m128d _mm_sub_round_sd (__m128d a, __m128d b, int);\n`"},{"name":"\u200b","value":"`VSUBSD __m128d _mm_mask_sub_round_sd (__m128d s, __mmask8 k, __m128d a, __m128d b, int);\n`"},{"name":"\u200b","value":"`VSUBSD __m128d _mm_maskz_sub_round_sd (__mmask8 k, __m128d a, __m128d b, int);\n`"},{"name":"\u200b","value":"`SUBSD __m128d _mm_sub_sd (__m128d a, __m128d b);\n`"},{"name":"CPUID Flags","value":"SSE2"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}