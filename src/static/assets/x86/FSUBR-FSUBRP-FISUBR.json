{"title":"FSUBR/FSUBRP/FISUBR — Reverse Subtract","fields":[{"name":"Instruction Modes","value":"`FSUBR m32fp`\n`FSUBR m64fp`\n`FSUBR ST(0), ST(i)`\n`FSUBR ST(i), ST(0)`\n`FSUBRP ST(i), ST(0)`\n`FSUBRP`\n`FISUBR m32int`\n`FISUBR m16int`"},{"name":"Description","value":"Subtracts the destination operand from the source operand and stores the difference in the destination location. The destination operand is always an FPU register; the source operand can be a register or a memory location. Source operands in memory can be in single-precision or double-precision floating-point format or in word or doubleword integer format."},{"name":"\u200b","value":"These instructions perform the reverse operations of the FSUB, FSUBP, and FISUB instructions. They are provided to support more efficient coding."},{"name":"\u200b","value":"The no-operand version of the instruction subtracts the contents of the ST(1) register from the ST(0) register and stores the result in ST(1). The one-operand version subtracts the contents of the ST(0) register from the contents of a memory location (either a floating-point or an integer value) and stores the result in ST(0). The two-operand version, subtracts the contents of the ST(i) register from the ST(0) register or vice versa."},{"name":"\u200b","value":"The FSUBRP instructions perform the additional operation of popping the FPU register stack following the subtraction. To pop the register stack, the processor marks the ST(0) register as empty and increments the stack pointer (TOP) by 1. The no-operand version of the floating-point reverse subtract instructions always results in the register stack being popped. In some assemblers, the mnemonic for this instruction is FSUBR rather than FSUBRP."},{"name":"\u200b","value":"The FISUBR instructions convert an integer source operand to double extended-precision floating-point format before performing the subtraction."},{"name":"\u200b","value":"The following table shows the results obtained when subtracting various classes of numbers from one another, assuming that neither overflow nor underflow occurs. Here, the DEST value is subtracted from the SRC value (SRC − DEST = result)."},{"name":"\u200b","value":"When the difference between two operands of like sign is 0, the result is +0, except for the round toward −∞ mode, in which case the result is −0. This instruction also guarantees that +0 − (−0) = +0, and that −0 − (+0) = −0. When the source operand is an integer 0, it is treated as a +0."},{"name":"\u200b","value":"When one operand is ∞, the result is ∞ of the expected sign. If both operands are ∞ of the same sign, an invalidoperation exception is generated."}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}