{"title":"PMULHUW â€” Multiply Packed Unsigned Integers and Store High Result","fields":[{"name":"Instruction Modes","value":"`PMULHUW mm1, mm2/m64`\n`PMULHUW xmm1, xmm2/m128`\n`VPMULHUW xmm1, xmm2, xmm3/m128`\n`VPMULHUW ymm1, ymm2, ymm3/m256`\n`VPMULHUW xmm1 {k1}{z}, xmm2, xmm3/m128`\n`VPMULHUW ymm1 {k1}{z}, ymm2, ymm3/m256`\n`VPMULHUW zmm1 {k1}{z}, zmm2, zmm3/m512`"},{"name":"Description","value":"Performs a SIMD unsigned multiply of the packed unsigned word integers in the destination operand (first operand) and the source operand (second operand), and stores the high 16 bits of each 32-bit intermediate results in the destination operand. (Figure 4-12 shows this operation when using 64-bit operands.)"},{"name":"\u200b","value":"In 64-bit mode and not encoded with VEX/EVEX, using a REX prefix in the form of REX.R permits this instruction to access additional registers (XMM8-XMM15)."},{"name":"\u200b","value":"Legacy SSE version 64-bit operand: The source operand can be an MMX technology register or a 64-bit memory location. The destination operand is an MMX technology register."},{"name":"\u200b","value":"128-bit Legacy SSE version: The first source and destination operands are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the corresponding YMM destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 encoded version: The first source and destination operands are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the destination YMM register are zeroed. VEX.L must be 0, otherwise the instruction will #UD."},{"name":"\u200b","value":"VEX.256 encoded version: The second source operand can be an YMM register or a 256-bit memory location. The first source and destination operands are YMM registers."},{"name":"\u200b","value":"EVEX encoded versions: The first source operand is a ZMM/YMM/XMM register. The second source operand can be a ZMM/YMM/XMM register, a 512/256/128-bit memory location. The destination operand is a ZMM/YMM/XMM register conditionally updated with writemask k1."},{"name":"C/C++ Intrinsics","value":"`VPMULHUW __m512i _mm512_mulhi_epu16(__m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMULHUW __m512i _mm512_mask_mulhi_epu16(__m512i s, __mmask32 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMULHUW __m512i _mm512_maskz_mulhi_epu16( __mmask32 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMULHUW __m256i _mm256_mask_mulhi_epu16(__m256i s, __mmask16 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMULHUW __m256i _mm256_maskz_mulhi_epu16( __mmask16 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMULHUW __m128i _mm_mask_mulhi_epu16(__m128i s, __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPMULHUW __m128i _mm_maskz_mulhi_epu16( __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`PMULHUW:__m64 _mm_mulhi_pu16(__m64 a, __m64 b)\n`"},{"name":"\u200b","value":"`(V)PMULHUW:__m128i _mm_mulhi_epu16 ( __m128i a, __m128i b)\n`"},{"name":"\u200b","value":"`VPMULHUW:__m256i _mm256_mulhi_epu16 ( __m256i a, __m256i b)\n`"},{"name":"CPUID Flags","value":"SSE"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}