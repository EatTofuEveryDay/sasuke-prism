{"title":"SARX/SHLX/SHRX â€” Shift Without Affecting Flags","fields":[{"name":"Instruction Modes","value":"`SARX r32a, r/m32, r32b`\n`SHLX r32a, r/m32, r32b`\n`SHRX r32a, r/m32, r32b`\n`SARX r64a, r/m64, r64b`\n`SHLX r64a, r/m64, r64b`\n`SHRX r64a, r/m64, r64b`"},{"name":"Description","value":"Shifts the bits of the first source operand (the second operand) to the left or right by a COUNT value specified in the second source operand (the third operand). The result is written to the destination operand (the first operand)."},{"name":"\u200b","value":"The shift arithmetic right (SARX) and shift logical right (SHRX) instructions shift the bits of the destination operand to the right (toward less significant bit locations), SARX keeps and propagates the most significant bit (sign bit) while shifting."},{"name":"\u200b","value":"The logical shift left (SHLX) shifts the bits of the destination operand to the left (toward more significant bit locations)."},{"name":"\u200b","value":"This instruction is not supported in real mode and virtual-8086 mode. The operand size is always 32 bits if not in 64-bit mode. In 64-bit mode operand size 64 requires VEX.W1. VEX.W1 is ignored in non-64-bit modes. An attempt to execute this instruction with VEX.L not equal to 0 will cause #UD."},{"name":"\u200b","value":"If the value specified in the first source operand exceeds OperandSize -1, the COUNT value is masked."},{"name":"\u200b","value":"SARX,SHRX, and SHLX instructions do not update flags."},{"name":"C/C++ Intriniscs","value":"`Auto-generated from high-level language.\n`"},{"name":"CPUID Flags","value":"BMI2"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}