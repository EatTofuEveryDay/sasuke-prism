{"title":"ADD — Add","fields":[{"name":"Instruction Modes","value":"`ADD AL, imm8`\n`ADD AX, imm16`\n`ADD EAX, imm32`\n`ADD RAX, imm32`\n`ADD r/m8, imm8`\n`ADD r/m8*, imm8`\n`ADD r/m16, imm16`\n`ADD r/m32, imm32`\n`ADD r/m64, imm32`\n`ADD r/m16, imm8`\n`ADD r/m32, imm8`\n`ADD r/m64, imm8`\n`ADD r/m8, r8`\n`ADD r/m8*, r8*`\n`ADD r/m16, r16`\n`ADD r/m32, r32`\n`ADD r/m64, r64`\n`ADD r8, r/m8`\n`ADD r8*, r/m8*`\n`ADD r16, r/m16`\n`ADD r32, r/m32`\n`ADD r64, r/m64`"},{"name":"Description","value":"Adds the destination operand (first operand) and the source operand (second operand) and then stores the result in the destination operand. The destination operand can be a register or a memory location; the source operand can be an immediate, a register, or a memory location. (However, two memory operands cannot be used in one instruction.) When an immediate value is used as an operand, it is sign-extended to the length of the destination operand format."},{"name":"\u200b","value":"The ADD instruction performs integer addition. It evaluates the result for both signed and unsigned integer operands and sets the CF and OF flags to indicate a carry (overflow) in the signed or unsigned result, respectively. The SF flag indicates the sign of the signed result."},{"name":"\u200b","value":"This instruction can be used with a LOCK prefix to allow the instruction to be executed atomically."},{"name":"\u200b","value":"In 64-bit mode, the instruction’s default operation size is 32 bits. Using a REX prefix in the form of REX.R permits access to additional registers (R8-R15). Using a REX prefix in the form of REX.W promotes operation to 64 bits. See the summary chart at the beginning of this section for encoding data and limits."}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}