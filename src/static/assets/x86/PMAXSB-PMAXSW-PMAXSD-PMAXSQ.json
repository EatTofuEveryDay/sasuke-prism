{"title":"PMAXSB/PMAXSW/PMAXSD/PMAXSQ â€” Maximum of Packed Signed Integers","fields":[{"name":"Instruction Modes","value":"`PMAXSW mm1, mm2/m64`\n`PMAXSB xmm1, xmm2/m128`\n`PMAXSW xmm1, xmm2/m128`\n`PMAXSD xmm1, xmm2/m128`\n`VPMAXSB xmm1, xmm2, xmm3/m128`\n`VPMAXSW xmm1, xmm2, xmm3/m128`\n`VPMAXSD xmm1, xmm2, xmm3/m128`\n`VPMAXSB ymm1, ymm2, ymm3/m256`\n`VPMAXSW ymm1, ymm2, ymm3/m256`\n`VPMAXSD ymm1, ymm2, ymm3/m256`\n`VPMAXSB xmm1{k1}{z}, xmm2, xmm3/m128`\n`VPMAXSB ymm1{k1}{z}, ymm2, ymm3/m256`\n`VPMAXSB zmm1{k1}{z}, zmm2, zmm3/m512`\n`VPMAXSW xmm1{k1}{z}, xmm2, xmm3/m128`\n`VPMAXSW ymm1{k1}{z}, ymm2, ymm3/m256`\n`VPMAXSW zmm1{k1}{z}, zmm2, zmm3/m512`\n`VPMAXSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst`\n`VPMAXSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst`\n`VPMAXSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst`\n`VPMAXSQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst`\n`VPMAXSQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst`\n`VPMAXSQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst`"},{"name":"Description","value":"Performs a SIMD compare of the packed signed byte, word, dword or qword integers in the second source operand and the first source operand and returns the maximum value for each pair of integers to the destination operand."},{"name":"\u200b","value":"Legacy SSE version PMAXSW: The source operand can be an MMX technology register or a 64-bit memory location. The destination operand can be an MMX technology register."},{"name":"\u200b","value":"128-bit Legacy SSE version: The first source and destination operands are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the corresponding YMM destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 encoded version: The first source and destination operands are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the corresponding destination register are zeroed."},{"name":"\u200b","value":"VEX.256 encoded version: The second source operand can be an YMM register or a 256-bit memory location. The first source and destination operands are YMM registers. Bits (MAXVL-1:256) of the corresponding destination register are zeroed."},{"name":"\u200b","value":"EVEX encoded VPMAXSD/Q: The first source operand is a ZMM/YMM/XMM register; The second source operand is a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32/64-bit memory location. The destination operand is conditionally updated based on writemask k1."},{"name":"\u200b","value":"EVEX encoded VPMAXSB/W: The first source operand is a ZMM/YMM/XMM register; The second source operand is a ZMM/YMM/XMM register, a 512/256/128-bit memory location. The destination operand is conditionally updated based on writemask k1."},{"name":"C/C++ Intrinsics","value":"`VPMAXSB __m512i _mm512_max_epi8( __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMAXSB __m512i _mm512_mask_max_epi8(__m512i s, __mmask64 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMAXSB __m512i _mm512_maskz_max_epi8( __mmask64 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMAXSW __m512i _mm512_max_epi16( __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMAXSW __m512i _mm512_mask_max_epi16(__m512i s, __mmask32 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMAXSW __m512i _mm512_maskz_max_epi16( __mmask32 k, __m512i a, __m512i b);\n`"},{"name":"\u200b","value":"`VPMAXSB __m256i _mm256_mask_max_epi8(__m256i s, __mmask32 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMAXSB __m256i _mm256_maskz_max_epi8( __mmask32 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMAXSW __m256i _mm256_mask_max_epi16(__m256i s, __mmask16 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMAXSW __m256i _mm256_maskz_max_epi16( __mmask16 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"`VPMAXSB __m128i _mm_mask_max_epi8(__m128i s, __mmask16 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPMAXSB __m128i _mm_maskz_max_epi8( __mmask16 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPMAXSW __m128i _mm_mask_max_epi16(__m128i s, __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPMAXSW __m128i _mm_maskz_max_epi16( __mmask8 k, __m128i a, __m128i b);\n`"},{"name":"\u200b","value":"`VPMAXSD __m256i _mm256_mask_max_epi32(__m256i s, __mmask16 k, __m256i a, __m256i b);\n`"},{"name":"\u200b","value":"(20 more)"},{"name":"CPUID Flags","value":"SSE"}],"color":65535,"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}