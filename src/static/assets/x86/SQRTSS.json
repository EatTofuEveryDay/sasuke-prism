{"title":"SQRTSS â€” Compute Square Root of Scalar Single-Precision Value","fields":[{"name":"Instruction Modes","value":"`SQRTSS xmm1, xmm2/m32`\n`VSQRTSS xmm1, xmm2, xmm3/m32`\n`VSQRTSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}`"},{"name":"Description","value":"Computes the square root of the low single-precision floating-point value in the second source operand and stores the single-precision floating-point result in the destination operand. The second source operand can be an XMM register or a 32-bit memory location. The first source and destination operands is an XMM register."},{"name":"\u200b","value":"128-bit Legacy SSE version: The first source operand and the destination operand are the same. Bits (MAXVL-1:32) of the corresponding YMM destination register remain unchanged."},{"name":"\u200b","value":"VEX.128 and EVEX encoded versions: Bits 127:32 of the destination operand are copied from the corresponding bits of the first source operand. Bits (MAXVL-1:128) of the destination ZMM register are zeroed."},{"name":"\u200b","value":"EVEX encoded version: The low doubleword element of the destination operand is updated according to the writemask."},{"name":"\u200b","value":"Software should ensure VSQRTSS is encoded with VEX.L=0. Encoding VSQRTSS with VEX.L=1 may encounter unpredictable behavior across different processor generations."},{"name":"C/C++ Intriniscs","value":"`VSQRTSS __m128 _mm_sqrt_round_ss(__m128 a, __m128 b, int r);\n`"},{"name":"\u200b","value":"`VSQRTSS __m128 _mm_mask_sqrt_round_ss(__m128 s, __mmask8 k, __m128 a, __m128 b, int r);\n`"},{"name":"\u200b","value":"`VSQRTSS __m128 _mm_maskz_sqrt_round_ss( __mmask8 k, __m128 a, __m128 b, int r);\n`"},{"name":"\u200b","value":"`SQRTSS __m128 _mm_sqrt_ss(__m128 a)\n`"},{"name":"CPUID Flags","value":"SSE"}],"footer":{"text":"Thanks to Felix Cloutier for the online x86 reference"}}